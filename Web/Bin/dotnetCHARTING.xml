<doc><assembly><name>dotnetCHARTING</name></assembly><members><member name="M:dotnetCHARTING.Graph.getLineBrush(System.Drawing.PointF,System.Drawing.PointF,dotnetCHARTING.Series,dotnetCHARTING.Element,dotnetCHARTING.Element,System.Boolean,System.Int32,System.Int32,System.Boolean)"><summary></summary><param name="pointA"></param><param name="pointB"></param><param name="s">Can use null if transparency of series wont be used.</param><param name="elementA"></param><param name="elementB"></param><param name="bottom"></param><param name="transparency">0 uses series default, otherwise you can set it.</param><param name="inverse">0: automatic | 1= darken | -1 = dont darken</param><returns></returns></member><!-- Badly formed XML comment ignored for member "F:dotnetCHARTING.MatrixManager.Cell.rect" --><!-- Badly formed XML comment ignored for member "F:dotnetCHARTING.MatrixManager.Cell.rectObjExtra" --><member name="T:dotnetCHARTING.ChartArea"><summary>
            Represents an area on which series and elements are plotted.
            </summary></member><member name="M:dotnetCHARTING.ChartArea.#ctor"><summary>
            Initializes a new instance of the ChartArea class.
            </summary></member><member name="M:dotnetCHARTING.ChartArea.#ctor(System.String)"><summary>Initializes a new instance of the ChartArea class with a title.</summary><param name="title">Chart area's title, equivalent of using: ChartArea.TitleBox.Text.</param></member><member name="M:dotnetCHARTING.ChartArea.#ctor(System.String,dotnetCHARTING.SeriesCollection)"><summary>
            Initializes a new instance of the ChartArea class with a title and
            SeriesCollection.
            </summary><param name="title">Chart area's title, equivalent of using: ChartArea.TitleBox.Text.</param><param name="sc">Data plotted in this chart area.</param></member><member name="M:dotnetCHARTING.ChartArea.#ctor(dotnetCHARTING.SeriesCollection)"><summary>Initializes a new instance of the ChartArea class with a SeriesCollection.</summary><param name="sc">Data plotted in this chart area.</param></member><member name="M:dotnetCHARTING.ChartArea.#ctor(System.String,dotnetCHARTING.Series)"><summary>
            Initializes a new instance of the ChartArea class with a title and
            SeriesCollection.
            </summary><param name="title">Chart area's title, equivalent of using: ChartArea.TitleBox.Text.</param><param name="s">A series of data plotted in this chart area.</param></member><member name="M:dotnetCHARTING.ChartArea.#ctor(dotnetCHARTING.Series)"><summary>Initializes a new instance of the ChartArea class with a Series.</summary><param name="s">A series of data plotted in this chart area.</param></member><member name="M:dotnetCHARTING.ChartArea.ClearColors"><summary>
            Serves as a shortcut to make the ChartArea transparent.
            </summary><remarks>The following properties are set: <BR></BR>
            Background.Color = Color.Empty<BR></BR>
            Background.Bevel = false<BR></BR>
            Line.Color = Color.Empty<BR></BR>
            Shadow.Color = Color.Empty<BR></BR>
            InteriorLine.Color = Color.Empty<BR></BR><b>For each axis</b><br></br>
            AlternateGridBackground.Color = Color.Empty;<br></br>
            AlternateGridBackground.Mode = BackgroundMode.Color;<br></br>
            AlternateGridBackground.Bevel = false;<br></br>
            GridLine.Color = Color.Empty;<br></br>
            ZeroLine.Color = Color.Empty;<br></br></remarks></member><member name="M:dotnetCHARTING.ChartArea.GetRectangle"><summary>
            Gets a Rectangle object indicating this <strong>ChartArea's</strong> position and
            size after the chart is rendered.
            </summary></member><member name="M:dotnetCHARTING.ChartArea.GetCoordinates"><summary>
            Gets the coordinates of this <strong>ChartArea</strong> after the chart is
            rendered.
            </summary></member><member name="P:dotnetCHARTING.ChartArea.DateGrouping"><seealso cref="P:dotnetCHARTING.DataEngine.DateGrouping"></seealso><summary>
            Gets or sets a <see cref="T:dotnetCHARTING.TimeInterval"></see> enumeration which determines
            how the values of a given series are aggregated by date when retrieved from a database.
            <seealso cref="P:dotnetCHARTING.DataEngine.DateGrouping"></seealso></summary><remarks>Controls how the values of a given series are grouped by date. 
            In order to use this option the second column returned by the SqlStatement must be a 
            date/time. Options include Minutes, Hours, Days, Weeks, Months, Quarters and Years 
            where any StartDate and EndDate can be used and the chart will show all values 
            sequentially. There are additional options for Hour/Minute, Day/Hour, Week/Day, 
            Month/Day, Year/Quarter and Year/Month in these cases there are 2 special 
            considerations 1) only a single day / week / month / or year is charted and 2) 
            if the date range is greater than the period type (e.g. 1 day / 1 week / 1 month / 1 year) 
            values are totalled over that period. There are also shortcuts for the grouping 
            cases of Hour (Hours/Minute), Day (Day/Hour), Week(Week/Day), Month (Month/Day) 
            and Year (Year/Month). See all time interval options. This feature automatically 
            groups multiple data points over a given date range into the specific date grouping 
            you select. When DateGrouping is enabled you must ensure that each series within a 
            given chart returns date/time data for the second column returned by the SqlStatement.</remarks><example><code lang="CS">
            [C#]
            Chart.DateGrouping = TimeInterval.Days;
                </code><code lang="CS">
            [Visual Basic]
            Chart.DateGrouping = TimeInterval.Days
                </code></example></member><member name="P:dotnetCHARTING.ChartArea.Series"><summary>
            Gets or sets a series which is added to the chart's main <see cref="P:dotnetCHARTING.ChartArea.SeriesCollection"></see> when
            the Chart.SeriesCollection.Add() method is invoked.
            </summary><example><code lang="CS">
            [C#]
            //Adding series programatically
            Chart.Series.Name="Vancouver";
            Chart.Series.Type = SeriesType.Cylinder;
            Chart.Series.Element  = new Element("Mon",2);
            Chart.Series.Elements.Add();
            Chart.Series.Element = new Element("Tue",4);
            Chart.Series.Elements.Add();
            Chart.Series.Element = new Element("Wed",5);
            Chart.Series.Elements.Add();
            Chart.Series.Element = new Element("Thr",6);
            Chart.Series.Elements.Add();
            Chart.Series.Element = new Element("Fri",5);
            Chart.Series.Elements.Add();
            Chart.SeriesCollection.Add();
                </code><code lang="CS">
            [Visual Basic]
            'Adding series programatically
            Chart.Series.Name="Vancouver"
            Chart.Series.Type = SeriesType.Cylinder
            Chart.Series.Element  = new Element("Mon",2)
            Chart.Series.Elements.Add()
            Chart.Series.Element = new Element("Tue",4)
            Chart.Series.Elements.Add()
            Chart.Series.Element = new Element("Wed",5)
            Chart.Series.Elements.Add()
            Chart.Series.Element = new Element("Thr",6)
            Chart.Series.Elements.Add()
            Chart.Series.Element = new Element("Fri",5)
            Chart.Series.Elements.Add()
            Chart.SeriesCollection.Add()
                </code></example></member><member name="P:dotnetCHARTING.ChartArea.StartDayOfWeek"><summary>
            Gets or sets a <see cref="T:System.DayOfWeek"></see> enumeration 
            that indicates the starting day of the week when <see cref="P:dotnetCHARTING.ChartArea.DateGrouping"></see> is used. 
            </summary><example><code lang="CS">
            [C#]
            Chart.DateGrouping = TimeInterval.Weeks;
            Chart.StartDayOfWeek = DayOfWeek.Monday;
             
            //For complete code, see StartDayOfWeek.aspx sample.
                </code><code lang="CS">
            [Visual Basic]
            Chart.DateGrouping = TimeInterval.Weeks
            Chart.StartDayOfWeek = DayOfWeek.Monday
             
            'For complete code, see StartDayOfWeek.aspx sample.
                </code></example></member><member name="P:dotnetCHARTING.ChartArea.DateGroupingSort"><summary>
            Gets or sets a value indicating whether to maintain the sort order of the data as it is provided. 
            </summary><remarks>When dategrouping is used and StartDate or EndDate is not set, the data is sorted by the xAxis field by default.  Setting this property to true will maintain the sort order of the data as it is provided.</remarks><example><code lang="CS">
            [C#]
            Chart.DateGroupingSort = true;
                </code><code lang="CS">
            [Visual Basic]
            Chart.DateGroupingSort = true
                </code></example></member><member name="P:dotnetCHARTING.ChartArea.DateGroupingCalculation"><summary>
            Gets or sets an enum which determines how values are grouped to create a single element value.
            </summary><remarks>When dategrouping is used, if an element has more than one value, 
            a <see cref="T:dotnetCHARTING.Calculation"></see> is performed on those values. </remarks><example><code lang="CS">
            [C#]
            Chart.DateGroupingCalculation = Calculation.Average;
                </code><code lang="CS">
            [Visual Basic]
            Chart.DateGroupingCalculation = Calculation.Average
                </code></example></member><member name="P:dotnetCHARTING.ChartArea.StartDateOfYear"><summary>
            Gets or sets a DateTime object to determine the start month of the year when
               <a href="dotnetCHARTING~dotnetCHARTING.DataEngine~DateGrouping.html">DateGrouping</a>
               is used.
            </summary><remarks>
            This property determine the start month of the year. The default is
            January.
            </remarks><example>
                This example change the year duration from Jan-Dec to Mar-Feb. Beside month, other
                values are ignored. 
                <code lang="CS">
            de.StartDateOfYear = new DateTime(2004,3,1);
                </code><code lang="VB" title="[Visual Basic]">
            de.StartDateOfYear = New DateTime(2004, 3, 1)
                </code></example><seealso cref="P:dotnetCHARTING.ChartArea.DateGrouping">DateGrouping Property</seealso></member><member name="P:dotnetCHARTING.ChartArea.IncludeGroupingDataInSubValues"><summary>
            When using date grouping the main value in the element is derived 
            from the actual values in the database or data provided to .netCHARTING.
            This property controls whether these subvalues used in the calculation 
            to determine the element value are added to <see cref="!:SubValues"></see> or not.  
            By default, such values are not added to the element subvalues.
            </summary></member><member name="P:dotnetCHARTING.ChartArea.LimitPrimarySeries"><summary>
            In a multiple series chart, this property controls the primary series used 
            for the Limit operation. Other series' elements will be matched with 
            the primary series elements and that order will be maintained regardless of
            the values of the other series.  
            For example, if you limit to the top 5 values and set the LimitPrimarySeries 
            to the sales series other series such as dollar amount or quantity 
            would not affect which elements were ultimately selected for the chart.
            </summary></member><member name="P:dotnetCHARTING.ChartArea.DrillDownIntoSeries"><summary>
            When using automated drill down in conjunction with date grouping 
            and multiple series, this property determines if drill down 
            will occur into a single series or multiple series.
            </summary></member><member name="P:dotnetCHARTING.ChartArea.DefaultSeries"><summary>
            Gets or sets a <see cref="T:dotnetCHARTING.Series"></see> object whose properties will trickle 
            to all other series in this chart area unless otherwise specified.
            </summary><example><code lang="CS">
            myChartArea.DefaultSeries.Type = SeriesType.AreaLine;
                </code><code lang="VB">
            myChartArea.DefaultSeries.Type = SeriesType.AreaLine
                </code></example></member><member name="P:dotnetCHARTING.ChartArea.DefaultElement"><summary>
            Gets or sets an <see cref="T:dotnetCHARTING.Element"></see> object whose properties will trickle 
            to all other elements on the chart unless otherwise specified. This is a shortcut to the DefaultSeries.DefaultElement property.
            </summary><example><code lang="CS">
            myChartArea.DefaultElement.SmartLabel.Text = "%Name";
                </code><code lang="VB">
            myChartArea.DefaultElement.SmartLabel.Text = "%Name"
                </code></example></member><member name="P:dotnetCHARTING.ChartArea.Title"><summary>
            Gets or sets the ChartArea's title.<br></br>
            Equivalent to <c>ChartArea.TitleBox.Label.Text</c>.
            </summary><example><code lang="CS">
            ChartArea.Title = "Chart of Sales for 2003";
                </code><code lang="VB">
            ChartArea.Title = "Chart of Sales for 2003"
                </code></example></member><member name="P:dotnetCHARTING.ChartArea.SeriesCollection"><summary>
            Adds <see cref="P:dotnetCHARTING.ChartArea.Series">Series</see> or
            <a href="dotnetCHARTING~dotnetCHARTING.SeriesCollection.html">SeriesCollection</a>
            objects to the chart area.
            </summary></member><member name="P:dotnetCHARTING.ChartArea.Line"><summary>
            Gets or sets the %Line% object used to draw the outline of this chart
            area.
            </summary></member><member name="P:dotnetCHARTING.ChartArea.InteriorLine"><summary>
            Gets or sets a line object which is drawn inside the chart area.
            </summary><remarks>The interior line can be seen when the chart is drawn in 3D.</remarks></member><member name="P:dotnetCHARTING.ChartArea.Label"><summary>
            Gets or sets a label object which draws a string inside the chart area.
            </summary><remarks>The label will be drawn in the upper left corner of the chart.</remarks></member><member name="P:dotnetCHARTING.ChartArea.YAxis"><summary>
            Gets or sets the Y axis of this chart area.
            </summary><remarks>
            When the axis is specified, series plotted on this area will automatically use
            this y axis, unless otherwise specified.
            </remarks></member><member name="P:dotnetCHARTING.ChartArea.XAxis"><summary>
            Gets or sets the X axis of this chart area.
            </summary><remarks>
            When the axis is specified, series plotted on this area will automatically use
            this x axis, unless otherwise specified.
            </remarks></member><member name="P:dotnetCHARTING.ChartArea.Shadow"><summary>
            Gets or sets the <see cref="T:dotnetCHARTING.Shadow"></see> cast under this box.
            </summary></member><member name="P:dotnetCHARTING.ChartArea.Visible"><summary>Gets or sets a value that indicates whether this chart area is visible.</summary></member><member name="P:dotnetCHARTING.ChartArea.Background"><summary>
            Gets or sets a background object used to fill the interior of this chart
            area.
            </summary></member><member name="P:dotnetCHARTING.ChartArea.TitleBox"><summary>
            Gets or sets a title box (dotnetCHARTING.Box) object associated with this
            <strong>ChartArea</strong>.
            </summary></member><member name="P:dotnetCHARTING.ChartArea.LegendBox"><summary>
            Gets or sets a <see cref="P:dotnetCHARTING.ChartArea.LegendBox">LegendBox</see> object associated with this
            chart area.
            </summary><remarks>
            This property is null by default. By instantiating a new
            <see cref="P:dotnetCHARTING.ChartArea.LegendBox">LegendBox</see>, LegendEntry objects of the series or element in
            this chart area will appear in this LegendBox. Otherwise, they would appear in the main
            chart area's legend box (Chart.ChartArea.LegendBox).
            </remarks></member><member name="P:dotnetCHARTING.ChartArea.GridPosition"><summary>Gets or sets the layout column and row position of this ChartArea.</summary><remarks><para>The default (top-left) position is 0,0. To place another ChartArea to the
                right of it, the position would be 1,0.</para><para>The format is: ( Column, Row ) or ( X , Y )</para></remarks><example>
            ChartArea.GridPosition = new Point(1,0);
            </example></member><member name="P:dotnetCHARTING.ChartArea.Padding"><summary>
            Gets or sets the padding or spacing of chart objects plotted on this ChartArea.
            This applies only to <u>radar</u>, <u>pie</u>, and <u>gauge</u> charts.
            </summary><remarks>To control column and cylinder spacing see link below.</remarks><seealso cref="!:http://www.dotnetcharting.com/kb/article.aspx?id=10358">Column, Cylinder Spacing</seealso></member><member name="P:dotnetCHARTING.ChartArea.WidthPercentage"><summary><para>Gets or sets a value that specifies what percentage of the full width
                available for ChartAreas this ChartArea will occupy.</para></summary><remarks>
            Values range from 0 to 100. This property should be used with multiple horizontal
            chart area charts.
            </remarks></member><member name="P:dotnetCHARTING.ChartArea.HeightPercentage"><summary>
            Gets or sets a value that specifies what percentage of the full height available
            for ChartAreas this ChartArea will occupy.
            </summary><remarks>
            Values range from 0 to 100. This property should be used with multiple vertical
            chart area charts.
            </remarks></member><member name="T:dotnetCHARTING.ChartAreaLayout"><summary>
            Encapsulates a set of options that control the layout of multiple chart areas in
            a single chart image.
            </summary></member><member name="P:dotnetCHARTING.ChartAreaLayout.Mode"><summary>Gets or sets the a ChartAreaLayoutMode.</summary></member><member name="P:dotnetCHARTING.ChartAreaLayout.AlignUnrelatedAxis"><summary>
            Gets or sets a value that indicates whether chart areas oriented opposite to the
            grid layout mode's priority orientation can be placed next to chart areas that don't
            share any axes.
            </summary><remarks>This setting applies only to modes VerticalPriority and HorizontalPriority.</remarks></member><member name="T:dotnetCHARTING.LegendBox"><summary>Encapsulates a collection of %LegendEntry% objects.</summary><remarks>
            The legend box has many options such as positioning, source of entries and more.
            See legend box tutorial for more info.
            </remarks></member><member name="T:dotnetCHARTING.Box"><summary>
            Represents a box that acts as a container for text and icons. For example a <see cref="P:dotnetCHARTING.Chart.TitleBox"></see> or <see cref="P:dotnetCHARTING.Chart.LegendBox"></see>.
            </summary><remarks>
                The box object provides the following 
                <list type="bullet"><item>Defines objects used to fill the interior, shadow, and outline the
                    box.</item><item>Defines rectangle edge styles.</item><item>Defines the position, title box icon, LegendBox layout template, and
                    interior label.</item></list></remarks></member><member name="M:dotnetCHARTING.Box.#ctor"><summary>
            Initializes a new instance of the Box class.
            </summary></member><member name="M:dotnetCHARTING.Box.ClearColors"><summary>
            Serves as a shortcut to make this box invisible.
            </summary><remarks>The following properties are set when invoked: <BR></BR>
            Background.Color = Color.Empty<BR></BR>
            Background.Bevel = false<BR></BR>
            Line.Color = Color.Empty<BR></BR>
            Shadow.Color = Color.Empty<BR></BR>
            InteriorLine.Color = Color.Empty<BR></BR></remarks><example>
                Clears legend colors. 
                <code lang="CS" title="[New Example]">
            Chart.LegendBox.ClearColors();
                </code><code lang="VB" title="[New Example]">
            Chart.LegendBox.ClearColors()
                </code></example></member><member name="M:dotnetCHARTING.Box.GetCoordinates"><summary>Gets the coordinates of this box after the chart is rendered.</summary><isnew>6/24/2005</isnew></member><member name="M:dotnetCHARTING.Box.GetRectangle"><summary>
            Gets a Rectangle object indicating this boxes position and size after the chart
            is rendered.
            </summary><isnew>6/24/2005</isnew></member><member name="P:dotnetCHARTING.Box.Padding"><summary>
            Gets or sets a value in pixels that represents the padding between objects within
            the box and the box walls.
            </summary><remarks>Legend boxes also use this property to set the padding between entries.</remarks></member><member name="P:dotnetCHARTING.Box.Orientation"><summary>Gets or sets this object's orientation around a ChartArea.</summary></member><member name="P:dotnetCHARTING.Box.Visible"><summary>Gets or sets a value that indicates whether this box is visible.</summary></member><member name="P:dotnetCHARTING.Box.Position"><summary>
            Gets or sets the position of this box.
            </summary><value><a href="dotnetCharting.WinForms_V3.3~dotnetCHARTING.TitleBoxPosition.html">TitleBoxPosition</a>,
            <a href="dotnetCharting.WinForms_V3.3~dotnetCHARTING.LegendBoxPosition.html">LegendBoxPosition</a>
            enumeration, or %System.Drawing.Point%.
            </value><example>
                Show 3 uses of the property. 
                <code lang="VB" title="[New Example]">
            'Title position
            Chart.TitleBox.Position = TitleBoxPosition.FullWithLegend
            'Legend box position
            Chart.LegendBox.Position = LegendBoxPosition.Top
            'Absolute legend position in pixels
            Chart.LegendBox.Position = New Point(10,15)
                </code><code lang="CS" title="[New Example]">
            //Title position
            Chart.TitleBox.Position = TitleBoxPosition.FullWithLegend;
            //Legend box position
            Chart.LegendBox.Position = LegendBoxPosition.Top;
            //Absolute legend position in pixels
            Chart.LegendBox.Position = New Point(10,15);
                </code></example></member><member name="P:dotnetCHARTING.Box.CornerBottomLeft"><summary>
            Gets or sets the bottom left corner style.
            </summary></member><member name="P:dotnetCHARTING.Box.CornerBottomRight"><summary>
            Gets or sets the bottom right corner style.
            </summary></member><member name="P:dotnetCHARTING.Box.CornerTopRight"><summary>
            Gets or sets the top right corner style.
            </summary></member><member name="P:dotnetCHARTING.Box.CornerTopLeft"><summary>
            Gets or sets the top left corner style.
            </summary></member><member name="P:dotnetCHARTING.Box.DefaultCorner"><summary>
            Gets or sets the default box corner style.
            </summary><remarks>Explicitly set corners will not be overridden.</remarks><example>
                Usage example. 
                <code lang="VB" title="[New Example]">
            Chart.LegendBox.DefaultCorner = BoxCorner.Round
                </code><code lang="CS" title="[New Example]">
            Chart.LegendBox.DefaultCorner = BoxCorner.Round;
                </code></example></member><member name="P:dotnetCHARTING.Box.Background"><summary>
            Gets or sets a background object used to fill the interior of this box.
            </summary></member><member name="P:dotnetCHARTING.Box.Line"><summary>
            Gets or sets the exterior line of this box.
            </summary></member><member name="P:dotnetCHARTING.Box.InteriorLine"><summary>
            Gets or sets the interior line of this <see cref="P:dotnetCHARTING.Chart.LegendBox">legend box</see>.
            </summary><remarks>Multiple column legend boxes draw this line to separate columns.</remarks></member><member name="P:dotnetCHARTING.Box.Label"><summary>
            Gets or sets the <see cref="P:dotnetCHARTING.Box.Label"></see> of this box. 
            </summary><remarks>
            When the box text is not determined by this label, it's font and color properties
            will be used for any text that appears in the box. When used as a TitleBox and the
            position is set to FullWithLegend, the font properties of ChartArea.LegendBox.Label
            will be used for the legend entries and the Chart.TitleBox.Label properties and text
            will be used for the title.
            </remarks></member><member name="P:dotnetCHARTING.Box.Shadow"><summary>
            Gets or sets the <see cref="T:dotnetCHARTING.Shadow"></see> cast under this box.
            </summary></member><member name="P:dotnetCHARTING.Box.IconPath"><summary>
            Gets or sets the icon path of this <see cref="P:dotnetCHARTING.Chart.TitleBox">title box</see>.
            </summary><remarks>Only the <see cref="P:dotnetCHARTING.Chart.TitleBox">title box</see> supports this feature.</remarks></member><member name="M:dotnetCHARTING.LegendBox.#ctor"><summary>Initializes a new instance of the <strong>LegendBox</strong> class.</summary></member><member name="F:dotnetCHARTING.LegendBox.maxRows"><summary>
            Ratio of title to legend in titlewith legend box.
            </summary></member><member name="F:dotnetCHARTING.LegendBox.perColumnEntries"><summary>
            ArrayList of legendEntryCOllections, one for each column.
            </summary></member><member name="F:dotnetCHARTING.LegendBox.sizeSet"><summary>
            When false the size needs to be set or set again.
            </summary></member><member name="F:dotnetCHARTING.LegendBox.rectangleSet"><summary>
            Used temporarily in calculateRectangles method, then reset to false again.
            </summary></member><member name="P:dotnetCHARTING.LegendBox.ExtraEntries"><summary>
            Gets a collection of additional
            <a href="dotnetCHARTING~dotnetCHARTING.LegendEntry.html">LegendEntry</a> objects that
            are added to this <strong>LegendBox</strong>.
            </summary></member><member name="P:dotnetCHARTING.LegendBox.ListTopToBottom"><summary>
            Gets or sets a value that indicates whether legend entries are listed top to
            bottom in multi-column legend boxes.
            </summary><remarks>
            When false, entries are listed left to right across columns in multi-column
            legend boxes.
            </remarks></member><member name="P:dotnetCHARTING.LegendBox.Template"><summary>
            Gets or sets the legend entry column layout of this
            <see cref="P:dotnetCHARTING.Chart.LegendBox">legend box</see>.
            </summary><remarks><para>Three tokens native to the legend box are:</para><list type="bullet"><item><c>/%Icon</c> - Draws a LegendEntry object's icon
                    (LegendEntry.Marker).</item><item><c>/%Name</c> - Writes the legend entry's name
                    (LegendEntry.Name).</item><item><c>/%Value</c> - Writes the legend entry's value
                    (LegendEntry.Value).</item></list><para><strong>NOTE</strong>: Legend entry properties like LegendEntry.Name can
                contain tokens used with the object the legend entry represents.<br></br><br></br><br></br>
                Some examples of properly formed templates are:<br></br><br></br><c>LegendBox.Template = "/%Icon/%Name/%Value"</c><br></br><br></br><c>LegendBox.Template = "/%Name/%Icon"</c></para></remarks></member><member name="P:dotnetCHARTING.LegendBox.LabelStyle"><summary>
            Gets or sets a <a href="dotnetCHARTING~dotnetCHARTING.Label.html">Label</a>
            object that encapsulates default label style properties applied to legend entries drawn
            in this <strong>LegendBox</strong>.
            </summary><remarks>This property is the equivalent of LegendBox.DefaultEntry.LabelStyle.</remarks></member><member name="P:dotnetCHARTING.LegendBox.DefaultEntry"><summary>
            Gets or sets a
            <a href="dotnetCHARTING~dotnetCHARTING.LegendEntry.html">LegendEntry</a> that behaves
            as a vehicle for property settings that will propagate to all entries in this
            <strong>LegendBox</strong>.
            </summary><remarks>
            The property settings of this object will not overwrite properties explicitly set
            for any given
            <a href="dotnetCHARTING~dotnetCHARTING.LegendEntry.html">LegendEntry</a>.
            </remarks></member><member name="P:dotnetCHARTING.LegendBox.HeaderEntry"><summary>
            Gets or sets a
            <a href="dotnetCHARTING~dotnetCHARTING.LegendEntry.html">LegendEntry</a> that is used
            as a header of this <strong>LegendBox</strong>.
            </summary><remarks>
            This entry is not visible by default. To use it, set HeaderEntry.Visible = true.
            By default this object has different style settings that accentuate the fact that it is
            a header. Additional headers can be added to the
            <a href="dotnetCHARTING~dotnetCHARTING.LegendBox~ExtraEntries.html">ExtraEntries</a>
            collection.
            </remarks></member><member name="P:dotnetCHARTING.LegendBox.DataSource"><summary>
            Source of objects to populate the legend with.
            </summary><remarks>
            This DataSource is used with custom legend boxes added to
            Chart.ExtraLegendBoxes.
            </remarks></member><member name="P:dotnetCHARTING.LegendBox.Label"><summary>Obsolete, please use LegendBox.LabelStyle instead.</summary></member><member name="T:dotnetCHARTING.LegendEntry"><summary>
            Represents an entry in the legend box.
            </summary></member><member name="M:dotnetCHARTING.LegendEntry.#ctor"><summary>Initializes a new instance of the <strong>LegendEntry</strong> class.</summary></member><member name="M:dotnetCHARTING.LegendEntry.#ctor(System.String,System.String)"><summary>
            Initializes a new instance of the <strong>LegendEntry</strong> class with a
               <a href="dotnetCHARTING~dotnetCHARTING.LegendEntry~Name.html">Name</a> and
               <a href="dotnetCHARTING~dotnetCHARTING.LegendEntry~Value.html">Value</a>.
            </summary><param name="nameString">
            Sets the
            LegendEntry.<a href="dotnetCHARTING~dotnetCHARTING.LegendEntry~Name.html">Name</a>
            property.
            </param><param name="valueString">
            Sets the
            LegendEntry.<a href="dotnetCHARTING~dotnetCHARTING.LegendEntry~Value.html">Value</a>
            property.
            </param></member><member name="M:dotnetCHARTING.LegendEntry.#ctor(System.String,System.String,System.Drawing.Color)"><summary>
            Initializes a new instance of the <strong>LegendEntry</strong> class with a
               <a href="dotnetCHARTING~dotnetCHARTING.LegendEntry~Name.html">Name</a>,
               <a href="dotnetCHARTING~dotnetCHARTING.LegendEntry~Value.html">Value</a> and icon
               color.
            </summary><param name="nameString">
            Sets the
            LegendEntry.<a href="dotnetCHARTING~dotnetCHARTING.LegendEntry~Name.html">Name</a>
            property.
            </param><param name="valueString">
            Sets the
            LegendEntry.<a href="dotnetCHARTING~dotnetCHARTING.LegendEntry~Value.html">Value</a>
            property.
            </param><param name="iconBackgroundColor">Sets the LegendEntry.Background.Color property.</param></member><member name="M:dotnetCHARTING.LegendEntry.#ctor(System.String,System.String,dotnetCHARTING.Background)"><summary>
            Initializes a new instance of the <strong>LegendEntry</strong> class with a
               <a href="dotnetCHARTING~dotnetCHARTING.LegendEntry~Name.html">Name</a>,
               <a href="dotnetCHARTING~dotnetCHARTING.LegendEntry~Value.html">Value</a> and icon
               background.
            </summary><param name="nameString">
            Sets the
            LegendEntry.<a href="dotnetCHARTING~dotnetCHARTING.LegendEntry~Name.html">Name</a>
            property.
            </param><param name="valueString">
            Sets the
            LegendEntry.<a href="dotnetCHARTING~dotnetCHARTING.LegendEntry~Value.html">Value</a>
            property.
            </param><param name="iconBackground">Sets the LegendEntry.Background.Color property.</param></member><member name="M:dotnetCHARTING.LegendEntry.#ctor(System.String,System.String,System.String)"><summary>
            Initializes a new instance of the <strong>LegendEntry</strong> class with a
               <a href="dotnetCHARTING~dotnetCHARTING.LegendEntry~Name.html">Name</a>,
               <a href="dotnetCHARTING~dotnetCHARTING.LegendEntry~Value.html">Value</a> and icon
               background.
            </summary><param name="nameString">
            Sets the
            LegendEntry.<a href="dotnetCHARTING~dotnetCHARTING.LegendEntry~Name.html">Name</a>
            property.
            </param><param name="valueString">
            Sets the
            LegendEntry.<a href="dotnetCHARTING~dotnetCHARTING.LegendEntry~Value.html">Value</a>
            property.
            </param><param name="iconString">Sets the string representation of the icon.</param></member><!-- Badly formed XML comment ignored for member "F:dotnetCHARTING.LegendEntry.fullEntrySize" --><member name="P:dotnetCHARTING.LegendEntry.Hotspot"><summary>
            Gets or sets the <see cref="T:dotnetCHARTING.Hotspot"></see> of this LegendEntry.
            </summary></member><member name="P:dotnetCHARTING.LegendEntry.Name"><summary>
            Gets or sets the name of this legend entry.
            </summary><remarks>Tokens may be used to describe the object represented by this legend entry.</remarks></member><member name="P:dotnetCHARTING.LegendEntry.Value"><summary>Gets or sets the value of this legend entry.</summary><remarks>
            This string specified in the legend box column
            <a href="dotnetCHARTING~dotnetCHARTING.LegendBox~Template.html">Template</a> by the
            token '%Value'.
            </remarks></member><member name="P:dotnetCHARTING.LegendEntry.Marker"><summary>
            Gets or sets an <see cref="T:dotnetCHARTING.ElementMarker"></see> that influences how the entry's icon is drawn.
            </summary><remarks>To draw only this marker as the icon, set <c>LegendEntry.SeriesType = SeriesType.Marker</c>.</remarks></member><member name="P:dotnetCHARTING.LegendEntry.SeriesType"><summary>
            Gets or sets a <see cref="T:dotnetCHARTING.SeriesType"></see> that influences how the entry's icon is drawn.
            </summary></member><member name="P:dotnetCHARTING.LegendEntry.DashStyle"><summary>
            Gets or sets a line <see cref="T:System.Drawing.Drawing2D.DashStyle"></see> that influences how the entry's icon is drawn.
            </summary><remarks>This object is used with the following settings<BR></BR><c>LegendEntry.SeriesType = SeriesType.Marker</c><BR></BR><c>LegendEntry.In3D = false</c></remarks></member><member name="P:dotnetCHARTING.LegendEntry.Background"><summary>
            Gets or sets a %Background% object that influences how the entry's icon is
            drawn.
            </summary><remarks>This object is used with the following settings <BR></BR><c>LegendEntry.SeriesType = SeriesType.Column</c></remarks></member><member name="P:dotnetCHARTING.LegendEntry.Use3D"><summary>
            Gets or sets a value that specifies whether icons represent 2D or 3D series.
            </summary></member><member name="P:dotnetCHARTING.LegendEntry.Visible"><summary>
            Gets or sets a value which specifies whether the legend entry is visible.
            </summary></member><member name="P:dotnetCHARTING.LegendEntry.ToolTip"><summary>
            Gets or sets this legend entry's tool tip.
            </summary><value>A string representing the tool tip of this legend entry.</value><remarks>Tokens may be used to describe the object represented by this legend entry.</remarks></member><member name="P:dotnetCHARTING.LegendEntry.URL"><summary>Gets or sets the URL of this legend entry.</summary><value>A string representing the url of this legend entry.</value><remarks>Tokens may be used to describe the object represented by this legend entry.</remarks></member><member name="P:dotnetCHARTING.LegendEntry.URLTarget"><summary>Gets or sets the URL target of this legend entry's link.</summary></member><member name="P:dotnetCHARTING.LegendEntry.SortOrder"><summary>
            Gets or sets a value that represents the sort position of this
            <strong>LegenEntry</strong> when sorted with other entries in a %LegendBox%.
            </summary><remarks>
            The default sort value of all legend entries is zero (0). To indicate that an
            entry is first in a legend box, set this property to -1.
            </remarks></member><member name="P:dotnetCHARTING.LegendEntry.DividerLine"><remarks>
            This line doesn't appear automatically because it's color
            (LegendEntry.Line.Color) is Color.Empty. To activate it, specify a color for the line.
            When active, it will add more space between the this entry and the one below it.
            </remarks><summary>Gets or sets a %Line% that is drawn under the LegendEntry.</summary></member><member name="P:dotnetCHARTING.LegendEntry.CustomAttributes"><summary>
            Gets or sets a %ListCollection% that represents additional entry
            attributes.
            </summary><remarks>
            In addition to name, value, and icon, the legend entry can contain further
            information such as descriptions or comments. These attributes will appear in a legend
            box when the LegendBox.Template string contains the custom attribute key prefixed with
            a '%'.
            </remarks></member><member name="P:dotnetCHARTING.LegendEntry.HeaderMode"><summary>
            Gets or sets an a %LegendEntryHeaderMode% enumeration that specifies a how this
            LegendEntry behaves.
            </summary></member><member name="P:dotnetCHARTING.LegendEntry.PaddingTop"><summary>
            Gets or sets a value (in pixels) that specifies additional padding above this
            <strong>LegendEntry</strong> object.
            </summary><remarks>
            This property is useful when the <strong>LegendEntry</strong> is a header and
            starts a new group of entries. Additional spacing may be required between the groups to
            accentuate the separation between groups.
            </remarks></member><member name="P:dotnetCHARTING.LegendEntry.LabelStyle"><summary>
            Gets or sets a %Label% object that defines the font and color of this
            <strong>LegendEntry</strong> object's text.
            </summary></member><member name="P:dotnetCHARTING.LegendEntry.DataSource"><summary>Gets or sets a DataSource object used to replace tokens.</summary></member><member name="T:dotnetCHARTING.LegendEntryCollection"><summary>
            Contains a collection of <see cref="T:dotnetCHARTING.LegendEntry">LegendEntry</see> objects.
            </summary><moduleiscollection></moduleiscollection></member><member name="M:dotnetCHARTING.LegendEntryCollection.Add(dotnetCHARTING.LegendEntry)"><summary>
            Adds a specified <see cref="T:dotnetCHARTING.LegendEntry">LegendEntry</see> class to this collection.
            </summary><param name="legendEntry">The <see cref="T:dotnetCHARTING.LegendEntry">LegendEntry</see> to add.</param><returns>The zero-based index of the added <see cref="T:dotnetCHARTING.LegendEntry">LegendEntry</see>.</returns></member><member name="M:dotnetCHARTING.LegendEntryCollection.Insert(System.Int32,dotnetCHARTING.LegendEntry)"><summary>
            Inserts a legend entry into this collection at a specified index.
            </summary><param name="index">The zero-based index into the collection at which to insert the legend entry.</param><param name="legendEntry">The legend entry to insert into this collection.</param></member><member name="M:dotnetCHARTING.LegendEntryCollection.Remove(dotnetCHARTING.LegendEntry)"><summary>
            Removes a specified legend entry from this collection.
            </summary><param name="legendEntry">The legend element to remove. </param></member><member name="M:dotnetCHARTING.LegendEntryCollection.Contains(dotnetCHARTING.LegendEntry)"><summary>
            Determines whether this collection contains a specified <see cref="T:dotnetCHARTING.LegendEntry">LegendEntry</see>.
            </summary><param name="legendEntry">The <see cref="T:dotnetCHARTING.LegendEntry">LegendEntry</see> to find.</param><returns>true if the specified <see cref="T:dotnetCHARTING.LegendEntry">LegendEntry</see> belongs to this collection; otherwise, false.</returns></member><member name="M:dotnetCHARTING.LegendEntryCollection.#ctor(dotnetCHARTING.LegendEntry[])"><summary>Creates a new instance of LegendEntryCollection with the specified list of LegendEntry objects.</summary></member><member name="M:dotnetCHARTING.LegendEntryCollection.Add(dotnetCHARTING.LegendEntryCollection)"><summary> Adds a specified <see cref="T:dotnetCHARTING.LegendEntryCollection"></see> to this collection.</summary><param name="legendEntryCollection">The <see cref="T:dotnetCHARTING.LegendEntryCollection"></see> to add.</param></member><member name="M:dotnetCHARTING.LegendEntryCollection.Add(dotnetCHARTING.LegendEntry[])"><summary> Adds the specified <see cref="T:dotnetCHARTING.LegendEntry"></see> objects to this collection.</summary><param name="legendEntryList">A list of <see cref="T:dotnetCHARTING.LegendEntry"></see> objects to add.</param></member><member name="M:dotnetCHARTING.LegendEntryCollection.IndexOf(dotnetCHARTING.LegendEntry)"><summary>Determines the index of a specified <see cref="T:dotnetCHARTING.LegendEntry"></see> in this collection.</summary><param name="legendEntry">The <see cref="T:dotnetCHARTING.LegendEntry"></see> to find.</param><returns>The zero-based index of the specified <see cref="T:dotnetCHARTING.LegendEntry"></see>.</returns></member><member name="F:dotnetCHARTING.LegendEntryCollection.temp_startColumn"><summary>
            For use when setting up the grid
            </summary></member><member name="M:dotnetCHARTING.LegendEntryCollection.Init_EntryColumns(dotnetCHARTING.LegendBox)"><summary>
            Initializes Collection.columns and each entries column collection
            </summary><param name="lb"></param></member><member name="P:dotnetCHARTING.LegendEntryCollection.Item(System.Int32)"><summary>
            Gets or sets the object at a specified index. 
            </summary></member><member name="F:dotnetCHARTING.LegendEntryCollection.ColumnInfo.columnToken"><summary>
            Token of the column this column falls into
            </summary></member><member name="F:dotnetCHARTING.LegendEntryCollection.ColumnInfo.labelText"><summary>
            Column text.
            </summary></member><member name="F:dotnetCHARTING.LegendEntryCollection.ColumnInfo.isImage"><summary>
            If it's an icon.
            </summary></member><member name="T:dotnetCHARTING.LegendEntryCollection.ColumnCollection"><summary> Contains a collection of <see cref="T:dotnetCHARTING.LegendEntryCollection.ColumnInfo">ColumnInfo</see> objects. </summary></member><member name="M:dotnetCHARTING.LegendEntryCollection.ColumnCollection.Add(dotnetCHARTING.LegendEntryCollection.ColumnInfo)"><summary> Adds a specified <see cref="T:dotnetCHARTING.LegendEntryCollection.ColumnInfo">ColumnInfo</see> class to this collection.</summary><param name="_ColumnInfo">The <see cref="T:dotnetCHARTING.LegendEntryCollection.ColumnInfo">ColumnInfo</see> to add.</param><returns>The zero-based index of the added <see cref="T:dotnetCHARTING.LegendEntryCollection.ColumnInfo">ColumnInfo</see>.</returns></member><member name="M:dotnetCHARTING.LegendEntryCollection.ColumnCollection.Insert(System.Int32,dotnetCHARTING.LegendEntryCollection.ColumnInfo)"><summary>Inserts a ColumnInfo into this collection at a specified index. </summary><param name="index">The zero-based index into the collection at which to insert the ColumnInfo.</param><param name="_ColumnInfo">The ColumnInfo to insert into this collection.</param></member><member name="M:dotnetCHARTING.LegendEntryCollection.ColumnCollection.Remove(dotnetCHARTING.LegendEntryCollection.ColumnInfo)"><summary>Removes a specified ColumnInfo from this collection.</summary><param name="_ColumnInfo">The ColumnInfo to remove. </param></member><member name="M:dotnetCHARTING.LegendEntryCollection.ColumnCollection.Contains(dotnetCHARTING.LegendEntryCollection.ColumnInfo)"><summary>Determines whether this collection contains a specified <see cref="T:dotnetCHARTING.LegendEntryCollection.ColumnInfo">ColumnInfo</see>.</summary><param name="_ColumnInfo">The <see cref="T:dotnetCHARTING.LegendEntryCollection.ColumnInfo">ColumnInfo</see> to find.</param><returns>true if the specified <see cref="T:dotnetCHARTING.LegendEntryCollection.ColumnInfo">ColumnInfo</see> belongs to this collection; otherwise, false.</returns></member><member name="P:dotnetCHARTING.LegendEntryCollection.ColumnCollection.Item(System.Int32)"><summary> Gets or sets the object at a specified index. </summary></member><member name="T:dotnetCHARTING.Axis"><summary>
            Specifies smart time label automation. Similar to specific except the first tick
            will indicate the instance in time and take it's default value from the axis default
            tick. Specifies smart time label automation. Similar to specific except the first tick
            will indicate the instance in time and take it's default value from the axis default
            tick. Specifies the single value time label automation mode. time intervals are
            specified in %TimeScaleLabelInfo.RangeIntervals%Represents an axis drawn on a
            %ChartArea%.
            </summary><remarks>
                The axis object is a powerful class that does the following. 
                <list type="bullet"><item>Defines objects used to draw the axis and fill sections of a ChartArea
                    such as grid lines.</item><item>Facilitates tick label text formatting and numerous manipulation
                    mechanisms.</item><item>Defines data element layout and order.</item><item>Defines an axis %dotnetCHARTING.Scale%, range, and tick frequency.</item><item>Calculates copies of itself that can perform unit conversions between
                    over one thousand defined units, mark time ranges with a specified
                    TimeInterval, and manipulate each tick label with a specified custom
                    method.</item></list>Axes can behave in 3 different modes. 
                <list type="table"><listheader><term>Mode</term><description>Description</description></listheader><item><term>Value Axis</term><description>The value axis dynamically displays a numeric or DateTime
                        range. Properties such as Scale, Interval, TimeInterval and others that
                        relate to ranges apply to this type of axis. Using ChartType.Combo, the y
                        axis is a value axis, with ChartType.Horizontal the x axis
                        is.</description></item><item><term>Label Axis</term><description>The label axis does not display a range of values but rather
                        the names of elements or series. Using ChartType.Combo, the x axis is a
                        label axis and with ChartType.Horizontal the y axis is. Using the
                        %DataEngine% with %DataEngine.DateGrouping% generates elements with a
                        numeric value in Element.YValue and a DateTime value in Element.XDateTime.
                        Because the Combo chart's x axis is a label axis the date time value cannot
                        be shown. To remedy this, the DataEngine also populates each element's
                        <see cref="P:dotnetCHARTING.Element.Name">Name</see> property with a string representation
                        of the DateTime value. This allows the x axis to show date values but it
                        does not allow the use of advanced options such as setting the TimeInterval
                        for those dates. To expose this functionality ChartType.Scatter must be
                        used because the x axis for that chart type acts as a value
                        axis.</description></item><item><term>Calculated Axis</term><description>A calculated or shadow axis is created by using of the
                        Axis.Calculate methods and must be added to the Chart.AxisCollection
                        collection. It is drawn by the original axis and represents the same range
                        but displays it in a different way.</description></item></list></remarks></member><member name="T:dotnetCHARTING.IInstanceID"><summary>
            Summary description for IInstanceID.
            </summary></member><member name="M:dotnetCHARTING.Axis.#ctor"><summary>
            Initializes a new instance of the Axis class.
            </summary></member><member name="M:dotnetCHARTING.Axis.#ctor(System.String)"><summary>
            Initializes a new instance of the Axis class with a name and label.
            </summary><param name="name">Sets the name and label of this axis.</param></member><member name="M:dotnetCHARTING.Axis.#ctor(System.String,dotnetCHARTING.Scale)"><summary>
            Initializes a new instance of the Axis class with a name, label, and <see cref="P:dotnetCHARTING.Axis.Scale">scale</see> enumeration.
            </summary><param name="name">Sets the name and label of this axis.</param><param name="scale">Sets the scale of this axis.</param></member><member name="M:dotnetCHARTING.Axis.#ctor(System.String,dotnetCHARTING.ChangeValueDelegate,dotnetCHARTING.Axis)"><summary>
            Initializes a new instance of the Axis class that will process the tick values 
            of the specified axis based on a custom method. 
            </summary><remarks>This instance must be added to Chart.AxisCollection. The specified axis 
            must appear on the chart, otherwise, the new instance will have no effect when added to Chart.AxisCollection.</remarks><param name="name">The name and label of this axis.</param><param name="ChangeValue">A delegate used to pass a custom method used for processing tick values.</param><param name="axisToShadow">The original axis whose tick labels will be processed.</param></member><member name="M:dotnetCHARTING.Axis.#ctor(System.String,System.Object,System.Object,dotnetCHARTING.Axis)"><summary>
            Initializes a new instance of the Axis class that will convert the tick labels of the specified axis to the
            specified units. 
            </summary><remarks>This instance must be added to Chart.AxisCollection. The specified axis 
            must appear on the chart, otherwise, the new instance will have no effect when added to Chart.AxisCollection.</remarks><param name="name">The name and label of this axis.</param><param name="fromUnit">Units representing the values of the original axis.</param><param name="toUnits">Units to convert to.</param><param name="axisToShadow">The original axis whose tick labels are converted.</param></member><member name="M:dotnetCHARTING.Axis.#ctor(System.String,dotnetCHARTING.TimeInterval,dotnetCHARTING.Axis)"><summary>
            Initializes a new instance of the Axis class that will recalculate time intervals of the specified axis.
            </summary><remarks>This instance must be added to Chart.AxisCollection. The specified axis 
            must appear on the chart and use Scale.Time, otherwise, the new instance will have no effect when added 
            to Chart.AxisCollection.</remarks><param name="name">The name and label of this axis.</param><param name="timeInterval">A <see cref="T:dotnetCHARTING.TimeInterval"></see> enumaration that specifies the new <see cref="P:dotnetCHARTING.Axis.TimeInterval"></see> for this axis. </param><param name="axisToShadow">An axis to derived from.</param></member><member name="F:dotnetCHARTING.Axis.scaleBreaks"><summary>
            Scale breaks, if automatic are loaded in loadRange
            </summary></member><member name="F:dotnetCHARTING.Axis.tickCollection"><summary>
            Internal
            </summary></member><member name="F:dotnetCHARTING.Axis.invertScale"><summary>
            Some sorting takes place in loadPoints
            </summary></member><member name="F:dotnetCHARTING.Axis.defaultTick"><summary>
            Trickling happens in loadValueLabels and labelLabels
            </summary></member><member name="F:dotnetCHARTING.Axis.scaleRange"><summary>
            Range set by user
            </summary></member><member name="M:dotnetCHARTING.Axis.Calculate(System.String,dotnetCHARTING.ChangeValueDelegate)"><summary>
            Obtains a copy instance of this <see cref="T:dotnetCHARTING.Axis"></see> and processes it's tick values based on the specified method. 
            </summary><param name="name">Name of the new axis instance.</param><param name="ChangeValue">A <see cref="T:dotnetCHARTING.ChangeValueDelegate"></see> pointing
            to a function that will process the tick labels of the new axis.</param><returns>A new calculated instance of this axis which must be added to the Chart.AxisCollection collection.</returns></member><member name="M:dotnetCHARTING.Axis.Calculate(System.String,System.Object,System.Object)"><summary>
            Obtains a copy instance of this <see cref="T:dotnetCHARTING.Axis"></see> and performs unit 
            conversion for it's tick values based on the specified units. 
            </summary><param name="name">Name of the new axis.</param><param name="convertFromUnit">Units to convert from.</param><param name="convertToUnit">Units to convert to.</param><returns>A new calculated instance of this axis.</returns></member><member name="M:dotnetCHARTING.Axis.Calculate(System.String,System.Object,System.Object,System.Boolean)"><summary>
            Obtains a copy instance of this <see cref="T:dotnetCHARTING.Axis"></see> and performs unit 
            conversion for it's tick values based on the specified units. 
            </summary><returns>A new calculated instance of this axis.</returns><param name="name">Name of the new axis.</param><param name="convertFromUnit">Unit to convert from.</param><param name="convertToUnit">Unit to convert to.</param><param name="refreshScale">
            If true, the axis ticks will not necessarily match the original ticks. They will
            have their own appropriate interval and be easier to read in many cases.
            </param></member><member name="M:dotnetCHARTING.Axis.Calculate(System.String,dotnetCHARTING.TimeInterval)"><summary>
            Obtains a copy instance of this <see cref="T:dotnetCHARTING.Axis"></see> and recalculates it's tick 
            values based a specified <see cref="T:dotnetCHARTING.TimeInterval"></see>. 
            </summary><returns>A new instance of the calculated axis.</returns><param name="name">Name of the derived axis.</param><param name="timeInterval">
            A %dotnetCHARTING.TimeInterval% enumeration that specifies the new time interval
            for the resulting axis.
            </param></member><member name="M:dotnetCHARTING.Axis.Calculate(System.String,dotnetCHARTING.TimeIntervalAdvanced)"><summary>
            Obtains a copy instance of this <see cref="T:dotnetCHARTING.Axis"></see> and recalculates it's tick 
            values based a specified <see cref="T:dotnetCHARTING.TimeInterval"></see>. 
            </summary><returns>A new instance of the calculated axis.</returns><param name="name">Name of the derived axis.</param><param name="timeIntervalAdvanced">
            A %dotnetCHARTING.TimeIntervalAdvanced% class that specifies the new time
            interval for the resulting axis.
            </param></member><member name="M:dotnetCHARTING.Axis.Calculate(System.String)"><summary>Creates a replica axis object that shadows this axis.</summary><param name="name">Name of the resulting axis.</param></member><member name="M:dotnetCHARTING.Axis.Calculate(System.String,System.Boolean)"><summary>
            Creates a replica axis object with a clear values option that shadows this axis.
            </summary><param name="name">Name of the resulting axis.</param><param name="clearValues">Removes the original (automatically generated) axis ticks.</param><returns></returns></member><member name="M:dotnetCHARTING.Axis.Calculate(System.String,System.Boolean,dotnetCHARTING.Orientation)"><summary>
            Creates a replica axis object with an orientation and a value clearing option that shadows this axis.
            </summary><param name="name">Name of the resulting axis.</param><param name="clearValues">Removes the original (automatically generated) axis ticks.</param><param name="axisOrientation">Orientation of the axis.</param><returns></returns></member><member name="M:dotnetCHARTING.Axis.AddLabelOverride(System.String,System.String)"><summary>
             Adds a <B>LabelOverride</B> to the <see cref="P:dotnetCHARTING.Axis.LabelOverrides"></see> collection. 
            </summary><param name="Key">The string to look for.</param><param name="Value">The string to replace the key with.</param></member><member name="M:dotnetCHARTING.Axis.AddLabelOverride(System.String,System.String,System.Boolean)"><summary>
            Adds a <B>LabelOverride</B> to the <see cref="P:dotnetCHARTING.Axis.LabelOverrides"></see> collection. 
            </summary><param name="Key">The string to look for.</param><param name="Value">The string to replace the key with.</param><param name="IgnoreCase">A Boolean value indicating whether to ignore case for strings or 
            convert the string to a number for comparison with the key so '0' will match '0.0'</param></member><member name="M:dotnetCHARTING.Axis.Clear"><summary>
            Serves as a shortcut to hide this axis.
            </summary><remarks>
                The axis is cleared by setting the following properties: 
                <pre><code>
            Axis.ClearValues = true;
            Axis.TickLine.Length = 0;
            Axis.Line.Color = Color.Empty;
            Axis.TickLabelPadding = 0;
            Axis.Label.Text = "";
            </code></pre></remarks></member><member name="M:dotnetCHARTING.Axis.AddCalculatedTick(dotnetCHARTING.Calculation)"><summary>
            Adds an %dotnetCHARTING.AxisTick% with a value based on the specified
            %dotnetCHARTING.Calculation%.
            </summary><remarks>The calculation will be based on all the series using this axis.</remarks><isnew>4/11/2005</isnew><param name="calculation">Calculation to perform.</param></member><member name="M:dotnetCHARTING.Axis.AddCalculatedTick(dotnetCHARTING.Calculation,dotnetCHARTING.Series)"><summary>
            Adds an %dotnetCHARTING.AxisTick% with a value based on the specified
            %dotnetCHARTING.Calculation%.
            </summary><overloads>
            Adds an %dotnetCHARTING.AxisTick% with a value based on the specified
            %dotnetCHARTING.Calculation%.
            </overloads><remarks>The calculation will be based on the specified Series.</remarks><isnew>4/11/2005</isnew><param name="calculation">Calculation to perform.</param><param name="series">Series to perform the calculation on.</param></member><member name="M:dotnetCHARTING.Axis.AddCalculatedTick(dotnetCHARTING.Calculation,dotnetCHARTING.SeriesCollection)"><summary>
            Adds an %dotnetCHARTING.AxisTick% with a value based on the specified
            %dotnetCHARTING.Calculation%.
            </summary><remarks>The calculation will be based on the specified SeriesCollection.</remarks><isnew>4/11/2005</isnew><param name="calculation">Calculation to perform.</param><param name="series">SeriesCollection to perform the calculation on.</param></member><member name="M:dotnetCHARTING.Axis.AddCalculatedTick(System.String,dotnetCHARTING.Calculation)"><summary>
            Adds an %dotnetCHARTING.AxisTick% with a value based on the specified
            %dotnetCHARTING.Calculation% using a template for the resulting label.
            </summary><remarks><para>The calculation will be based on all the series using this axis.</para><para>The %Value token in the template will be replaced with the resulting
                value.</para></remarks><isnew>4/11/2005</isnew><param name="labelTemplate">A template for the resulting tick label.</param><param name="calculation">Calculation to perform.</param></member><member name="M:dotnetCHARTING.Axis.AddCalculatedTick(System.String,dotnetCHARTING.Calculation,dotnetCHARTING.Series)"><remarks><para>The calculation will be based on the specified Series.</para><para>The %Value token in the template will be replaced with the resulting
                value.</para></remarks><summary>
            Adds an %dotnetCHARTING.AxisTick% with a value based on the specified
            %dotnetCHARTING.Calculation% using a template for the resulting label.
            </summary><isnew>4/11/2005</isnew><param name="labelTemplate">A template for the resulting tick label.</param><param name="calculation">Calculation to perform.</param><param name="series">Series to perform the calculation on.</param></member><member name="M:dotnetCHARTING.Axis.AddCalculatedTick(System.String,dotnetCHARTING.Calculation,dotnetCHARTING.SeriesCollection)"><remarks><para>The calculation will be based on the specified SeriesCollection.</para><para>The %Value token in the template will be replaced with the resulting
                value.</para></remarks><summary>
            Adds an %dotnetCHARTING.AxisTick% with a value based on the specified
            %dotnetCHARTING.Calculation% using a template for the resulting label.
            </summary><isnew>4/11/2005</isnew><param name="labelTemplate">A template for the resulting tick label.</param><param name="calculation">Calculation to perform.</param><param name="series">SeriesCollection to perform the calculation on.</param></member><member name="P:dotnetCHARTING.Axis.ScaleBreakLine"><summary>
            Gets or sets a Line object that is used to outline scale breaks on this
            axis.
            </summary><isnew>6/24/2005</isnew></member><member name="P:dotnetCHARTING.Axis.ScaleBreakCalendarPattern"><summary>
            Gets or sets a calendar pattern object that specifies the sequence of scale
            breaks on a time axis.
            </summary><isnew>6/24/2005</isnew></member><member name="P:dotnetCHARTING.Axis.ScaleBreakStyle"><summary>
            Gets or set a ScaleBreakStyle enumeration member that specifies the scale break
            style.
            </summary><isnew>6/24/2005</isnew></member><member name="P:dotnetCHARTING.Axis.OverlappingCircularLabelSeparator"><summary>
            Gets or sets a text label separator used when two axis ticks on a radar's x axis
            overlap.
            </summary><isnew>4/11/2005</isnew></member><member name="P:dotnetCHARTING.Axis.RadarMode"><summary>
            Gets or sets the RadarMode of this axis. Applies when this object is the x axis of a radar chart.
            </summary><isnew>4/11/2005</isnew></member><member name="P:dotnetCHARTING.Axis.CombinedElementsCalculation"><summary>
            Gets or sets the Calculation used when multiple elements on a quantitative x axis
            are located at the same x position. If the elements are columns they will be combined
            into a single element using this calculation, otherwise, the original elements are
            plotted.
            </summary><isnew>4/11/2005</isnew></member><member name="P:dotnetCHARTING.Axis.TickLabelAngle"><summary>
            Gets or sets the angle of axis tick labels when they are angled. Setting this
            property will not automatically angle tick labels.
            </summary><seealso cref="P:dotnetCHARTING.Axis.TickLabelMode">TickLabelMode Property</seealso><seealso cref="P:dotnetCHARTING.Axis.TickLabelMode">TickLabelMode Enumeration</seealso><remarks>
            To force tick label angles, set Axis.TickLabelMode =
            Axis.TickLabelMode.Angled.
            </remarks></member><member name="P:dotnetCHARTING.Axis.TimeScaleLabels"><summary>
            Gets the %TimeLabelAutomationInfo% class that encapsulates axis ticks, format
            strings, and options of the Time Label Automation features used to represent particular
            instances in time.
            </summary></member><member name="P:dotnetCHARTING.Axis.DefaultMinorTick"><summary>
            Gets or sets the default <see cref="T:dotnetCHARTING.AxisTick">dotnetCHARTING.AxisTick</see> used
            for all generated minor axis ticks.
            </summary></member><member name="P:dotnetCHARTING.Axis.MinorTicksPerInterval"><summary>
            Gets or sets the number of minor axis ticks generated between major axis
            ticks.
            </summary></member><member name="P:dotnetCHARTING.Axis.MinorTimeIntervalAdvanced"><summary>
            Gets or sets a
            <a href="dotnetCHARTING~dotnetCHARTING.TimeIntervalAdvanced.html">TimeIntervalAdvanced</a>
            object that determines the interval of minor axis ticks.
            </summary></member><member name="P:dotnetCHARTING.Axis.MinorInterval"><summary>
            Gets or sets a numeric value that determines the interval of minor axis
            ticks.
            </summary></member><member name="P:dotnetCHARTING.Axis.SmartMinorTicks"><summary>
            Gets or sets a value that indicates whether relevant minor axis ticks will be
            automatically determined based on major intervals.
            </summary><remarks>
            This property applies to automatic major intervals, not user defined
            intervals.
            </remarks></member><member name="P:dotnetCHARTING.Axis.SynchronizeScale"><summary>
            Gets a class that contains options to synchronize the scale of this axis with other scales.
            </summary></member><member name="P:dotnetCHARTING.Axis.Markers"><summary>
             A collection of <see cref="T:dotnetCHARTING.AxisMarker">AxisMarkers</see> used to highlight sections of this axis.
            </summary></member><member name="P:dotnetCHARTING.Axis.LabelOverrides"><summary>
            A collection of <see cref="T:dotnetCHARTING.LabelOverride"></see> objects. 
            </summary><remarks>LabelOverrides defines a string find and replace pair used to manipulate tick labels.</remarks><example>
                This example will replace each tick label value of '10' with 'High'. 
                <code lang="CS">
            [C#]
            Axis a = new Axis();
            a.LabelOverrides.Add( new LabelOverride("10","High") );
                </code><code lang="CS">
            [Visual Basic]
            Dim a As New Axis()
            a.LabelOverrides.Add( new LabelOverride("10","High") )
                </code></example></member><member name="P:dotnetCHARTING.Axis.ZeroTick"><summary>
            Gets or sets an %AxisTick% that replaces automatically generated axis tick with a
            value of zero (0).
            </summary><remarks>
            This tick can be disabled by setting it to null or it can be overridden by adding
            a new %AxisTick% with a value of zero to the %ExtraTicks% collection.
            </remarks></member><member name="P:dotnetCHARTING.Axis.DefaultTick"><summary>
            Gets or sets an %AxisTick% that acts as a vehicle for property settings that will
            propagate to all other axis ticks on this axis.
            </summary><remarks>
            The property settings of this object will not overwrite properties explicitly set
            for any given %AxisTick%.
            </remarks></member><member name="P:dotnetCHARTING.Axis.ExtraTicks"><summary>A collection of %AxisTick% objects added to the axis.</summary></member><member name="P:dotnetCHARTING.Axis.ScaleBreaks"><summary>
            A collection of %ScaleRange% objects that represent discontinuations in this
            axis' scale.
            </summary></member><member name="P:dotnetCHARTING.Axis.SmartScaleBreak"><summary>
            Gets or sets a value that indicates whether this axis will insert a discontinuity
            into it's scale if appropriate.
            </summary></member><member name="P:dotnetCHARTING.Axis.CenterTickMarks"><summary>
            Gets or sets a value that indicates whether axis ticks are centered above tick
            labels or drawn between each label.
            </summary><remarks>When false, Axis.DefaultTick.Line properties are used for all tick lines.</remarks></member><member name="P:dotnetCHARTING.Axis.InvertScale"><summary>Gets or sets a value that indicates whether the axis scale is inverted.</summary><remarks>When true the axis ticks will be reversed.</remarks></member><member name="P:dotnetCHARTING.Axis.MinimumInterval"><summary>Gets or sets the numeric minimum interval value.</summary><remarks>
            This allows you to prevent the axis scales from using intervals that are smaller
            than a single unit of your data. For example a chart showing votes where the maximum
            value is three may show intervals at .5, which cant represent any data for your chart.
            In this case setting this value to 1 will represent the chart data better.
            </remarks><example><code lang="CS" title="[New Example]" inline="False"></code></example></member><member name="P:dotnetCHARTING.Axis.ScaleRange"><summary>Gets or sets the scale's high and low values.</summary></member><member name="P:dotnetCHARTING.Axis.LogarithmicBase"><summary>
            Gets or sets the logarithmic base of logarithmic axis scales. Used only in
            conjunction with %Logarithmic Scales:dotnetCHARTING.Scale%.
            </summary><remarks>
            This property is used in conjunction with enumeration members
            <strong>Scale.Logarithmic</strong> and
            <strong>Scale.LogarithmicStacked</strong>.
            </remarks></member><member name="P:dotnetCHARTING.Axis.Minimum"><summary>
            Gets or sets the lower bounds of this numeric axis' range.
            </summary><value>A <see cref="T:System.Double"></see> indicating the minimum value of this axis.</value><remarks>Applies to value axes. When not specified, this value defaults to 0. When the range axis scale 
            is used, it will be set relative to the minimum range of the plotted data. </remarks></member><member name="P:dotnetCHARTING.Axis.Maximum"><summary>
             Gets or sets the upper bounds of this numeric axis' range.
               </summary><value>A <see cref="T:System.Double"></see> indicating the  maximum value of this axis.</value><remarks>Applies to value axes. When not specified, this value is set relative to the 
            maximum range of the plotted data. </remarks></member><member name="P:dotnetCHARTING.Axis.Interval"><summary>
            Gets or sets the numeric tick label interval for this axis. 
            </summary><value>A <see cref="T:System.Double"></see> that specifies the numeric tick label interval for this axis. </value><remarks>
            Tick labels will increment by this value starting at %Axis.Minimum% and ending at
            %Axis.Maximum% if specified. If not set, the interval is automatically determined based
            on the data range.<br></br><br></br>
            (Applies to quantitative axes with numeric scales)
            </remarks></member><member name="P:dotnetCHARTING.Axis.TimeInterval"><summary>
            Gets or sets the time interval between tick labels when using the time scale.
            </summary><value>A <see cref="P:dotnetCHARTING.Axis.TimeInterval">TimeInterval</see> enumeration that specifies the time 
            interval between tick labels when using the time scale.</value><remarks>(Applies to quantitative axes using <strong>Scale.Time</strong>)</remarks></member><member name="P:dotnetCHARTING.Axis.TimeIntervalAdvanced"><summary>
            Gets or sets a class that represents advanced time interval settings to
            supplement the %TimeInterval% property.
            </summary><remarks>
            This property can be used in conjunction with %TimeInterval% or override it
            completley.
            </remarks></member><member name="P:dotnetCHARTING.Axis.GenerateElementTicks"><summary>
            Gets or sets a value that indicates whether an %AxisTick% object is generated for
            each element's position on this axis.
            </summary></member><member name="P:dotnetCHARTING.Axis.RangeAngle"><summary>
            Gets or sets an angle measured in degrees that is centered at the orientation angle.
            </summary><remarks>Example: If the orientation angle is 100 and the range angle is 100,
            the axis will begin at 50 degrees and end at 150 degrees.</remarks></member><member name="P:dotnetCHARTING.Axis.SweepAngle"><summary>
            Gets or sets an angle measured in degrees clockwise from the <see cref="P:dotnetCHARTING.Axis.OrientationAngle"></see>
            to the other side of the axis.
            </summary></member><member name="P:dotnetCHARTING.Axis.OrientationAngle"><summary>
            Gets or sets an angle measured in degrees clockwise from the y-axis specifying
            the direction a <strong>gauge</strong> axis is oriented.
            </summary><remarks>When <see cref="P:dotnetCHARTING.Axis.RangeAngle"></see> is set, the orientation is the point the
            middle of the axis is facing. When <see cref="P:dotnetCHARTING.Axis.SweepAngle"></see> is set, the orientation is the
            starting angle of the sweep.</remarks></member><member name="P:dotnetCHARTING.Axis.LabelMarker"><summary>
            Gets or sets an %ElementMarker% object used on gauge charts in place of the axis'
            label.
            </summary><remarks>The marker will be positioned between the needle base and the center of 
            the gauge axis.</remarks></member><member name="P:dotnetCHARTING.Axis.LabelRotate"><summary>
            Gets or sets a value which indicates whether the axis label of this <b>y axis</b> is facing the tick 
            labels or is facing away.
            </summary></member><member name="P:dotnetCHARTING.Axis.Orientation"><summary>
            Gets or sets the orientation of this axis. 
            </summary><value>An <see cref="P:dotnetCHARTING.Axis.Orientation">Orientation</see> enumeration which specifies on which side of a <see cref="T:dotnetCHARTING.ChartArea"></see> 
            the axis is rendered.</value></member><member name="P:dotnetCHARTING.Axis.ClearValues"><summary>
            Gets or sets a value which indicates whether tick labels are cleared before <see cref="P:dotnetCHARTING.Axis.LabelOverrides"></see> are applied.
            </summary><value>A boolean value which indicates whether tick labels are cleared before <see cref="P:dotnetCHARTING.Axis.LabelOverrides"></see> are 
            applied.</value><remarks>Only the tick labels that are not overridden are cleared.</remarks></member><member name="P:dotnetCHARTING.Axis.Name"><summary>
            Gets or sets the name of this axis. 
            </summary><value>A string representing the name of this axis.</value><remarks>If Axis.Label.Text is not specified this 
            value will be used. The name is also used to identify the axis with element or series tokens.
            </remarks></member><member name="P:dotnetCHARTING.Axis.CultureName"><summary>
            Gets or sets the culture name used for number and date formatting in conjunction
            with %FormatString%.
            </summary><value>A string representing the culture name of this axis.</value><remarks>The culture name is applied to tick values and data charted on this axis.
            See the <see cref="T:System.Globalization.CultureInfo"></see> class for possible names of a culture.
            <br></br>(This property applies to value axes)</remarks></member><member name="P:dotnetCHARTING.Axis.FormatString"><summary>
            Gets or sets the format string used by this axis.
            </summary><value>A string representing the format used by values associated with this axis.</value><remarks>
            Tick labels and labels of elements bound to this axis will be formatted with 
            this format string.<br></br>(This property applies to value axes)</remarks></member><member name="P:dotnetCHARTING.Axis.AlternateGridBackground"><summary>
            Gets or sets a %Background% object used to fill the area between every other grid
            two grid lines.
            </summary><value>A <see cref="T:dotnetCHARTING.Background"></see> object that will fill every other grid area.</value><remarks>To disable this feature, set AlternateGridBackground.Color = Color.Empty.</remarks></member><member name="P:dotnetCHARTING.Axis.Line"><summary>Gets or sets the axis %dotnetCHARTING.Line%.</summary><value>A <see cref="P:dotnetCHARTING.Axis.Line">Line</see> object drawn across the axis.</value><remarks>
            When the origin or 'point of zero' is visible on the axis, this line is drawn
            twice and away from the origin in order for line caps to appear correctly
            (Line.StartCap, Line.EndCap).
            </remarks></member><member name="P:dotnetCHARTING.Axis.TickLine"><summary>Gets or sets the tick %dotnetCHARTING.Line% for all ticks marks.</summary><value>
            A <see cref="T:dotnetCHARTING.Line">Line</see> object applied to all tick lines of
            this axis.
            </value><remarks>Setting <c>TickLine.Length</c> will specify the tick line's length.</remarks></member><member name="P:dotnetCHARTING.Axis.GridLine"><summary>Gets or sets this axis' grid %dotnetCHARTING.Line%.</summary><value>A %dotnetCHARTING.Line% object describing grid line visual properties.</value><remarks>Grid lines are drawn for each tick mark on an axis to the other side of a 
            <see cref="T:dotnetCHARTING.ChartArea"></see>. To disable grid lines set 
            <c>GridLine.Color = Color.Empty</c>
            or <c>Axis.ShowGrid = false</c>.</remarks></member><member name="P:dotnetCHARTING.Axis.ZeroLine"><summary>
            Gets or sets the grid %dotnetCHARTING.Line% at the origin or 'point of zero' on
            this axis.
            </summary><value>A grid %dotnetCHARTING.Line% drawn at the origin of this axis.</value><remarks>Applies to value axes with numeric scales except Scale.Logarithmic</remarks></member><member name="P:dotnetCHARTING.Axis.ShowGrid"><summary>
            Gets or sets a value indicating whether grid lines are drawn.
            </summary><value>A boolean value that indicates whether grid lines are drawn.</value><remarks>If false, no grid lines will be drawn.</remarks></member><member name="P:dotnetCHARTING.Axis.Position"><summary>
            Gets or sets the axis positions when 2 or more axes are drawn on the same side of
            a %ChartArea%.
            </summary><value> An integer specifying the position of the axis.
            </value><remarks>Lower values will be drawn closer to the front. This will also affect 
            the order of series bound the the axes. </remarks></member><member name="P:dotnetCHARTING.Axis.ReverseStack"><summary>
            Gets or sets a value that indicates whether the order of stacked elements is reversed. 
            </summary><value>A Boolean value that indicates whether the order of stacked elements is reversed. 
            </value><remarks> Applies to value axes using a stacked axis <see cref="P:dotnetCHARTING.Axis.Scale"></see>.</remarks></member><member name="P:dotnetCHARTING.Axis.ReverseSeries"><summary>
            Gets or sets a value that indicates whether the positions of series bound to this axis are reversed.
            </summary><value>A Boolean value that indicates whether the positions of series bound to this axis are 
            reversed.</value><remarks>(Applies to label axes)</remarks></member><member name="P:dotnetCHARTING.Axis.ReverseSeriesPositions"><summary>
            Gets or sets a value that indicates whether the positions of series bound to this axis are reversed 
            without reversing legend positions.</summary><value>A Boolean value that indicates whether the positions 
            of series bound to this axis are reversed without reversing legend positions.</value><remarks>Applies 
            to label axes.</remarks></member><member name="P:dotnetCHARTING.Axis.ClusterColumns"><summary>
            Gets or sets a value that indicates whether columns and cylinders are drawn side by side or front to back.
            </summary><value>A boolean value that indicates whether columns and cylinders are drawn side by side or 
            front to back.</value><remarks>(Applies to label axes) When true, columns and cylinders 
            are drawn side by side.</remarks></member><member name="P:dotnetCHARTING.Axis.SpacingPercentage"><seealso cref="P:dotnetCHARTING.Axis.StaticColumnWidth"></seealso><summary>
            Gets or sets a percentage (0 - 100) which indicates the spacing between columns, cylinders or groups thereof.
            <seealso cref="P:dotnetCHARTING.Axis.StaticColumnWidth"></seealso></summary><value>A <see cref="T:System.Single"></see> value indicating the spacing percentage between columns, cylinders or groups thereof.
            </value><remarks>(Applies to label axes)</remarks></member><member name="P:dotnetCHARTING.Axis.StaticColumnWidth"><summary>
            Gets or sets the static bar width in pixels. 
            </summary><value>A <see cref="T:System.Single"></see> value indicating the static width of columns, cylinders or groups thereof.
            </value><remarks>A value of 0 = Automatic and spacing will be based on the <see cref="P:dotnetCHARTING.Axis.SpacingPercentage"></see> property.<br></br>(Applies to label axes)</remarks></member><member name="P:dotnetCHARTING.Axis.Percent"><summary>
            Gets or sets a value that indicates whether this axis displays percent values. 
            </summary><value>A Boolean value indicating whether this this axis displays percent values. </value><remarks>
            When true, a percent sign sign will be added to the end of tick labels and the
            %Maximum% will snap to 100 percent if the plotted data's range falls between 50 and
            100.<br></br><br></br>
            (Applies to value axes not using Scale.Time)
            </remarks></member><member name="P:dotnetCHARTING.Axis.Scale"><summary>
            Gets or sets the scale of this axis.
            </summary><value>The axis <see cref="T:dotnetCHARTING.Scale"></see>.</value><remarks>Applies to value axes.</remarks></member><member name="P:dotnetCHARTING.Axis.TimePadding"><summary>
            Gets or sets the time padding of this axis.
            </summary><value>A <see cref="T:System.TimeSpan">TimeSpan</see> object indicating the amount of time 
            shown before and after the plotted data.</value><remarks>
            (Applies to value axes using <see cref="T:dotnetCHARTING.Scale">Scale.Time</see>)</remarks></member><member name="P:dotnetCHARTING.Axis.NumberPrecision"><summary>
            Gets or sets the number of decimal digits of this axis' format.
            </summary><remarks>If not specified, this value will be determined automatically. 
            <br></br>(Applies to value axes)</remarks></member><member name="P:dotnetCHARTING.Axis.TickLabelPadding"><summary>
            Gets or sets a value in pixels indicating the padding between axis elements such
            as the axis label, tick labels, and ticks lines.
            </summary><value>An integer specifying the padding between axis elements.</value></member><member name="P:dotnetCHARTING.Axis.Label"><summary>Gets or sets the axis label.</summary><value>The main <see cref="P:dotnetCHARTING.Axis.Label"></see> of this axis.</value></member><member name="P:dotnetCHARTING.Axis.TickLabel"><summary>
            Gets or sets the <see cref="T:dotnetCHARTING.Label"></see> of all tick marks.
            </summary><value>
            A <see cref="T:dotnetCHARTING.Label">Label</see> object that specifies tick label
            properties.
            </value><remarks>
            When the axis is a label axis, the tick label's text can be populated with tokens
            which represent information about the plotted data.
            </remarks><example><code lang="CS">
            Chart.XAxis.TickLabel.Text = "%Name - %YValue";
            // When rendered, the x axis' tick labels will read something like this: "Element's Name - 159" 
            // where "Element's" Name is the name of an element and "159" is it's value.
                </code><code lang="VB">
            Chart.XAxis.TickLabel.Text = "%Name - %YValue"
            ' When rendered, the x axis' tick labels will read something like this: "Element's Name - 159" 
            ' where "Element's" Name is the name of an element and "159" is it's value.
                </code></example></member><member name="P:dotnetCHARTING.Axis.TickNumberMaximum"><summary>
            Gets or sets the maximum number of tick marks for numeric axis scales.
            </summary><value> An integer specifying the maximum number of tick marks for this axis.
            </value><remarks>. Three (3) is lowest number of tick marks possible. 
            <br></br>(Applies to value axes with numeric scales)</remarks></member><member name="P:dotnetCHARTING.Axis.TickLabelSeparatorLine"><summary>
            Gets or sets the a tick label separator. The separator is automatically used when labels are wrapped. 
            To disable or enable, set the this line's color to <c>Color.Transparent</c> or a valid color respectively.
            </summary></member><member name="P:dotnetCHARTING.Axis.TickLabelMode"><summary>
            Gets or sets the label mode that specifies how tick labels behave.
            </summary></member><member name="T:dotnetCHARTING.Axis.TimeScaleLabelInfo"><summary>
            Encapsulates time scale label behavior options in addition to axis ticks and
            format strings used instead of the main axis ticks when they represent particular
            instances in time.
            </summary></member><member name="M:dotnetCHARTING.Axis.TimeScaleLabelInfo.getFormattedLabelTick(dotnetCHARTING.TimeInterval,dotnetCHARTING.TimeInterval,dotnetCHARTING.TimeInterval,System.Int32)"><summary>
            Gets a tick with a ready made (embedded format) label given high and low time intervals.
            </summary><param name="interval"></param><param name="lowTi"></param><param name="highTi"></param><returns></returns></member><member name="P:dotnetCHARTING.Axis.TimeScaleLabelInfo.Mode"><summary>Gets or sets the time label automation mode for single value labels.</summary></member><member name="P:dotnetCHARTING.Axis.TimeScaleLabelInfo.RangeMode"><summary>Gets or sets the time label automation mode for range value labels.</summary></member><member name="P:dotnetCHARTING.Axis.TimeScaleLabelInfo.RangeIntervals"><summary>
            Gets or sets an <see cref="T:dotnetCHARTING.TimeIntervalCollection"></see>  used with modes Range and AddRange. 
            When no intervals are specified the intervals will be determined dynamically.
            </summary></member><member name="P:dotnetCHARTING.Axis.TimeScaleLabelInfo.PercentEdgeOverlapToRemoveTicks"><summary>
            Gets or sets a value that indicates whether auto-generated range ticks are trimmed if more 
            than the specified percentage of the label lingers outside of the axis bounds.
            </summary></member><member name="P:dotnetCHARTING.Axis.TimeScaleLabelInfo.WeekFormatString"><summary>
            Gets or sets the format string used with %DateTime% labels of week range
            ticks.
            </summary></member><member name="P:dotnetCHARTING.Axis.TimeScaleLabelInfo.QuarterFormatString"><summary>
            Gets or sets the format string used with DateTime labels of quarter range
            ticks.
            </summary></member><member name="P:dotnetCHARTING.Axis.TimeScaleLabelInfo.YearFormatString"><summary>
            Gets or sets the format string used with %DateTime% values that represent the
            instance in time where the year changes.
            </summary></member><member name="P:dotnetCHARTING.Axis.TimeScaleLabelInfo.MonthFormatString"><summary>
            Gets or sets the format string used with %DateTime% values that represent the
            instance in time where the Month changes.
            </summary></member><member name="P:dotnetCHARTING.Axis.TimeScaleLabelInfo.DayFormatString"><summary>
            Gets or sets the format string used with %DateTime% values that represent the
            instance in time wher%%%(Shortcut to: Element.Hotspot.URL)e the day changes.
            </summary></member><member name="P:dotnetCHARTING.Axis.TimeScaleLabelInfo.HourFormatString"><summary>
            Gets or sets the format string used with %DateTime% values that represent the
            instance in time where the hour changes.
            </summary></member><member name="P:dotnetCHARTING.Axis.TimeScaleLabelInfo.MinuteFormatString"><summary>
            Gets or sets the format string used with %DateTime%values that represent the
            instance in time where the minute changes.
            </summary></member><member name="P:dotnetCHARTING.Axis.TimeScaleLabelInfo.SecondFormatString"><summary>
            Gets or sets the format string used with %DateTime% values that represent the
            instance in time where the second changes.
            </summary></member><member name="P:dotnetCHARTING.Axis.TimeScaleLabelInfo.MillisecondFormatString"><summary>
            Gets or sets the format string used with %DateTime% values that represent the
            instance in time where the millisecond changes.
            </summary></member><member name="P:dotnetCHARTING.Axis.TimeScaleLabelInfo.YearTick"><summary>
            Gets or sets the %AxisTick% used to represent the instance in time where the Year
            changes.
            </summary></member><member name="P:dotnetCHARTING.Axis.TimeScaleLabelInfo.MonthTick"><summary>
            Gets or sets the %AxisTick% used to represent the instance in time where the
            Month changes.
            </summary></member><member name="P:dotnetCHARTING.Axis.TimeScaleLabelInfo.DayTick"><summary>
            Gets or sets the %AxisTick% used to represent the instance in time where the day
            changes.
            </summary></member><member name="P:dotnetCHARTING.Axis.TimeScaleLabelInfo.HourTick"><summary>
            Gets or sets the %AxisTick% used to represent the instance in time where the hour
            changes.
            </summary></member><member name="P:dotnetCHARTING.Axis.TimeScaleLabelInfo.MinuteTick"><summary>
            Gets or sets the %AxisTick% used to represent the instance in time where the
            minute changes.
            </summary></member><member name="P:dotnetCHARTING.Axis.TimeScaleLabelInfo.SecondTick"><summary>
            Gets or sets the %AxisTick% used to represent the instance in time where the
            second changes.
            </summary></member><member name="P:dotnetCHARTING.Axis.TimeScaleLabelInfo.MillisecondTick"><summary>
            Gets or sets the axis tick used to represent the instance in time where the millisecond changes.
            </summary></member><member name="P:dotnetCHARTING.Axis.TimeScaleLabelInfo.WeekTick"><summary>Gets or sets the %AxisTick% used to represent a week range ticks.</summary></member><member name="P:dotnetCHARTING.Axis.TimeScaleLabelInfo.QuarterTick"><summary>
            Gets or sets the %AxisTick% used to represent a year's quarter range
            ticks.
            </summary></member><member name="T:dotnetCHARTING.Axis.ScaleSync"><summary>
            An extension to the %Axis.SynchronizeScale% property. Defines the scale
            synchronization behavior of an axis.
            </summary></member><member name="T:dotnetCHARTING.AxisCollection"><summary>
            Contains a collection of <see cref="T:dotnetCHARTING.Axis">Axis</see> objects.
            </summary><moduleiscollection></moduleiscollection></member><member name="M:dotnetCHARTING.AxisCollection.#ctor(dotnetCHARTING.Axis[])"><summary>Creates a new instance of AxisCollection with the specified list of Axis objects.</summary></member><!-- Badly formed XML comment ignored for member "M:dotnetCHARTING.AxisCollection.Add(dotnetCHARTING.Axis)" --><member name="M:dotnetCHARTING.AxisCollection.Add(dotnetCHARTING.AxisCollection)"><summary> Adds a specified <see cref="T:dotnetCHARTING.AxisCollection"></see> to this collection.</summary><param name="axisCollection">The <see cref="T:dotnetCHARTING.AxisCollection"></see> to add.</param></member><member name="M:dotnetCHARTING.AxisCollection.Add(dotnetCHARTING.Axis[])"><summary> Adds the specified <see cref="T:dotnetCHARTING.AxisMarker"></see> objects to this collection.</summary><param name="axisList">A list of <see cref="T:dotnetCHARTING.AxisMarker"></see> objects to add.</param></member><member name="M:dotnetCHARTING.AxisCollection.IndexOf(dotnetCHARTING.Axis)"><summary>Determines the index of a specified <see cref="T:dotnetCHARTING.Axis"></see> in this collection.</summary><param name="axis">The <see cref="T:dotnetCHARTING.Axis"></see> to find.</param><returns>The zero-based index of the specified <see cref="T:dotnetCHARTING.Axis"></see>.</returns></member><member name="M:dotnetCHARTING.AxisCollection.Insert(System.Int32,dotnetCHARTING.Axis)"><summary>Inserts a Axis into this collection at a specified index. </summary><param name="index">The zero-based index into the collection at which to insert the Axis.</param><param name="axis">The Axis to insert into this collection.</param></member><member name="M:dotnetCHARTING.AxisCollection.Remove(dotnetCHARTING.Axis)"><summary>Removes a specified Axis from this collection.</summary><param name="axis">The Axis to remove. </param></member><member name="M:dotnetCHARTING.AxisCollection.Contains(dotnetCHARTING.Axis)"><summary>Determines whether this collection contains a specified <see cref="T:dotnetCHARTING.Axis"></see>.</summary><param name="axis">The <see cref="T:dotnetCHARTING.Axis"></see> to find.</param><returns>true if the specified <see cref="T:dotnetCHARTING.Axis"></see> belongs to this collection; otherwise, false.</returns></member><member name="P:dotnetCHARTING.AxisCollection.Item(System.Int32)"><summary> Gets or sets the object at a specified index. </summary></member><member name="P:dotnetCHARTING.Axis.ScaleSync.Mode"><summary>Gets or sets the %SynchronizeScaleMode% of this scale sync class.</summary></member><member name="P:dotnetCHARTING.Axis.ScaleSync.PreserveScale"><summary>
            Gets or sets a value that determines whether the axis scale will change when
            re-drawn on another %ChartArea%.
            </summary></member><member name="T:dotnetCHARTING.ScaleRange"><summary>
            Represents a value or range of values on an axis scale. Values can be numeric,
            DateTime, and string types.
            </summary></member><member name="M:dotnetCHARTING.ScaleRange.#ctor(System.Object,System.Object)"><summary>Instantiates a ScaleRange class with a low and high value.</summary><param name="lowValue">Low value.</param><param name="highValue">High value.</param></member><!-- Badly formed XML comment ignored for member "M:dotnetCHARTING.ScaleRange.compareLowValuesWith(dotnetCHARTING.ScaleRange)" --><member name="P:dotnetCHARTING.ScaleRange.Value"><summary>
            Gets or sets the numeric, DateTime, or text value of this
            <strong>ScaleRange</strong>.
            </summary><remarks>
            When <strong>Value</strong> is specified, ValueLow and ValueHigh are both set to
            this value. When ValueLow and ValueHigh are equivalent, this AxisMarker is represented
            by the %Line% object, otherwise, %Background% fills the range between ValueLow and
            ValueHigh.
            </remarks></member><member name="P:dotnetCHARTING.ScaleRange.ValueLow"><summary>
            Gets or sets the lower bounds of a numeric, DateTime, or text range.
            </summary><remarks> When ValueLow and ValueHigh are equivalent, this AxisMarker is represented by the <see cref="T:dotnetCHARTING.Line"></see> 
            object, otherwise, <see cref="T:dotnetCHARTING.Background"></see> fills the range between ValueLow and ValueHigh. </remarks></member><member name="P:dotnetCHARTING.ScaleRange.ValueHigh"><summary>
            Gets or sets the upper bounds of a numeric, DateTime, or text range.
            </summary><remarks> When ValueLow and ValueHigh are equivalent, this AxisMarker is represented by the <see cref="T:dotnetCHARTING.Line"></see> 
            object, otherwise, <see cref="T:dotnetCHARTING.Background"></see> fills the range between ValueLow and ValueHigh. </remarks></member><member name="P:dotnetCHARTING.ScaleRange.IncludeInAxisScale"><summary>
            Gets or sets a value indicating whether an AxisTick or AxisMarker object using
            this <strong>ScaleRange</strong> will force the axis to expand it's scale to show
            it.
            </summary></member><member name="T:dotnetCHARTING.ScaleRangeCollection"><summary> Contains a collection of <see cref="T:dotnetCHARTING.ScaleRange">ScaleRange</see> objects. </summary><moduleiscollection></moduleiscollection></member><member name="M:dotnetCHARTING.ScaleRangeCollection.#ctor(dotnetCHARTING.ScaleRange[])"><summary>Creates a new instance of ScaleRangeCollection with the specified list of ScaleRange objects.</summary></member><member name="M:dotnetCHARTING.ScaleRangeCollection.Add(dotnetCHARTING.ScaleRangeCollection)"><summary> Adds a specified <see cref="T:dotnetCHARTING.ScaleRangeCollection"></see> to this collection.</summary><param name="scaleRangeCollection">The <see cref="T:dotnetCHARTING.ScaleRangeCollection"></see> to add.</param></member><member name="M:dotnetCHARTING.ScaleRangeCollection.Add(dotnetCHARTING.ScaleRange[])"><summary> Adds the specified <see cref="T:dotnetCHARTING.ScaleRange"></see> objects to this collection.</summary><param name="scaleRangeList">A list of <see cref="T:dotnetCHARTING.ScaleRange"></see> objects to add.</param></member><member name="M:dotnetCHARTING.ScaleRangeCollection.Add(dotnetCHARTING.ScaleRange)"><summary> Adds a specified <see cref="T:dotnetCHARTING.ScaleRange">ScaleRange</see> class to this collection.</summary><param name="_ScaleRange">The <see cref="T:dotnetCHARTING.ScaleRange">ScaleRange</see> to add.</param><returns>The zero-based index of the added <see cref="T:dotnetCHARTING.ScaleRange">ScaleRange</see>.</returns></member><member name="M:dotnetCHARTING.ScaleRangeCollection.Insert(System.Int32,dotnetCHARTING.ScaleRange)"><summary>Inserts a ScaleRange into this collection at a specified index. </summary><param name="index">The zero-based index into the collection at which to insert the ScaleRange.</param><param name="_ScaleRange">The ScaleRange to insert into this collection.</param></member><member name="M:dotnetCHARTING.ScaleRangeCollection.Remove(dotnetCHARTING.ScaleRange)"><summary>Removes a specified ScaleRange from this collection.</summary><param name="_ScaleRange">The ScaleRange to remove. </param></member><member name="M:dotnetCHARTING.ScaleRangeCollection.Contains(dotnetCHARTING.ScaleRange)"><summary>Determines whether this collection contains a specified <see cref="T:dotnetCHARTING.ScaleRange">ScaleRange</see>.</summary><param name="_ScaleRange">The <see cref="T:dotnetCHARTING.ScaleRange">ScaleRange</see> to find.</param><returns>true if the specified <see cref="T:dotnetCHARTING.ScaleRange">ScaleRange</see> belongs to this collection; otherwise, false.</returns></member><member name="P:dotnetCHARTING.ScaleRangeCollection.Item(System.Int32)"><summary> Gets or sets the object at a specified index. </summary></member><member name="T:dotnetCHARTING.AxisTick"><summary>
            Encapsulates an axis tick that includes a Label or ElementMarker, TickLine, and
            GridLine.
            </summary><remarks><para><strong>Appearance</strong><br></br>
                AxisTick objects can appear in three different ways.</para><list type="bullet"><item>Normal axis tick with a label.</item><item>AxisTick where the label is replaced with the AxisTick.Marker object
                    (Icon or Image).</item><item>Range AxisTick in which case the tick has a low and high value.</item></list><para class="xmldocbulletlist"></para><para class="xmldocbulletlist"></para><para class="xmldocbulletlist"><strong>Uses</strong><br></br>
                AxisTick objects can also be used in different ways.</para><list type="bullet"><item><div class="xmldocbulletlist">
                            As an additional axis tick.
                        </div></item><item><div class="xmldocbulletlist">
                            To override a tick on an axis.
                        </div></item><item><div class="xmldocbulletlist">
                            To override multiple ticks on an axis.
                        </div></item></list></remarks></member><member name="M:dotnetCHARTING.AxisTick.#ctor"><summary>Initializes a new instance of the AxisTick class.</summary></member><member name="M:dotnetCHARTING.AxisTick.#ctor(System.String,System.String)"><summary>
            Initializes a new instance of the AxisTick class 
            with text of an original label and new text to override that label with.
            </summary><remarks>Case insensitive.</remarks><param name="originalLabelText">Label text of the axis tick to replace.</param><param name="newLabelText">New label text.</param></member><member name="M:dotnetCHARTING.AxisTick.#ctor(System.Object)"><summary>
            Initializes a new instance of the AxisTick class with an arbitrary numeric or DateTime value.
            </summary><param name="val">Axis tick value. The label will automatically represent the value given.</param></member><member name="M:dotnetCHARTING.AxisTick.#ctor(System.Object,System.String)"><summary>
            Initializes a new instance of the AxisTick class with an arbitrary numeric or 
            DateTime value and a text label..
            </summary><param name="val">Axis tick value.</param><param name="TextOverride">Label text.</param></member><member name="M:dotnetCHARTING.AxisTick.#ctor(System.Object,System.Object)"><summary>
            Initializes a new instance of the AxisTick class with an arbitrary numeric or 
            DateTime range.
            </summary><param name="lowValue">Low value.</param><param name="highValue">High value.</param></member><member name="M:dotnetCHARTING.AxisTick.#ctor(System.Object,System.Object,System.String)"><summary>
            Initializes a new instance of the AxisTick class with an arbitrary numeric or 
            DateTime range and label.
            </summary><param name="labelText">Low value.</param><param name="lowValue">High value.</param><param name="highValue">Label text.</param></member><member name="M:dotnetCHARTING.AxisTick.#ctor(System.Object,System.Object,System.Boolean)"><summary>
            Initializes a new instance of the AxisTick class with an arbitrary numeric or 
            DateTime range and an option to make this axis tick override ticks within it's range
            instead of appearing on the axis.
            </summary><param name="lowValue">Low value.</param><param name="highValue">High value.</param><param name="overrideTheTicks">
            When true, the axis tick will override ticks within it's range, otherwise, it
            will be a range tick.
            </param></member><member name="M:dotnetCHARTING.AxisTick.SetAllColors(System.Drawing.Color)"><summary>
            Sets the colors of this AxisTick's Label, Line, and GridLine.
            </summary><param name="color">Color to use.</param></member><member name="M:dotnetCHARTING.AxisTick.Dispose"><summary>Releases all resources used by this <strong>AxisTick</strong>.</summary></member><member name="P:dotnetCHARTING.AxisTick.Line"><summary>
            Gets or sets the tick line of this <strong>AxisTick</strong>. The property
            Line.Length will control the length of this tick.
            </summary></member><member name="P:dotnetCHARTING.AxisTick.Label"><summary>Gets or sets the Label of this <strong>AxisTick</strong>.</summary></member><member name="P:dotnetCHARTING.AxisTick.GridLine"><summary>
            Gets or sets the properties of the Line drawn on the %ChartArea% at this
            <strong>AxisTick</strong> object's position.
            </summary></member><member name="P:dotnetCHARTING.AxisTick.Marker"><summary>Gets or sets an %ElementMarker% object used instead of the label text.</summary></member><member name="P:dotnetCHARTING.AxisTick.OverrideTicks"><summary>
            Gets or sets a value indicating whether this range AxisTick is drawn on an axis
            or if it's properties are used to override those of other AxisTicks within it's
            range.
            </summary></member><member name="T:dotnetCHARTING.AxisMarker"><summary>
            Defines objects used to fill a specified section or point on an axis. 
            </summary><remarks>
                Each marker displayed on the chart will also have a %dotnetCHARTING.LegendEntry% in
                the %Chart.LegendBox%.<br></br><br></br>
                There are two ways to use AxisMarkers. 
                <list type="number"><item><strong>Attach to axis</strong><br></br>
                    An AxisMarker can be added to the %Axis.Markers% collection of any axis. In
                    this case, a numeric, time, or text: value or range must be specified.<br></br><br></br>
                    When %Value% is specified, ValueLow and ValueHigh are both set to this value.
                    When ValueLow and ValueHigh are equivalent, this AxisMarker is represented by
                    the %Line% object, otherwise, %Background% fills the range between ValueLow and
                    ValueHigh.</item><item><strong>Attach to element</strong><br></br>
                    An AxisMarker is instantiated and passed to the %Element.AxisMarker% property
                    of any element. In such a case, the axis marker is drawn on the %Axis% where
                    the element's name is displayed.</item></list></remarks></member><member name="M:dotnetCHARTING.AxisMarker.#ctor"><summary>
            Initialize a new instance of the AxisMarker class.
            </summary></member><member name="M:dotnetCHARTING.AxisMarker.#ctor(System.String,dotnetCHARTING.Background)"><summary>
            Initialize a new instance of the AxisMarker class with a label and <see cref="T:dotnetCHARTING.Background"></see>.
            </summary><param name="label">
            The <see cref="T:dotnetCHARTING.Label">Label</see> drawn on the marker. The label
            trickles down to this <strong>AxisMarker</strong> object's LegendEntry.Name property
            unless one explicitly specified.
            </param><param name="bg">
            %dotnetCHARTING.Background% which fills the an area of the chart within a
            specified range.
            </param></member><member name="M:dotnetCHARTING.AxisMarker.#ctor(System.String,dotnetCHARTING.Background,System.Object,System.Object)"><summary>
            Initialize a new instance of the AxisMarker class with a label, Background object, and axis range.
            </summary><param name="label">
            The <see cref="T:dotnetCHARTING.Label">Label</see> drawn on the marker. The label
            trickles down to this <strong>AxisMarker</strong> object's LegendEntry.Name property
            unless one explicitly specified.
            </param><param name="bg"><see cref="T:dotnetCHARTING.Background"></see> which fills the an area of the chart within the specified range.</param><param name="valueLow">Numeric, DateTime, or Text low axis range.</param><param name="valueHigh">Numeric, DateTime, or Text high axis range..</param></member><member name="M:dotnetCHARTING.AxisMarker.#ctor(System.String,dotnetCHARTING.Background,dotnetCHARTING.CalendarPattern)"><summary>
            Initialize a new instance of the AxisMarker class with a label, Background object, and calendar pattern.
            </summary><param name="label">The <see cref="T:dotnetCHARTING.Label">Label</see> drawn on the marker. The label
            trickles down to this <strong>AxisMarker</strong> object's LegendEntry.Name property
            unless one explicitly specified.</param><param name="bg"><see cref="T:dotnetCHARTING.Background"></see> which fills the an area of the chart within the specified range.</param><param name="calendarPattern"><see cref="T:dotnetCHARTING.CalendarPattern"></see> of this axis marker.</param></member><member name="M:dotnetCHARTING.AxisMarker.#ctor(System.String,System.Drawing.Color,System.Object,System.Object)"><summary>
            Initialize a new instance of the AxisMarker class with a label, colort, and axis range.
            </summary><param name="label">
            The <see cref="T:dotnetCHARTING.Label">Label</see> drawn on the marker. The label
            trickles down to this <strong>AxisMarker</strong> object's LegendEntry.Name property
            unless one explicitly specified.
            </param><param name="col">The color that fills the an area of the chart within the specified range.</param><param name="valueLow">Numeric, DateTime, or Text low axis range.</param><param name="valueHigh">Numeric, DateTime, or Text high axis range..</param></member><member name="M:dotnetCHARTING.AxisMarker.#ctor(System.String,System.Drawing.Color,dotnetCHARTING.CalendarPattern)"><summary>
            Initialize a new instance of the AxisMarker class with a label, colort, and axis range.
            </summary><param name="label">
            The <see cref="T:dotnetCHARTING.Label">Label</see> drawn on the marker. The label
            trickles down to this <strong>AxisMarker</strong> object's LegendEntry.Name property
            unless one explicitly specified.
            </param><param name="col">The color that fills the an area of the chart within the specified range.</param><param name="calendarPattern"><see cref="T:dotnetCHARTING.CalendarPattern"></see> of this axis marker.</param></member><member name="M:dotnetCHARTING.AxisMarker.#ctor(System.String,dotnetCHARTING.Line,System.Object)"><summary>
            Initialize a new instance of the AxisMarker class with a label, Background object, and a numeric or time value representing a point on an axis..
            </summary><param name="label">
            The <see cref="T:dotnetCHARTING.Label">Label</see> drawn on the marker. The label
            trickles down to this <strong>AxisMarker</strong> object's LegendEntry.Name property
            unless one explicitly specified.
            </param><param name="line"><see cref="T:dotnetCHARTING.Line"></see> to draw at the specified position.</param><param name="myValue">Numeric, DateTime, or Text value representing a point on an axis.</param></member><member name="M:dotnetCHARTING.AxisMarker.#ctor(System.String,System.Drawing.Color,System.Object)"><summary>
            Initialize a new instance of the AxisMarker class with a label, Background object, and a numeric or time value representing a point on an axis..
            </summary><param name="label">
            The <see cref="T:dotnetCHARTING.Label">Label</see> drawn on the marker. The label
            trickles down to this <strong>AxisMarker</strong> object's LegendEntry.Name property
            unless one explicitly specified.
            </param><param name="lineColor">The color used to draw line at the specified position.</param><param name="myValue">Numeric, DateTime, or Text value representing a point on an axis.</param></member><member name="P:dotnetCHARTING.AxisMarker.Tick"><summary>
            Gets or sets an AxisTick object that will represent this AxisMarker on the axis
            where it resides.
            </summary><remarks>
            By default this tick is null and must be instantiated. If the axis marker is a
            range, the axis tick will also be a range AxisTick. If a
            %dotnetCHARTING.CalendarPattern% is used, the tick cannot be used.
            </remarks></member><member name="P:dotnetCHARTING.AxisMarker.BringToFront"><summary>
            Gets or sets a value that indicates whether the AxisMarker is drawn 
            in front of the chart data while in 2D mode.
            </summary></member><member name="P:dotnetCHARTING.AxisMarker.CalendarPattern"><summary>
            Gets or set a CalendarPattern used by this axis marker instead of the range
            values.
            </summary></member><member name="P:dotnetCHARTING.AxisMarker.LegendEntry"><summary>
            Gets or sets a %dotnetCHARTING.LegendEntry% that represents this
            <strong>AxisMarker</strong> in a <see cref="P:dotnetCHARTING.Chart.LegendBox">LegendBox</see>.
            </summary></member><member name="P:dotnetCHARTING.AxisMarker.Value"><summary>
            Gets or sets the numeric, DateTime, or text value of this <see cref="T:dotnetCHARTING.AxisMarker"></see>.
            </summary><remarks>
            When <see cref="P:dotnetCHARTING.AxisMarker.Value"></see> is specified, ValueLow and ValueHigh are both set to this value.
            When ValueLow and ValueHigh are equivalent, this AxisMarker is represented by the <see cref="P:dotnetCHARTING.AxisMarker.Line"></see> 
            object, otherwise, <see cref="P:dotnetCHARTING.AxisMarker.Background"></see> fills the range between ValueLow and ValueHigh.
            </remarks></member><member name="P:dotnetCHARTING.AxisMarker.ValueLow"><summary>
            Gets or sets the lower bounds of a numeric, DateTime, or text range.
            </summary><remarks> When ValueLow and ValueHigh are equivalent, this AxisMarker is represented by the <see cref="P:dotnetCHARTING.AxisMarker.Line"></see> 
            object, otherwise, <see cref="P:dotnetCHARTING.AxisMarker.Background"></see> fills the range between ValueLow and ValueHigh. </remarks></member><member name="P:dotnetCHARTING.AxisMarker.ValueHigh"><summary>
            Gets or sets the upper bounds of a numeric, DateTime, or text range.
            </summary><remarks> When ValueLow and ValueHigh are equivalent, this AxisMarker is represented by the <see cref="P:dotnetCHARTING.AxisMarker.Line"></see> 
            object, otherwise, <see cref="P:dotnetCHARTING.AxisMarker.Background"></see> fills the range between ValueLow and ValueHigh. </remarks></member><member name="P:dotnetCHARTING.AxisMarker.Background"><summary>
            Gets or sets a %dotnetCHARTING.Background% object used to fill this
            <strong>AxisMarker</strong> object's range on a %ChartArea%.
            </summary></member><member name="P:dotnetCHARTING.AxisMarker.Line"><summary>Gets or sets a %dotnetCHARTING.Line% object drawn on a ChartArea.</summary><remarks>
            This line is used when %ValueHigh% and %ValueLow% are equal or if %Value% is
            set.
            </remarks></member><member name="P:dotnetCHARTING.AxisMarker.Label"><summary>
            Gets or sets a %Label% object drawn next to the <strong>AxisMarker</strong> on a
            %ChartArea%.
            </summary></member><member name="T:dotnetCHARTING.LabelOverride"><summary>
            Defines a string find and replace pair used by <see cref="T:dotnetCHARTING.Axis"></see> objects to manipulate tick labels.
            </summary><remarks>The key must match the whole label string not just a part of it.</remarks></member><member name="M:dotnetCHARTING.LabelOverride.#ctor(System.String,System.String)"><summary>
            Initialize a new <b>case insensitive</b> instance of the LabelOverride class.
            </summary><param name="key">String to override.</param><param name="val">String to override the key with.</param></member><member name="M:dotnetCHARTING.LabelOverride.#ctor(System.String,System.String,System.Boolean)"><summary>
            Initialize a new instance of the LabelOverride class.
            </summary><param name="key">String to override.</param><param name="val">String to override the key with.</param><param name="ignoreCase">Specifies whether the key is case sensitive.</param></member><member name="F:dotnetCHARTING.LabelOverride.Key"><summary>
            String to override.
            </summary></member><member name="F:dotnetCHARTING.LabelOverride.Value"><summary>
            String to override the key with.
            </summary></member><member name="F:dotnetCHARTING.LabelOverride.IgnoreCase"><summary>
            Specifies whether the key is case sensitive.
            </summary></member><!-- Badly formed XML comment ignored for member "T:dotnetCHARTING.ChangeValueDelegate" --><member name="M:dotnetCHARTING.dataPositionCollection.Add(dotnetCHARTING.dataPosition)"><summary> Adds a specified <see cref="T:dotnetCHARTING.dataPosition">dataPosition</see> class to this collection.</summary><param name="_dataPosition">The <see cref="T:dotnetCHARTING.dataPosition">dataPosition</see> to add.</param><returns>The zero-based index of the added <see cref="T:dotnetCHARTING.dataPosition">dataPosition</see>.</returns></member><member name="M:dotnetCHARTING.dataPositionCollection.Insert(System.Int32,dotnetCHARTING.dataPosition)"><summary>Inserts a dataPosition into this collection at a specified index. </summary><param name="index">The zero-based index into the collection at which to insert the dataPosition.</param><param name="_dataPosition">The dataPosition to insert into this collection.</param></member><member name="M:dotnetCHARTING.dataPositionCollection.Remove(dotnetCHARTING.dataPosition)"><summary>Removes a specified dataPosition from this collection.</summary><param name="_dataPosition">The dataPosition to remove. </param></member><member name="M:dotnetCHARTING.dataPositionCollection.Contains(dotnetCHARTING.dataPosition)"><summary>Determines whether this collection contains a specified <see cref="T:dotnetCHARTING.dataPosition">dataPosition</see>.</summary><param name="_dataPosition">The <see cref="T:dotnetCHARTING.dataPosition">dataPosition</see> to find.</param><returns>true if the specified <see cref="T:dotnetCHARTING.dataPosition">dataPosition</see> belongs to this collection; otherwise, false.</returns></member><member name="P:dotnetCHARTING.dataPositionCollection.Item(System.Int32)"><summary> Gets or sets the object at a specified index. </summary></member><member name="T:dotnetCHARTING.Annotation"><summary>
            Encapsulates a %dotnetCHARTING.Box% object with a position, data source, and hot
            spot functionality.
            </summary><remarks>
            Annotations can either be instantiated for an
            <see cref="P:dotnetCHARTING.Element.Annotation">Element</see> or added to the
            Chart.Annotation collection. When attached to an element, the annotation will follow
            the element's position (unless specified) and have a spike indicating which element
            it's referring to.<br></br><br></br>
            When an annotation does not have a size or any text specified and it's %Background% has
            an image, the size is will become that of the background's image.
            </remarks><example>
                The following code snippet demonstrates using an annotation to simulate a text
                link on the chart. 
                <code lang="VB">
            Dim a2 As Annotation  = New Annotation("Annotation text.")
             
            'set the position
            a2.Position = New Point(60,40)
             
            'We'll add a link so when this text is clicked it takes us to a web site.
            a2.URL = "http://www.dotnetcharting.com"
             
            ' Make sure the annotation doesn't create a rectangle for the text and wrap it.
            a2.DynamicSize = False
             
            'In order for the annotation not to draw the background, outline and so
            'on... We'll use a shortcut to clear the colors.
            a2.ClearColors()
             
            'Add the annotation to a chart.
            Chart.Annotations.Add(a2)
                </code><code lang="CS">
            Annotation a2 = new Annotation("Annotation text.");
             
            //set the position
            a2.Position = new Point(60,40);
             
            // We'll add a link so when this text is clicked it takes us to a web site.
            a2.URL = "http://www.dotnetcharting.com";
             
            // Make sure the annotation doesn't create a rectangle for the text and wrap it.
             a2.DynamicSize = false;
             
            // In order for the annotation not to draw the background, outline and so
            // on... We'll use a shortcut to clear the colors.
            a2.ClearColors();
             
            // Add the annotation to a chart.
            Chart.Annotations.Add(a2);
                </code></example></member><member name="M:dotnetCHARTING.Annotation.#ctor"><summary>
            Initializes a new instance of the Annotation class.
            </summary></member><member name="M:dotnetCHARTING.Annotation.#ctor(System.String)"><summary>
            Initializes a new instance of the Annotation class with text.
            </summary><param name="text">Annotation text.</param></member><member name="M:dotnetCHARTING.Annotation.#ctor(System.String,System.String)"><summary>
            Initializes a new instance of the Annotation class with text and a tool tip.
            </summary><param name="text">Annotation text.</param><param name="toolTip">Annotation tool tip.</param></member><member name="M:dotnetCHARTING.Annotation.#ctor(System.String,System.String,System.String)"><summary>
            Initializes a new instance of the Annotation class with text, tool tip, and a url.
            </summary><param name="text">Annotation text.</param><param name="toolTip">Annotation tool tip.</param><param name="url">Annotation url.</param></member><member name="M:dotnetCHARTING.Annotation.#ctor(dotnetCHARTING.Background)"><summary>
            Initializes a new instance of the Annotation class with a background. Useful when using an image as the annotation.
            </summary><param name="background">Background object for the annotation.</param></member><member name="P:dotnetCHARTING.Annotation.Hotspot"><summary>
            Gets or sets the <see cref="T:dotnetCHARTING.Hotspot"></see> of this <b>Annotation</b>.
            </summary></member><member name="P:dotnetCHARTING.Annotation.URL"><summary>
            Gets or sets this annotation's hotspot url.
            </summary><value>A string representing the url of this annotation.</value><example>
                Usage example.
                <code lang="VB" title="[New Example]">
            MyAnnotation.URL = "dotnetcharting.com"
                </code><code lang="CS" title="[New Example]">
            myAnnotation.URL = "dotnetcharting.com";
                </code></example></member><member name="P:dotnetCHARTING.Annotation.URLTarget"><summary>Gets or sets the target URL of this annotation's link.</summary><example>
                Usage example 
                <code lang="VB" title="[New Example]">
            MyAnnotation.URLTarget = "_blank"
                </code><code lang="CS" title="[New Example]">
            MyAnnotation.URLTarget = "_blank";
                </code></example></member><member name="P:dotnetCHARTING.Annotation.ToolTip"><summary>
            Gets or sets this annotation's tool tip.
            </summary></member><member name="P:dotnetCHARTING.Annotation.Position"><summary>
            Gets or sets this annotation's position.
            </summary></member><member name="P:dotnetCHARTING.Annotation.Orientation"><summary>
            Gets or sets the annotation's orientation around it's <see cref="P:dotnetCHARTING.Annotation.Position"></see> and draws a spike to it.
            </summary><remarks>If orientation is set to Bottom or Right, BottomRight will be selected. 
            If orientation is set to Top or Left, TopLeft will be selected. 
            If the annotation is added to the Chart.Annotations collection, the default is BottomRight but no spike is drawn.</remarks></member><member name="P:dotnetCHARTING.Annotation.Size"><summary>
            Gets or sets the annotation's size.
            </summary><remarks>If the size is not specified, it is determined by <see cref="P:dotnetCHARTING.Annotation.DynamicSize"></see> and
            the size of the specified text.</remarks></member><member name="P:dotnetCHARTING.Annotation.DataSource"><summary>
            Gets or sets the DataSource object used to replace tokens in this annotation's
            label, tool tip, and URL.
            </summary><remarks>Data sources include <see cref="T:dotnetCHARTING.Element"></see>,
             <see cref="T:dotnetCHARTING.Series"></see>, and <see cref="T:dotnetCHARTING.AxisMarker"></see> objects. 
            When the source is specified, any tokens associated with the source type may be used. </remarks><example>
                Instantiates a series and annotation. Sets the series as the DataSource of the
                annotation. Specifies the '%Name' series token as for the annotation's label. Adds
                the annotation to a chart.
                <code lang="CS">
            Series mySeries = new Series();
            mySeries.Name = "Test Series";
            Annotation a = new Annotation();
            a.DataSource = mySeries;
            a.Label.Text = "%Name";
            Chart.Annotations.Add(a);
             
            // When this chart renders, the annotation will read 'Test Series'.
                </code><code lang="VB">
            Dim mySeries As New Series()
            mySeries.Name = "Test Series"
            Dim a As New Annotation()
            a.DataSource = mySeries
            a.Label.Text = "%Name"
            Chart.Annotations.Add(a)
             
            ' When this chart renders, the annotation will read 'Test Series'.
                </code></example></member><member name="P:dotnetCHARTING.Annotation.DynamicSize"><summary>
            Gets or sets a value that indicates whether a golden rectangle is maintained as
            the shape of this annotation.
            </summary><remarks>If false, the shape will be determined by the text and will be drawn on 
            a single line unless <see cref="P:dotnetCHARTING.Annotation.Size"></see> is specified.</remarks></member><member name="T:dotnetCHARTING.Background"><summary>
            Defines objects used to fill the interior of chart elements such as legend boxes,
            annotations and other shapes.
            </summary></member><member name="M:dotnetCHARTING.Background.#ctor"><summary>
            Initializes a new instance of the Background class.
            </summary></member><member name="M:dotnetCHARTING.Background.#ctor(System.Drawing.Color)"><summary>Initializes a new instance of the Background object with a color.</summary><param name="myColor">Color to fill with.</param></member><member name="M:dotnetCHARTING.Background.#ctor(System.Drawing.Brush)"><summary>
            Initializes a new instance of the Background object with a
            <strong>Brush</strong>.
            </summary><isnew>6/24/2005</isnew><param name="brush">Brush object used to to fill the background.</param></member><member name="M:dotnetCHARTING.Background.#ctor(System.Drawing.Color,System.Drawing.Color)"><summary>Initializes a new instance of the Background object with gradient colors drawn left to right.</summary><param name="myColor">First color.</param><param name="secondColor">Second color</param></member><member name="M:dotnetCHARTING.Background.#ctor(System.Drawing.Color,System.Drawing.Color,System.Single)"><summary>Initializes a new instance of the Background object with gradient colors drawn at a specified angle.</summary><param name="myColor">First color.</param><param name="secondColor">Second color</param><param name="angle">Specifies an angle ( left to right = 0, right to left = 180 )</param></member><member name="M:dotnetCHARTING.Background.#ctor(System.String)"><summary>Initializes a new instance of the Background object with a tiled image.</summary><param name="imagePath">Path of an image.</param></member><member name="M:dotnetCHARTING.Background.#ctor(System.String,dotnetCHARTING.BackgroundMode)"><summary>
            Initializes a new instance of the Background object with an image and a background mode.
            </summary><param name="imagePath">Path of a background image.</param><param name="backgroundMode">Specifies a <see cref="T:dotnetCHARTING.BackgroundMode"></see> to use with the image.</param><remarks>The </remarks></member><member name="P:dotnetCHARTING.Background.Brush"><summary>Gets or sets a brush object that is used to fill objects.</summary><isnew>6/24/2005</isnew></member><member name="P:dotnetCHARTING.Background.Color"><summary>Gets or sets the primary Color.</summary></member><member name="P:dotnetCHARTING.Background.SecondaryColor"><summary>Gets or sets the secondary color.</summary><remarks>The secondary color is used with the primary color to create 
            a gradient fill when using <see cref="T:dotnetCHARTING.BackgroundMode">BackgroundMode.Gradient</see>.</remarks></member><member name="P:dotnetCHARTING.Background.ImagePath"><summary>Gets or sets the path of a fill image.</summary><remarks>An image fill is used when <see cref="T:dotnetCHARTING.BackgroundMode">BackgroundMode.ImageTile</see>, 
            <see cref="T:dotnetCHARTING.BackgroundMode">BackgroundMode.ImageStretch</see> or 
            <see cref="T:dotnetCHARTING.BackgroundMode">BackgroundMode.Image</see> is used.</remarks></member><member name="P:dotnetCHARTING.Background.GradientAngle"><summary>Gets or sets an angle at which gradients are drawn.( left to right = 0, right to left = 180 )</summary></member><member name="P:dotnetCHARTING.Background.Mode"><summary>Gets or sets the fill mode.</summary><value>A <see cref="T:dotnetCHARTING.BackgroundMode"></see> enumeration that indicates how the background is filled.</value></member><member name="P:dotnetCHARTING.Background.HatchStyle"><summary>
            Gets or sets a hatch pattern. 
            </summary><remarks>If not specified, no hatch will is drawn.</remarks></member><member name="P:dotnetCHARTING.Background.HatchColor"><summary>
            Gets or sets a color hatch patterns are drawn with.
            </summary></member><member name="P:dotnetCHARTING.Background.Bevel"><summary>
            Gets or sets a value that indicates wherer this background will use a bevel shading effect.
            </summary></member><member name="P:dotnetCHARTING.Background.GlassEffect"><summary>
            Gets or sets a value that indicates whether a glass effect is used to fill an
            object.
            </summary></member><member name="T:dotnetCHARTING.ElementMarker"><summary>
            Defines a graphical object with a specified shape, size, and color or an image used to 
            mark and identify <see cref="T:dotnetCHARTING.Element"></see> objects. 
            </summary></member><member name="M:dotnetCHARTING.ElementMarker.#ctor(System.String,System.Int32,System.Boolean)"><summary>
            Initializes an instance of ElementMarker with an image and size. This image may scale if so specified.
            </summary><param name="imagePath">Absolute path of an image.</param><param name="size">Maximum size of the image.</param><param name="scale">Specifies whether the image will scale or tile.</param></member><member name="M:dotnetCHARTING.ElementMarker.#ctor(System.String,System.Int32)"><summary>
            Initializes an instance of ElementMarker with an image and size.
            </summary><param name="imagePath">Absolute path of an image.</param><param name="maxSize">Maximum width or height of the image.</param></member><member name="M:dotnetCHARTING.ElementMarker.#ctor(System.String)"><summary>
            Initializes an instance of ElementMarker with an image.
            </summary><param name="imagePath">Absolute path of an image.</param></member><member name="M:dotnetCHARTING.ElementMarker.#ctor(dotnetCHARTING.ElementMarkerType,System.Int32,System.Drawing.Color)"><summary>
            Initializes an instance of ElementMarker with a built in icon (<see cref="T:dotnetCHARTING.ElementMarkerType"></see>), size, and color.
            </summary><param name="dType">Element marker type of this marker.</param><param name="size">The size of this marker.</param><param name="color">The color of this marker.</param></member><member name="M:dotnetCHARTING.ElementMarker.#ctor(dotnetCHARTING.ElementMarkerType,System.Int32)"><summary>
            Initializes an instance of ElementMarker with a built in icon (<see cref="T:dotnetCHARTING.ElementMarkerType"></see>), and size.
            </summary><param name="dType">Element marker type of this marker.</param><param name="size">The size of this marker.</param></member><member name="M:dotnetCHARTING.ElementMarker.#ctor(dotnetCHARTING.ElementMarkerType)"><summary>
            Initializes an instance of ElementMarker with a built in icon (<see cref="T:dotnetCHARTING.ElementMarkerType"></see>).
            </summary><param name="dType">Element marker type of this marker.</param></member><member name="M:dotnetCHARTING.ElementMarker.#ctor"><summary>
            Initializes an instance of ElementMarker.
            </summary><remarks>This element marker will be empty.</remarks></member><member name="P:dotnetCHARTING.ElementMarker.Color"><summary>
            Gets or sets the color of this element marker.
            </summary></member><member name="P:dotnetCHARTING.ElementMarker.Size"><summary>
            Gets or sets the size of this element marker.
            </summary><value>Maximum width or height of this marker.</value></member><member name="P:dotnetCHARTING.ElementMarker.ImagePath"><summary>
            Gets or sets the image path of this marker.
            </summary></member><member name="P:dotnetCHARTING.ElementMarker.Type"><summary>
            Gets or sets a <see cref="T:dotnetCHARTING.ElementMarkerType">predefined shape</see> for this marker.
            </summary></member><member name="P:dotnetCHARTING.ElementMarker.Visible"><summary>
            Gets or sets a value indicating whether the marker is visible.
            </summary></member><member name="T:dotnetCHARTING.Shadow"><summary>
            Represents a shadow cast by chart objects such as a <see cref="T:dotnetCHARTING.Box"></see> or <see cref="T:dotnetCHARTING.Annotation"></see>.
            </summary></member><member name="P:dotnetCHARTING.Shadow.Color"><summary>
            Gets or sets the color of this shadow.
            </summary><remarks>Making this color partially transparent will give the shadow a more realistic look.</remarks></member><member name="P:dotnetCHARTING.Shadow.Depth"><summary>
            Gets or sets the shadow's depth.
            </summary></member><member name="P:dotnetCHARTING.Shadow.Soft"><summary>
            Gets or sets a value which indicates whether this shadow is soft or solid.
            </summary></member><member name="T:dotnetCHARTING.Line"><summary>
            Defines objects used to draw a line or curve.
            </summary></member><member name="M:dotnetCHARTING.Line.#ctor"><summary>
            Initialize a new instance of the Line.
            </summary></member><member name="M:dotnetCHARTING.Line.#ctor(System.Drawing.Color)"><summary>
            Initialize a new instance of the Line class with a color.
            </summary><param name="c">Color of the line.</param></member><member name="M:dotnetCHARTING.Line.#ctor(System.Drawing.Color,System.Int32)"><summary>
            Initialize a new instance of the Line class with a color and line width.
            </summary><param name="c">Color of the line.</param><param name="width">Width of the line.</param></member><member name="M:dotnetCHARTING.Line.#ctor(System.Drawing.Color,System.Int32,System.Drawing.Drawing2D.DashStyle)"><summary>
            Initialize a new instance of the Line class with a color, line width, and <seealso cref="T:System.Drawing.Drawing2D.DashStyle"></seealso>.
            </summary><param name="c">Color of the line.</param><param name="width">Width of the line.</param><param name="ds"><see cref="T:System.Drawing.Drawing2D.DashStyle">DashStyle</see> of this line.</param></member><member name="M:dotnetCHARTING.Line.#ctor(System.Drawing.Color,System.Drawing.Drawing2D.DashStyle)"><summary>
            Initialize a new instance of the Line class with a color and <see cref="T:System.Drawing.Drawing2D.DashStyle"></see>.
            </summary><param name="c">Color of the line.</param><param name="ds"><see cref="T:System.Drawing.Drawing2D.DashStyle"></see> of this line.</param></member><member name="P:dotnetCHARTING.Line.AnchorCapScale"><summary>
            Gets or sets the amount by which to scale the line caps with respect to the width
            of the line. This feature only works with anchor %LineCap% members.
            </summary></member><member name="P:dotnetCHARTING.Line.Color"><summary>
            Gets or sets the color of this line.
            </summary></member><member name="P:dotnetCHARTING.Line.Width"><summary>
            Gets or sets the width of this line.
            </summary></member><member name="P:dotnetCHARTING.Line.DashStyle"><summary>
            Gets or sets the <see cref="T:System.Drawing.Drawing2D.DashStyle"></see> of this line.
            </summary></member><member name="P:dotnetCHARTING.Line.Length"><summary>
            Gets or sets the length of this line.
            </summary><remarks>Only used with the <see cref="P:dotnetCHARTING.Axis.TickLine"></see> property and represents the tick line length.</remarks></member><member name="P:dotnetCHARTING.Line.StartCap"><summary>
            Gets or sets the <see cref="T:System.Drawing.Drawing2D.LineCap"></see> that starts this line.
            </summary></member><member name="P:dotnetCHARTING.Line.EndCap"><summary>
            Gets or sets the <see cref="T:System.Drawing.Drawing2D.LineCap"></see> that ends this line.
            </summary></member><member name="T:dotnetCHARTING.Label"><summary>
            Represents a label consisting of text, a font, and a color.
            </summary></member><member name="M:dotnetCHARTING.Label.#ctor"><summary>
            Initializes a new instance of the Label class.
            </summary></member><member name="M:dotnetCHARTING.Label.#ctor(System.String)"><summary>
            Initializes a new instance of the Label class with text.
            </summary><param name="text">Text of this label.</param></member><member name="M:dotnetCHARTING.Label.#ctor(System.String,System.Drawing.Font)"><summary>
            Initializes a new instance of the Label class with text, and a font.
            </summary><param name="text">Text of this label.</param><param name="font">Font of this label.</param></member><member name="M:dotnetCHARTING.Label.#ctor(System.String,System.Drawing.Font,System.Drawing.Color)"><summary>
            Initializes a new instance of the Label class with text, font, and a color.
            </summary><param name="text">Text of this label.</param><param name="font">Font of this label.</param><param name="color">Color of this label.</param></member><member name="M:dotnetCHARTING.Label.#ctor(System.Drawing.Font)"><summary>
            Initializes a new instance of the Label class with a font.
            </summary><param name="font">Font of this label.</param></member><member name="P:dotnetCHARTING.Label.Alignment"><summary>Gets or sets the alignment of this label.</summary></member><member name="P:dotnetCHARTING.Label.LineAlignment"><summary>Gets or sets the line alignment of this label.</summary></member><member name="P:dotnetCHARTING.Label.Text"><summary>
            Gets or sets the text for this label.
            </summary></member><member name="P:dotnetCHARTING.Label.Font"><summary>
            Gets or sets the font for this label.
            </summary></member><member name="P:dotnetCHARTING.Label.Color"><summary>
            Gets or sets the color of this label.
            </summary></member><member name="P:dotnetCHARTING.Label.Truncation"><summary>
            Gets or sets properties used to dynamically shorten this label when it reaches a maximum length.
            </summary></member><member name="T:dotnetCHARTING.Truncation"><summary>
            Defines properties used to shorten long labels.
            </summary></member><member name="M:dotnetCHARTING.Truncation.#ctor"><summary>
            Initializes a new instance of the Truncation class.
            </summary></member><member name="P:dotnetCHARTING.Truncation.Length"><summary>
            Gets or sets the maximum number of characters a label is shortened to.
            </summary></member><member name="P:dotnetCHARTING.Truncation.Text"><summary>
            Gets or sets a string that defines text inserted into a string at the position
            it was trimmed. <br></br><br></br>
            Default is '...'
            </summary></member><member name="P:dotnetCHARTING.Truncation.Mode"><summary>
            Gets or sets the <see cref="T:dotnetCHARTING.TruncationMode"></see> used to shorten this label.
            </summary></member><member name="T:dotnetCHARTING.SmartLabel"><summary>
            Encapsulates a <see cref="T:dotnetCHARTING.Label"></see> object with advanced alignment and collision detection options.
            </summary><remarks></remarks></member><member name="M:dotnetCHARTING.SmartLabel.#ctor"><summary>
            Initializes a new instance of the SmartLabel class.
            </summary></member><member name="P:dotnetCHARTING.SmartLabel.DynamicDisplay"><summary>
            Gets or sets a value that indicates whether the label is forced to be drawn even when 
            there is no room. False means labels are always drawn.
            </summary></member><member name="P:dotnetCHARTING.SmartLabel.ForceVertical"><summary>
            Gets or sets a value that indicates whether the label is forced to be drawn vertically.
            </summary><remarks>
            When false, labels will be drawn vertically only on columns and cylinders that
            are not wide enough to fit the label horizontally. Otherwise, all labels will be
            vertical.
            </remarks></member><member name="P:dotnetCHARTING.SmartLabel.Alignment"><summary>Gets or sets the primary label alignment.</summary><remarks>If the labels doesn't fit well given this alignment, alignments in
            the AlighmentSecondary collection are iterated (when <see cref="P:dotnetCHARTING.SmartLabel.DynamicDisplay"></see> is true) 
            to find the first position that fits correctly. </remarks></member><member name="P:dotnetCHARTING.SmartLabel.AlignmentSecondary"><summary>
            Gets or sets a collection of secondary label alignment options. 
            </summary><remarks>When the primary <see cref="P:dotnetCHARTING.SmartLabel.Alignment"></see> option does not permit the room
            necessary to draw this label, the alignment options in this collection are iterated to
            find one that fits. </remarks></member><member name="P:dotnetCHARTING.SmartLabel.DynamicPosition"><summary>
            Gets or sets a value that indicates whether the label will be positioned using collision detection.
            </summary><remarks>
            This causes the labels to be conscious of each other and does not permit them to
            overlap. When a label is positioned away from the data point it represents, the
            %SmartLabel.Line% is drawn from the label's new position to the data point.
            </remarks></member><member name="P:dotnetCHARTING.SmartLabel.Line"><summary>
            Gets or sets a <see cref="T:dotnetCHARTING.Line"></see> object that facilitates the <see cref="P:dotnetCHARTING.SmartLabel.DynamicPosition"></see> 
            functionality.
            </summary><remarks>
            Lines are used to point to an element when a label can not be placed directly
            beside it.
            </remarks></member><member name="P:dotnetCHARTING.SmartLabel.PieLabelMode"><summary>
            Gets or sets a <see cref="P:dotnetCHARTING.SmartLabel.PieLabelMode"></see> enumeration for pie and donut charts. </summary><remarks> This setting will only apply when set through the
             Chart.DefaultSeries.DefaultElement.SmartLabel instance. 
            </remarks></member><member name="P:dotnetCHARTING.SmartLabel.RadarLabelMode"><summary>
            Gets or sets a <see cref="P:dotnetCHARTING.SmartLabel.RadarLabelMode"></see> enumeration for radar charts. </summary><remarks> This setting will only apply when set through the
             Chart.DefaultSeries.DefaultElement.SmartLabel instance.  </remarks></member><member name="T:dotnetCHARTING.TimeIntervalAdvanced"><summary>
            Represents a time interval and instant at which it occurs.
            </summary><remarks>This time is specific down to the millisecond.</remarks></member><member name="M:dotnetCHARTING.TimeIntervalAdvanced.#ctor(System.TimeSpan)"><summary>
            Creates a new instance of TimeIntervalAdvanced with a custom time span.
            </summary><param name="span"></param></member><member name="M:dotnetCHARTING.TimeIntervalAdvanced.#ctor(dotnetCHARTING.TimeInterval,System.Int32)"><summary>
            Creates a new instance of TimeIntervalAdvanced with a TimeInterval and a factor by which the interval is multiplied.
            </summary><isnew>6/24/2005</isnew><param name="interval">A base TimeInterval enumeration.</param><param name="factor">Factor by which the to multiple the TimeInterval.</param></member><member name="M:dotnetCHARTING.TimeIntervalAdvanced.op_Equality(dotnetCHARTING.TimeIntervalAdvanced,dotnetCHARTING.TimeIntervalAdvanced)"><summary>
            Indicates whether a specified TimeIntervalAdvanced is equal to another TimeIntervalAdvanced.
            </summary><param name="lhs">left TimeIntervalAdvanced</param><param name="rhs">right TimeIntervalAdvanced</param><returns></returns></member><member name="M:dotnetCHARTING.TimeIntervalAdvanced.op_Equality(dotnetCHARTING.TimeIntervalAdvanced,dotnetCHARTING.TimeInterval)"><summary>
            Indicates whether a specified TimeIntervalAdvanced is equal to a specified TimeInterval enumeration.
            </summary><param name="lhs">TimeIntervalAdvanced to compare.</param><param name="rhs">TimeInterval to compare.</param><returns></returns></member><member name="M:dotnetCHARTING.TimeIntervalAdvanced.op_Inequality(dotnetCHARTING.TimeIntervalAdvanced,dotnetCHARTING.TimeInterval)"><summary>
            Indicates whether a TimeInterval and TimeIntervalAdvanced are not equal.
            </summary><param name="lhs"></param><param name="rhs"></param><returns></returns></member><member name="M:dotnetCHARTING.TimeIntervalAdvanced.op_Inequality(dotnetCHARTING.TimeIntervalAdvanced,dotnetCHARTING.TimeIntervalAdvanced)"><summary>
            Indicates whether two TimeIntervalAdvanced instances are not equal.
            </summary><param name="lhs"></param><param name="rhs"></param><returns></returns></member><member name="M:dotnetCHARTING.TimeIntervalAdvanced.op_Addition(dotnetCHARTING.TimeIntervalAdvanced,System.DateTime)"><summary>
            Adds a TimeIntervalAdvanced to a DateTime object.
            </summary><param name="lhs">TimeIntervalAdvanced to add.</param><param name="rhs">Added to DateTime.</param><returns></returns></member><member name="M:dotnetCHARTING.TimeIntervalAdvanced.op_Subtraction(System.DateTime,dotnetCHARTING.TimeIntervalAdvanced)"><summary>
            Subtracts a TimeIntervalAdvanced from a DateTime object.
            </summary><param name="lhs">DateTime to subtract from.</param><param name="rhs">TimeIntervalAdvanced to subtract.</param><returns></returns></member><member name="M:dotnetCHARTING.TimeIntervalAdvanced.op_Addition(System.DateTime,dotnetCHARTING.TimeIntervalAdvanced)"><summary>
            Adds a TimeIntervalAdvanced to a DateTime object.
            </summary><param name="lhs">Added to DateTime.</param><param name="rhs">TimeIntervalAdvanced to add.</param><returns></returns></member><member name="M:dotnetCHARTING.TimeIntervalAdvanced.SubtractTimeInterval(System.DateTime,dotnetCHARTING.TimeInterval)"><summary>Subtracts a TimeInterval from the specified DateTime.</summary><param name="lhs">The date to subtract from.</param><param name="rhs">The TimeInterval to add.</param></member><member name="M:dotnetCHARTING.TimeIntervalAdvanced.AddTimeInterval(System.DateTime,dotnetCHARTING.TimeInterval)"><summary>Adds a TimeInterval to the specified DateTime.</summary><param name="lhs">The date to add to.</param><param name="rhs">The TimeInterval to add.</param></member><!-- Badly formed XML comment ignored for member "M:dotnetCHARTING.TimeIntervalAdvanced.compareTimeIntervals(dotnetCHARTING.TimeInterval,dotnetCHARTING.TimeInterval)" --><member name="P:dotnetCHARTING.TimeIntervalAdvanced.Minutes"><summary>Gets a system-defined TimeIntervalAdvanced object.</summary></member><member name="P:dotnetCHARTING.TimeIntervalAdvanced.Hours"><summary>Gets a system-defined TimeIntervalAdvanced object.</summary></member><member name="P:dotnetCHARTING.TimeIntervalAdvanced.Days"><summary>Gets a system-defined TimeIntervalAdvanced object.</summary></member><member name="P:dotnetCHARTING.TimeIntervalAdvanced.Weeks"><summary>Gets a system-defined TimeIntervalAdvanced object.</summary></member><member name="P:dotnetCHARTING.TimeIntervalAdvanced.Months"><summary>Gets a system-defined TimeIntervalAdvanced object.</summary></member><member name="P:dotnetCHARTING.TimeIntervalAdvanced.Quarters"><summary>Gets a system-defined TimeIntervalAdvanced object.</summary></member><member name="P:dotnetCHARTING.TimeIntervalAdvanced.Years"><summary>Gets a system-defined TimeIntervalAdvanced object.</summary></member><member name="P:dotnetCHARTING.TimeIntervalAdvanced.Hour"><summary>Gets a system-defined TimeIntervalAdvanced object.</summary></member><member name="P:dotnetCHARTING.TimeIntervalAdvanced.Day"><summary>Gets a system-defined TimeIntervalAdvanced object.</summary></member><member name="P:dotnetCHARTING.TimeIntervalAdvanced.Week"><summary>Gets a system-defined TimeIntervalAdvanced object.</summary></member><member name="P:dotnetCHARTING.TimeIntervalAdvanced.Month"><summary>Gets a system-defined TimeIntervalAdvanced object.</summary></member><member name="P:dotnetCHARTING.TimeIntervalAdvanced.Quarter"><summary>Gets a system-defined TimeIntervalAdvanced object.</summary></member><member name="P:dotnetCHARTING.TimeIntervalAdvanced.Year"><summary>Gets a system-defined TimeIntervalAdvanced object.</summary></member><member name="P:dotnetCHARTING.TimeIntervalAdvanced.None"><summary>Gets a system-defined TimeIntervalAdvanced object.</summary></member><member name="P:dotnetCHARTING.TimeIntervalAdvanced.Seconds"><summary>Gets a system-defined TimeIntervalAdvanced object.</summary></member><member name="P:dotnetCHARTING.TimeIntervalAdvanced.Milliseconds"><summary>Gets a system-defined TimeIntervalAdvanced object.</summary></member><member name="P:dotnetCHARTING.TimeIntervalAdvanced.Start"><summary>
            Gets or sets a DateTime object representing the time instant at which this
            interval initially occurs.
            </summary></member><member name="P:dotnetCHARTING.TimeIntervalAdvanced.StartDayOfWeek"><summary>
            Gets or sets the day of the week at which this interval initially occurs. Value
            ranges from zero indicating Sunday, to six, indicating Saturday.
            </summary></member><member name="P:dotnetCHARTING.TimeIntervalAdvanced.StartMonth"><summary>
            Gets or sets the month of year at which this interval initially occurs. Value
            ranges from zero indicating January, to eleven, indicating December.
            </summary></member><member name="P:dotnetCHARTING.TimeIntervalAdvanced.TimeSpan"><summary>Gets or sets a custom time span between each time instant occurrence.</summary></member><member name="P:dotnetCHARTING.TimeIntervalAdvanced.Multiplier"><summary>Gets or sets the factor by which this time interval is multiplied.</summary><remarks>If <see cref="P:dotnetCHARTING.TimeIntervalAdvanced.TimeSpan"></see> is specified, this property will not have any effect.
            </remarks></member><member name="T:dotnetCHARTING.CalendarPattern"><summary>Specifies a calendar pattern such as weekends in a week.</summary><remarks><para>The pattern is represented by an array of boolean values.
                CalendarPattern.PatternFromString can be used to quickly create patterns using
                simple strings. A week pattern would look like this: <b>"0000000"</b>. A zero for
                each day of the week. To indicate weekends the pattern will be <b>"1000001"</b>.
                The time units must also be specified.</para><para>Each one or zero represents a day:<br></br><c>myCalendarPattern.PatternUnit = TimeInterval.Day</c></para><para><br></br>
                The entire pattern represents a week:<br></br><c>myCalendarPattern.CalendarUnit = TimeInterval.Week</c></para><para><br></br>
                The above calendar pattern will flag each saturday and sunday in a given, time
                span.</para></remarks><seealso cref="T:dotnetCHARTING.AxisMarker">AxisMarker Class</seealso><seealso cref="M:dotnetCHARTING.Series.Trim(dotnetCHARTING.CalendarPattern,dotnetCHARTING.ElementValue)">Trim(dotnetCHARTING.CalendarPattern, dotnetCHARTING.ElementValue) Method
            (dotnetCHARTING.Series)</seealso></member><member name="M:dotnetCHARTING.CalendarPattern.#ctor"><summary>Initializes a new instance of the CalendarPattern class.</summary></member><member name="M:dotnetCHARTING.CalendarPattern.#ctor(dotnetCHARTING.TimeInterval,dotnetCHARTING.TimeInterval,System.Boolean[])"><summary>
            Initializes a new instance of the CalendarPattern class with time units and a
            pattern.
            </summary><example>
                This instantiates a new CallendarPattern of a week marking the saturday and sunday.
                It uses the PatternFromString method to simplify adding a pattern by using a
                string. 
                <code lang="CS">
            CalendarPattern newPattern = new CalendarPattern(TimeInterval.Day,TimeInterval.Week,CalendarPattern.PatternFromString("1000001"));
                </code></example></member><member name="M:dotnetCHARTING.CalendarPattern.#ctor(dotnetCHARTING.TimeInterval,dotnetCHARTING.TimeInterval,System.String)"><summary>
            Initializes a new instance of the CalendarPattern class with time units and a
            string pattern.
            </summary><example>
                This instantiates a new CallendarPattern of a week marking the saturday and sunday.
                
                <code lang="CS">
            CalendarPattern newPattern = new CalendarPattern(TimeInterval.Day,TimeInterval.Week,"1000001");
                </code></example></member><member name="M:dotnetCHARTING.CalendarPattern.PatternFromString(System.String)"><summary>Gets a boolean array from a string of ones (1) and zeros (0).</summary><returns>bool[]</returns><param name="str">
            A pattern in a string form. A string of "1100" will return [ true, true, false,
            false ]. The boolean array can be used to set the Pattern property of this
            <strong>CalendPattern</strong>.
            </param></member><member name="M:dotnetCHARTING.CalendarPattern.Invert"><summary>Inverts this CalendarPattern.</summary><remarks>If the pattern is "0011", after this operation it will become "1100".</remarks></member><member name="P:dotnetCHARTING.CalendarPattern.Weekends"><summary>Gets a calendar pattern instance representing weekends.</summary><isnew>6/24/2005</isnew></member><member name="P:dotnetCHARTING.CalendarPattern.Weekdays"><summary>Gets a calendar pattern instance representing weekdays.</summary><isnew>6/24/2005</isnew></member><member name="P:dotnetCHARTING.CalendarPattern.Pattern"><summary>
            Gets or sets the calendar pattern.
            </summary></member><member name="P:dotnetCHARTING.CalendarPattern.PatternUnit"><summary>
            Gets or sets a <see cref="T:dotnetCHARTING.TimeInterval"></see> that represents the time unit of each Boolean value in the <see cref="P:dotnetCHARTING.CalendarPattern.Pattern"></see>.
            </summary></member><member name="P:dotnetCHARTING.CalendarPattern.CalendarUnit"><summary>
            Gets or sets a <see cref="T:dotnetCHARTING.TimeInterval"></see> that represents the time unit of the entire <see cref="P:dotnetCHARTING.CalendarPattern.Pattern"></see>.
            </summary></member><member name="P:dotnetCHARTING.CalendarPattern.AdjustmentUnit"><summary>Gets or sets a values by which the time interval is offset on the axis.</summary><remarks>
            This property can be useful with axis markers because tick marks may appear at
            the beginning of a time unit like month. The calendar pattern may need to be adjusted
            to properly correspond to axis ticks.
            </remarks></member><member name="T:dotnetCHARTING.DataSource"><summary>
            Represents a single or related set of .netCHARTING data-based objects that
            specify a data source used to parse tokens and populate custom legend boxes with
            LegendEntry objects.
            </summary></member><member name="M:dotnetCHARTING.DataSource.FromElement(dotnetCHARTING.SeriesCollection,System.Int32,System.Int32,dotnetCHARTING.DataSourceType)"><summary>Creates a DataSource object from a SeriesColleciton, Series, and Element.</summary><param name="sourceSeriesCollection">SeriesCollection containing the series of the given element.</param><param name="sourceSeriesIndex">Index of the series that contains the given element.</param><param name="sourceElementIndex">Index of the element in the specified series.</param><param name="splitIntoType">Split into type when this DataSource is used to populate a legend box.</param></member><member name="M:dotnetCHARTING.DataSource.FromElement(dotnetCHARTING.SeriesCollection,System.String,System.String,dotnetCHARTING.DataSourceType)"><summary>Creates a DataSource object from a SeriesColleciton, Series, and Element.</summary><param name="sourceSeriesCollection">SeriesCollection containing the series of the given element.</param><param name="sourceSeriesName">Name of the series that contains the given element.</param><param name="sourceElementName">Name of the given element.</param><param name="splitIntoType">Split into type when this DataSource is used to populate a legend box.</param></member><member name="M:dotnetCHARTING.DataSource.FromElement(dotnetCHARTING.SeriesCollection,System.Int32,System.String,dotnetCHARTING.DataSourceType)"><summary>Creates a DataSource object from a SeriesColleciton, Series, and Element.</summary><param name="sourceSeriesCollection">SeriesCollection containing the series of the given element.</param><param name="sourceSeriesIndex">Index of the series that contains the given element.</param><param name="sourceElementName">Name of the given element.</param><param name="splitIntoType">Split into type when this DataSource is used to populate a legend box.</param></member><member name="M:dotnetCHARTING.DataSource.FromElement(dotnetCHARTING.SeriesCollection,System.Int32,System.Int32)"><summary>
            Creates a DataSource object class from a SeriesColleciton, Series, and
            Element.
            </summary><param name="sourceSeriesCollection">SeriesCollection containing the series of the given element.</param><param name="sourceSeriesIndex">Index of the series that contains the given element.</param><param name="sourceElementIndex">Index of the element in the specified series.</param></member><member name="M:dotnetCHARTING.DataSource.FromElement(dotnetCHARTING.SeriesCollection,System.String,System.String)"><summary>Creates a DataSource object from a SeriesColleciton, Series, and Element.</summary><param name="sourceSeriesCollection">SeriesCollection containing the series of the given element.</param><param name="sourceSeriesName">Name of the series that contains the given element.</param><param name="sourceElementName">Name of the given element.</param></member><member name="M:dotnetCHARTING.DataSource.FromElement(dotnetCHARTING.SeriesCollection,System.Int32,System.String)"><summary>Creates a DataSource object from a SeriesColleciton, Series, and Element.</summary><param name="sourceSeriesCollection">SeriesCollection containing the series of the given element.</param><param name="sourceSeriesIndex">Index of the series that contains the given element.</param><param name="sourceElementName">Name of the given element.</param></member><member name="M:dotnetCHARTING.DataSource.FromElement(dotnetCHARTING.Element)"><summary>Creates a DataSource object from an element Element.</summary><param name="e">The element.</param></member><member name="M:dotnetCHARTING.DataSource.FromSeries(dotnetCHARTING.SeriesCollection,System.Int32,dotnetCHARTING.DataSourceType)"><summary>Creates a DataSource object from a SeriesColleciton, and Series.</summary><param name="sourceSeriesCollection">SeriesCollection containing the given series.</param><param name="sourceSeriesIndex">Index of the given series.</param><param name="splitIntoType">Split into type when this DataSource is used to populate a legend box.</param></member><member name="M:dotnetCHARTING.DataSource.FromSeries(dotnetCHARTING.SeriesCollection,System.String,dotnetCHARTING.DataSourceType)"><summary>Creates a DataSource object from a SeriesColleciton, and Series.</summary><param name="sourceSeriesCollection">SeriesCollection containing the given series.</param><param name="sourceSeriesName">Name of the given series.</param><param name="splitIntoType">Split into type when this DataSource is used to populate a legend box.</param></member><member name="M:dotnetCHARTING.DataSource.FromSeries(dotnetCHARTING.SeriesCollection,System.Int32)"><summary>Creates a DataSource object from a SeriesColleciton, and Series.</summary><param name="sourceSeriesCollection">SeriesCollection containing the given series.</param><param name="sourceSeriesIndex">Index of the given series.</param></member><member name="M:dotnetCHARTING.DataSource.FromSeries(dotnetCHARTING.SeriesCollection,System.String)"><summary>Creates a DataSource object from a SeriesColleciton, and Series.</summary><param name="sourceSeriesCollection">SeriesCollection containing the given series.</param><param name="sourceSeriesName">Name of the given series.</param></member><member name="M:dotnetCHARTING.DataSource.FromSeries(dotnetCHARTING.Series)"><summary>Creates a DataSource object from a Series.</summary><param name="series">The series.</param></member><member name="M:dotnetCHARTING.DataSource.FromSeriesCollection(dotnetCHARTING.SeriesCollection,dotnetCHARTING.DataSourceType)"><summary>Creates a DataSource object from a SeriesColleciton.</summary><param name="sourceSeriesCollection">Given SeriesCollection.</param><param name="splitIntoType">Split into type when this DataSource is used to populate a legend box.</param></member><member name="M:dotnetCHARTING.DataSource.FromSeriesCollection(dotnetCHARTING.SeriesCollection)"><summary>Creates a DataSource object from a SeriesColleciton.</summary><param name="sourceSeriesCollection">Given SeriesCollection.</param></member><member name="M:dotnetCHARTING.DataSource.FromElementGroup(dotnetCHARTING.SeriesCollection,System.Int32,dotnetCHARTING.DataSourceType)"><summary>Creates a DataSource object from a SeriesColleciton, and Element index.</summary><param name="sourceSeriesCollection">SeriesCollection containing the given group of elements.</param><param name="sourceGroupIndex">Index of the element in each series that makes up the group.</param><param name="splitIntoType">Name of the given element.</param></member><member name="M:dotnetCHARTING.DataSource.FromElementGroup(dotnetCHARTING.SeriesCollection,System.String,dotnetCHARTING.DataSourceType)"><summary>
            Creates an Element Group DataSource object from a SeriesColleciton, and Element
            name.
            </summary><param name="sourceSeriesCollection">SeriesCollection containing the given group of elements.</param><param name="sourceGroupName">Name of the element in each series that makes up the group.</param><param name="splitIntoType">Name of the given element.</param></member><member name="M:dotnetCHARTING.DataSource.FromElementGroup(dotnetCHARTING.SeriesCollection,System.Int32)"><summary>
            Creates an Element Group DataSource object from a SeriesColleciton, and Element
            index.
            </summary><param name="sourceSeriesCollection">SeriesCollection containing the given group of elements.</param><param name="sourceGroupIndex">Index of the element in each series that makes up the group.</param></member><member name="M:dotnetCHARTING.DataSource.FromElementGroup(dotnetCHARTING.SeriesCollection,System.String)"><summary>
            Creates an Element Group DataSource object from a SeriesColleciton, and Element
            name.
            </summary><param name="sourceSeriesCollection">SeriesCollection containing the given group of elements.</param><param name="sourceGroupName">Index of the element in each series that makes up the group.</param></member><member name="M:dotnetCHARTING.DataSource.FromAxisMarker(dotnetCHARTING.Axis,dotnetCHARTING.AxisMarker)"><summary>Creates an AxisMarker DataSource object from an %AxisMarker% object.</summary><param name="sourceAxis">Axis containing the axis marker.</param></member><member name="M:dotnetCHARTING.DataSource.FromScaleRange(dotnetCHARTING.Axis,dotnetCHARTING.ScaleRange)"><summary>Creates a DataSource object from an %ScaleRange% object.</summary><param name="sourceAxis">Axis containing the scale range.</param><param name="sr">Given ScaleRange object.</param></member><member name="M:dotnetCHARTING.DataSource.op_Implicit(dotnetCHARTING.SeriesCollection)~dotnetCHARTING.DataSource"><summary>
            Creates a <b>DataSource</b> from the specified <see cref="P:dotnetCHARTING.DataSource.SeriesCollection"></see>.
            </summary><param name="sc"><see cref="P:dotnetCHARTING.DataSource.SeriesCollection"></see> that is used as the as the DataSource.</param><returns></returns></member><member name="M:dotnetCHARTING.DataSource.op_Implicit(dotnetCHARTING.Series)~dotnetCHARTING.DataSource"><summary>
            Creates a <b>DataSource</b> from the specified <see cref="P:dotnetCHARTING.DataSource.Series"></see>.
            </summary><param name="s"><see cref="P:dotnetCHARTING.DataSource.Series"></see> that is used as the as the DataSource.</param><returns></returns></member><member name="M:dotnetCHARTING.DataSource.op_Implicit(dotnetCHARTING.Element)~dotnetCHARTING.DataSource"><summary>
            Creates a <b>DataSource</b> from the specified <see cref="P:dotnetCHARTING.DataSource.Element"></see>.
            </summary><param name="e"><see cref="P:dotnetCHARTING.DataSource.Element"></see> that is used as the as the DataSource.</param><returns></returns></member><member name="M:dotnetCHARTING.DataSource.op_Implicit(dotnetCHARTING.AxisMarker)~dotnetCHARTING.DataSource"><summary>
            Creates a <b>DataSource</b> from the specified <see cref="P:dotnetCHARTING.DataSource.AxisMarker"></see>.
            </summary><param name="am"><see cref="P:dotnetCHARTING.DataSource.AxisMarker"></see> that is used as the as the DataSource.</param><returns></returns></member><member name="P:dotnetCHARTING.DataSource.SplitInto"><summary>
            Specifies the type of <strong>DataSource</strong> to split this data source into
            when it is used to populate a legend box.
            </summary></member><member name="T:dotnetCHARTING.Hotspot"><summary>
            Represents a hotspot on the image and provides events such as tool tips and
            redirect URL when clicked.
            </summary><remarks>
            For more information, see tutorial:<br></br><strong>Getting Started &gt; General Tutorials &gt; Interactivity -
            Hotspots</strong></remarks></member><member name="M:dotnetCHARTING.Hotspot.#ctor"><summary>
            Creates an instance of the <b>HotSpot</b> object.
            </summary></member><member name="P:dotnetCHARTING.Hotspot.Attributes"><summary>
            Gets the
            <a href="dotnetCHARTING~dotnetCHARTING.Hotspot.HtmlAttributes.html">HtmlAttributes</a>
            of this Hotspot.
            </summary></member><member name="P:dotnetCHARTING.Hotspot.URL"><summary>
            Gets or sets the URL redirected to when the object this Hotspot represents is
            clicked.
            </summary></member><member name="P:dotnetCHARTING.Hotspot.URLTarget"><summary>Gets or sets the URL target of the URL property.</summary></member><member name="P:dotnetCHARTING.Hotspot.ToolTip"><summary>
            Gets or sets the tool tip text shown when mouse pointer is over the object this
            Hotspot represents.
            </summary></member><member name="T:dotnetCHARTING.Hotspot.HtmlAttribute"><summary>Encapsulates a number of pre-defined javascript actions and their values.</summary></member><member name="P:dotnetCHARTING.Hotspot.HtmlAttribute.Alert"><summary>Gets or sets the text of a javascript alert pop-up.</summary></member><member name="P:dotnetCHARTING.Hotspot.HtmlAttribute.Redirect"><summary>Gets or sets the url the browser redirects to.</summary></member><member name="P:dotnetCHARTING.Hotspot.HtmlAttribute.RedirectFrame"><summary>Gets or sets the url the current frame redirects to.</summary></member><member name="P:dotnetCHARTING.Hotspot.HtmlAttribute.StatusBarMessage"><summary>Gets or sets the status bar text message of the browser window.</summary></member><member name="T:dotnetCHARTING.Hotspot.HtmlAttributes"><summary>Encapsulates a set of html event attributes and their values.</summary></member><member name="P:dotnetCHARTING.Hotspot.HtmlAttributes.OnClick"><summary>Gets or sets the html OnClick attribute.</summary></member><member name="P:dotnetCHARTING.Hotspot.HtmlAttributes.OnDoubleClick"><summary>Gets or sets the html OnDoubleClick attribute.</summary></member><member name="P:dotnetCHARTING.Hotspot.HtmlAttributes.OnMouseOver"><summary>Gets or sets the html OnMouseOver attribute.</summary></member><member name="P:dotnetCHARTING.Hotspot.HtmlAttributes.Custom"><summary>Gets or sets a ListCollection of custom html attributes.</summary></member><member name="T:dotnetCHARTING.HotspotCollection"><summary> Contains a collection of <see cref="T:dotnetCHARTING.Hotspot"></see> objects. </summary><moduleiscollection></moduleiscollection></member><member name="M:dotnetCHARTING.HotspotCollection.#ctor(dotnetCHARTING.Hotspot[])"><summary>Creates a new instance of HotspotCollection with the specified list of Hotspot objects.</summary></member><!-- Badly formed XML comment ignored for member "M:dotnetCHARTING.HotspotCollection.Add(dotnetCHARTING.Hotspot)" --><member name="M:dotnetCHARTING.HotspotCollection.Add(dotnetCHARTING.HotspotCollection)"><summary> Adds a specified <see cref="T:dotnetCHARTING.HotspotCollection"></see> to this collection.</summary><param name="hotspotCollection">The <see cref="T:dotnetCHARTING.HotspotCollection"></see> to add.</param></member><member name="M:dotnetCHARTING.HotspotCollection.Add(dotnetCHARTING.Hotspot[])"><summary> Adds the specified <see cref="T:dotnetCHARTING.Hotspot"></see> objects to this collection.</summary><param name="hotspotList">A list of <see cref="T:dotnetCHARTING.Hotspot"></see> objects to add.</param></member><member name="M:dotnetCHARTING.HotspotCollection.IndexOf(dotnetCHARTING.Hotspot)"><summary>Determines index of a specified <see cref="T:dotnetCHARTING.Hotspot"></see> in this collection.</summary><param name="hotspot">The <see cref="T:dotnetCHARTING.Hotspot"></see> to find.</param><returns>The zero-based index of the specified <see cref="T:dotnetCHARTING.Hotspot"></see>.</returns></member><member name="M:dotnetCHARTING.HotspotCollection.Insert(System.Int32,dotnetCHARTING.Hotspot)"><summary>Inserts a Hotspot into this collection at a specified index. </summary><param name="index">The zero-based index into the collection at which to insert the Hotspot.</param><param name="hotspot">The Hotspot to insert into this collection.</param></member><member name="M:dotnetCHARTING.HotspotCollection.Remove(dotnetCHARTING.Hotspot)"><summary>Removes a specified Hotspot from this collection.</summary><param name="hotspot">The Hotspot to remove. </param></member><member name="M:dotnetCHARTING.HotspotCollection.Contains(dotnetCHARTING.Hotspot)"><summary>Determines whether this collection contains a specified <see cref="T:dotnetCHARTING.Hotspot"></see>.</summary><param name="hotspot">The <see cref="T:dotnetCHARTING.Hotspot"></see> to find.</param><returns>true if the specified <see cref="T:dotnetCHARTING.Hotspot"></see> belongs to this collection; otherwise, false.</returns></member><member name="P:dotnetCHARTING.HotspotCollection.Item(System.Int32)"><summary> Gets or sets the object at a specified index. </summary></member><member name="T:dotnetCHARTING.SmartPalette"><summary>
            Contains a dictionary like collection of string and color pairs where strings
            refer to series or element names and colors that are assigned to series or elements
            with those names.
            </summary><remarks>
            This object can be saved as XML and loaded for any other charts to use. To use a
            SmartPalette with a given chart, it to the Chart.SmartPalette property.
            </remarks><isnew>6/24/2005</isnew></member><member name="M:dotnetCHARTING.SmartPalette.#ctor"><summary>Initializes a new instance of the <strong>SmartPalette</strong> object.</summary></member><member name="M:dotnetCHARTING.SmartPalette.Add(System.String,System.Drawing.Color)"><summary>
            Ads the specified key and color item to this palette.
            </summary><param name="key"></param><param name="value"></param></member><member name="M:dotnetCHARTING.SmartPalette.Add(dotnetCHARTING.SmartPalette)"><summary>
            Adds the items in the specified palette to this palette.
            </summary><param name="palette">Source palette.</param></member><member name="M:dotnetCHARTING.SmartPalette.Remove(System.String)"><summary>
            Removes an entry with the specified key from the collection.
            </summary><param name="key">Key of entry to remove.</param></member><member name="M:dotnetCHARTING.SmartPalette.Remove(System.Int32)"><summary>Removes an item at the specified index from this collection.</summary><param name="index">The AxisTick to remove. </param></member><member name="M:dotnetCHARTING.SmartPalette.Clear"><summary>Clears the SmartPalette.</summary></member><member name="M:dotnetCHARTING.SmartPalette.LoadState(System.String)"><summary>
            Imports a SmartPalette object from the specified xml file.
            </summary><param name="xmlDataOrFileName">Path of XML file or XML data to load.</param></member><member name="M:dotnetCHARTING.SmartPalette.SaveState"><summary>Saves the SmartPalette instance to an xml file.</summary></member><member name="M:dotnetCHARTING.SmartPalette.SaveState(System.String)"><summary>Saves the SmartPalette instance to an xml file.</summary></member><member name="P:dotnetCHARTING.SmartPalette.Item(System.Int32)"><summary>Gets or sets the value associated with the specified key.</summary></member><member name="P:dotnetCHARTING.SmartPalette.Item(System.String)"><summary> Gets or sets the Color with the specified key. </summary></member><member name="P:dotnetCHARTING.SmartPalette.AllKeys"><summary>
            Gets a <strong>String</strong> array containing all the keys (series or element
            names) in the SmartPalette.
            </summary></member><member name="P:dotnetCHARTING.SmartPalette.AllValues"><summary>
            Gets a <strong>Color</strong> array containing all the values (series / element
            colors) in the SmartPalette.
            </summary></member><member name="P:dotnetCHARTING.SmartPalette.HasKeys"><summary>Gets a value indicating whether the SmartPalette has entries.</summary></member><member name="T:dotnetCHARTING.AxisTickCollection"><summary> Contains a collection of <see cref="T:dotnetCHARTING.AxisTick">AxisTick</see> objects. </summary><moduleiscollection></moduleiscollection></member><member name="M:dotnetCHARTING.AxisTickCollection.#ctor(dotnetCHARTING.AxisTick[])"><summary>Creates a new instance of AxisTickCollection with the specified list of AxisTick objects.</summary></member><member name="M:dotnetCHARTING.AxisTickCollection.FromValues(System.Double[])"><summary>Creates a collection of axis ticks with the specified values.</summary><param name="list">List of %double% values.</param></member><member name="M:dotnetCHARTING.AxisTickCollection.FromValues(System.DateTime[])"><summary>Creates a collection of axis ticks with the specified values.</summary><param name="list">List of %DateTime values.</param></member><member name="M:dotnetCHARTING.AxisTickCollection.Add(dotnetCHARTING.AxisTick)"><summary>Adds the specified %AxisTick% object to this collection.</summary></member><member name="M:dotnetCHARTING.AxisTickCollection.Add(dotnetCHARTING.AxisTickCollection)"><summary> Adds a specified <see cref="T:dotnetCHARTING.AxisTickCollection"></see> to this collection.</summary><param name="axisTickCollection">The <see cref="T:dotnetCHARTING.AxisTickCollection"></see> to add.</param></member><member name="M:dotnetCHARTING.AxisTickCollection.Add(dotnetCHARTING.AxisTick[])"><summary> Adds the specified <see cref="T:dotnetCHARTING.AxisTick"></see> objects to this collection.</summary><param name="axisTickList">A list of <see cref="T:dotnetCHARTING.AxisTick"></see> objects to add.</param></member><member name="M:dotnetCHARTING.AxisTickCollection.IndexOf(dotnetCHARTING.AxisTick)"><summary>Determines the index of a specified <see cref="T:dotnetCHARTING.AxisTick"></see> in this collection.</summary><param name="axisTick">The <see cref="T:dotnetCHARTING.AxisTick"></see> to find.</param><returns>The zero-based index of the specified <see cref="T:dotnetCHARTING.AxisTick"></see>.</returns></member><member name="M:dotnetCHARTING.AxisTickCollection.Insert(System.Int32,dotnetCHARTING.AxisTick)"><summary>Inserts a AxisTick into this collection at a specified index. </summary><param name="index">The zero-based index into the collection at which to insert the AxisTick.</param><param name="axisTick">The AxisTick to insert into this collection.</param></member><member name="M:dotnetCHARTING.AxisTickCollection.Remove(dotnetCHARTING.AxisTick)"><summary>Removes a specified AxisTick from this collection.</summary><param name="axisTick">The AxisTick to remove. </param></member><member name="M:dotnetCHARTING.AxisTickCollection.Contains(dotnetCHARTING.AxisTick)"><summary>Determines whether this collection contains a specified <see cref="T:dotnetCHARTING.AxisTick"></see>.</summary><param name="axisTick">The <see cref="T:dotnetCHARTING.AxisTick"></see> to find.</param><returns>true if the specified <see cref="T:dotnetCHARTING.AxisTick"></see> belongs to this collection; otherwise, false.</returns></member><member name="P:dotnetCHARTING.AxisTickCollection.Item(System.Int32)"><summary> Gets or sets the object at a specified index. </summary></member><member name="T:dotnetCHARTING.AnnotationCollection"><summary> Contains a collection of <see cref="T:dotnetCHARTING.Annotation"></see> objects. </summary><moduleiscollection></moduleiscollection></member><member name="M:dotnetCHARTING.AnnotationCollection.#ctor(dotnetCHARTING.Annotation[])"><summary>Creates a new instance of AnnotationCollection with the specified list of Annotation objects.</summary></member><!-- Badly formed XML comment ignored for member "M:dotnetCHARTING.AnnotationCollection.Add(dotnetCHARTING.Annotation)" --><member name="M:dotnetCHARTING.AnnotationCollection.Add(dotnetCHARTING.AnnotationCollection)"><summary> Adds a specified <see cref="T:dotnetCHARTING.AnnotationCollection"></see> to this collection.</summary><param name="annotationCollection">The <see cref="T:dotnetCHARTING.AnnotationCollection"></see> to add.</param></member><member name="M:dotnetCHARTING.AnnotationCollection.Add(dotnetCHARTING.Annotation[])"><summary> Adds the specified <see cref="T:dotnetCHARTING.Annotation"></see> objects to this collection.</summary><param name="annotationList">A list of <see cref="T:dotnetCHARTING.Annotation"></see> objects to add.</param></member><member name="M:dotnetCHARTING.AnnotationCollection.IndexOf(dotnetCHARTING.Annotation)"><summary>Determines the index of a specified <see cref="T:dotnetCHARTING.Annotation"></see> in this collection.</summary><param name="annotation">The <see cref="T:dotnetCHARTING.Annotation"></see> to find.</param><returns>The zero-based index of the specified <see cref="T:dotnetCHARTING.Annotation"></see>.</returns></member><member name="M:dotnetCHARTING.AnnotationCollection.Insert(System.Int32,dotnetCHARTING.Annotation)"><summary>Inserts a Annotation into this collection at a specified index. </summary><param name="index">The zero-based index into the collection at which to insert the Annotation.</param><param name="annotation">The Annotation to insert into this collection.</param></member><member name="M:dotnetCHARTING.AnnotationCollection.Remove(dotnetCHARTING.Annotation)"><summary>Removes a specified Annotation from this collection.</summary><param name="annotation">The Annotation to remove. </param></member><member name="M:dotnetCHARTING.AnnotationCollection.Contains(dotnetCHARTING.Annotation)"><summary>Determines whether this collection contains a specified <see cref="T:dotnetCHARTING.Annotation"></see>.</summary><param name="annotation">The <see cref="T:dotnetCHARTING.Annotation"></see> to find.</param><returns>true if the specified <see cref="T:dotnetCHARTING.Annotation"></see> belongs to this collection; otherwise, false.</returns></member><member name="P:dotnetCHARTING.AnnotationCollection.Item(System.Int32)"><summary> Gets or sets the object at a specified index. </summary></member><member name="T:dotnetCHARTING.LabelAlignmentCollection"><summary>
            Contains a collection of <see cref="T:dotnetCHARTING.LabelAlignment">LabelAlignment</see> objects.
            </summary><moduleiscollection></moduleiscollection></member><member name="M:dotnetCHARTING.LabelAlignmentCollection.Add(dotnetCHARTING.LabelAlignment)"><summary>
            Adds a specified <see cref="T:dotnetCHARTING.LabelAlignment"></see> enumeration to this collection.
            </summary><param name="_LabelAlignment">The <see cref="T:dotnetCHARTING.LabelAlignment"></see> to add.</param><returns>The zero-based index of the added <see cref="T:dotnetCHARTING.LabelAlignment">LabelAlignment</see>.</returns></member><member name="M:dotnetCHARTING.LabelAlignmentCollection.Insert(System.Int32,dotnetCHARTING.LabelAlignment)"><summary>
            Inserts a <see cref="T:dotnetCHARTING.LabelAlignment">LabelAlignment</see> enumeration into this collection at a specified index.
            </summary><param name="index">The zero-based index into the collection at which to insert the label alignment.</param><param name="_LabelAlignment">The label alignment to insert into this collection.</param></member><member name="M:dotnetCHARTING.LabelAlignmentCollection.Remove(dotnetCHARTING.LabelAlignment)"><summary>
            Removes a specified label alignment from this collection.
            </summary><param name="_LabelAlignment">The label alignment to remove. </param></member><member name="M:dotnetCHARTING.LabelAlignmentCollection.Contains(dotnetCHARTING.LabelAlignment)"><summary>
            Determines whether this collection contains a specified <see cref="T:dotnetCHARTING.LabelAlignment">LabelAlignment</see>.
            </summary><param name="_LabelAlignment">The <see cref="T:dotnetCHARTING.LabelAlignment">LabelAlignment</see> to find.</param><returns>true if the specified <see cref="T:dotnetCHARTING.LabelAlignment">LabelAlignment</see> belongs to this collection; otherwise, false.</returns></member><member name="F:dotnetCHARTING.LabelAlignmentCollection.isModified"><summary>
            Replaces LabelAlignemtnSet in parent class.
            </summary></member><member name="P:dotnetCHARTING.LabelAlignmentCollection.Item(System.Int32)"><summary>
            Gets or sets the object at a specified index. 
            </summary></member><member name="T:dotnetCHARTING.LegendBoxCollection"><summary> Contains a collection of <see cref="T:dotnetCHARTING.LegendBox"></see> objects. </summary></member><member name="M:dotnetCHARTING.LegendBoxCollection.#ctor(dotnetCHARTING.LegendBox[])"><summary>Creates a new instance of LegendBoxCollection with the specified list of LegendBox objects.</summary></member><!-- Badly formed XML comment ignored for member "M:dotnetCHARTING.LegendBoxCollection.Add(dotnetCHARTING.LegendBox)" --><member name="M:dotnetCHARTING.LegendBoxCollection.Add(dotnetCHARTING.LegendBoxCollection)"><summary> Adds a specified <see cref="T:dotnetCHARTING.LegendBoxCollection"></see> to this collection.</summary><param name="legendBoxCollection">The <see cref="T:dotnetCHARTING.LegendBoxCollection"></see> to add.</param></member><member name="M:dotnetCHARTING.LegendBoxCollection.Add(dotnetCHARTING.LegendBox[])"><summary> Adds the specified <see cref="T:dotnetCHARTING.LegendBox"></see> objects to this collection.</summary><param name="legendBoxList">A list of <see cref="T:dotnetCHARTING.LegendBox"></see> objects to add.</param></member><member name="M:dotnetCHARTING.LegendBoxCollection.IndexOf(dotnetCHARTING.LegendBox)"><summary>Determines the index of a specified <see cref="T:dotnetCHARTING.LegendBox"></see> in this collection.</summary><param name="legendBox">The <see cref="T:dotnetCHARTING.LegendBox"></see> to find.</param><returns>The zero-based index of the specified <see cref="T:dotnetCHARTING.LegendBox"></see>.</returns></member><member name="M:dotnetCHARTING.LegendBoxCollection.Insert(System.Int32,dotnetCHARTING.LegendBox)"><summary>Inserts a LegendBox into this collection at a specified index. </summary><param name="index">The zero-based index into the collection at which to insert the LegendBox.</param><param name="legendBox">The LegendBox to insert into this collection.</param></member><member name="M:dotnetCHARTING.LegendBoxCollection.Remove(dotnetCHARTING.LegendBox)"><summary>Removes a specified LegendBox from this collection.</summary><param name="legendBox">The LegendBox to remove. </param></member><member name="M:dotnetCHARTING.LegendBoxCollection.Contains(dotnetCHARTING.LegendBox)"><summary>Determines whether this collection contains a specified <see cref="T:dotnetCHARTING.LegendBox"></see>.</summary><param name="legendBox">The <see cref="T:dotnetCHARTING.LegendBox"></see> to find.</param><returns>true if the specified <see cref="T:dotnetCHARTING.LegendBox"></see> belongs to this collection; otherwise, false.</returns></member><member name="P:dotnetCHARTING.LegendBoxCollection.Item(System.Int32)"><summary> Gets or sets the object at a specified index. </summary></member><member name="T:dotnetCHARTING.AxisMarkerCollection"><summary> Contains a collection of <see cref="T:dotnetCHARTING.AxisMarker"></see> objects. </summary></member><member name="M:dotnetCHARTING.AxisMarkerCollection.#ctor(dotnetCHARTING.AxisMarker[])"><summary>Creates a new instance of AxisMarkerCollection with the specified list of AxisMarker objects.</summary></member><!-- Badly formed XML comment ignored for member "M:dotnetCHARTING.AxisMarkerCollection.Add(dotnetCHARTING.AxisMarker)" --><member name="M:dotnetCHARTING.AxisMarkerCollection.Add(dotnetCHARTING.AxisMarkerCollection)"><summary> Adds a specified <see cref="T:dotnetCHARTING.AxisMarkerCollection"></see> to this collection.</summary><param name="axisMarkerCollection">The <see cref="T:dotnetCHARTING.AxisMarkerCollection"></see> to add.</param></member><member name="M:dotnetCHARTING.AxisMarkerCollection.Add(dotnetCHARTING.AxisMarker[])"><summary> Adds the specified <see cref="T:dotnetCHARTING.AxisMarker"></see> objects to this collection.</summary><param name="axisMarkerList">A list of <see cref="T:dotnetCHARTING.AxisMarker"></see> objects to add.</param></member><member name="M:dotnetCHARTING.AxisMarkerCollection.IndexOf(dotnetCHARTING.AxisMarker)"><summary>Determines the index of a specified <see cref="T:dotnetCHARTING.AxisMarker"></see> in this collection.</summary><param name="axisMarker">The <see cref="T:dotnetCHARTING.AxisMarker"></see> to find.</param><returns>The zero-based index of the specified <see cref="T:dotnetCHARTING.AxisMarker"></see>.</returns></member><member name="M:dotnetCHARTING.AxisMarkerCollection.Insert(System.Int32,dotnetCHARTING.AxisMarker)"><summary>Inserts a AxisMarker into this collection at a specified index. </summary><param name="index">The zero-based index into the collection at which to insert the AxisMarker.</param><param name="axisMarker">The AxisMarker to insert into this collection.</param></member><member name="M:dotnetCHARTING.AxisMarkerCollection.Remove(dotnetCHARTING.AxisMarker)"><summary>Removes a specified AxisMarker from this collection.</summary><param name="axisMarker">The AxisMarker to remove. </param></member><member name="M:dotnetCHARTING.AxisMarkerCollection.Contains(dotnetCHARTING.AxisMarker)"><summary>Determines whether this collection contains a specified <see cref="T:dotnetCHARTING.AxisMarker"></see>.</summary><param name="axisMarker">The <see cref="T:dotnetCHARTING.AxisMarker"></see> to find.</param><returns>true if the specified <see cref="T:dotnetCHARTING.AxisMarker"></see> belongs to this collection; otherwise, false.</returns></member><member name="P:dotnetCHARTING.AxisMarkerCollection.Item(System.Int32)"><summary> Gets or sets the object at a specified index. </summary></member><member name="T:dotnetCHARTING.LabelOverrideCollection"><summary>
            Contains a collection of <see cref="T:dotnetCHARTING.LabelOverride">LabelOverride</see> objects.
            </summary><moduleiscollection></moduleiscollection></member><member name="M:dotnetCHARTING.LabelOverrideCollection.Add(dotnetCHARTING.LabelOverride)"><summary>
            Adds a specified <see cref="T:dotnetCHARTING.LabelOverride">LabelOverride</see> class to this collection.
            </summary><param name="labelOverride">The <see cref="T:dotnetCHARTING.LabelOverride">LabelOverride</see> to add.</param><returns>The zero-based index of the added <see cref="T:dotnetCHARTING.LabelOverride">LabelOverride</see>.</returns></member><member name="M:dotnetCHARTING.LabelOverrideCollection.Insert(System.Int32,dotnetCHARTING.LabelOverride)"><summary>
            Inserts a label override into this collection at a specified index.
            </summary><param name="index">The zero-based index into the collection at which to insert the label override.</param><param name="labelOverride">The label override to insert into this collection.</param></member><member name="M:dotnetCHARTING.LabelOverrideCollection.Remove(dotnetCHARTING.LabelOverride)"><summary>
            Removes a specified label override from this collection.
            </summary><param name="labelOverride">The label override marker to remove.</param></member><member name="M:dotnetCHARTING.LabelOverrideCollection.Contains(dotnetCHARTING.LabelOverride)"><summary>
            Determines whether this collection contains a specified <see cref="T:dotnetCHARTING.LabelOverride">LabelOverride</see>.
            </summary><param name="labelOverride">The <see cref="T:dotnetCHARTING.LabelOverride">LabelOverride</see> to find.</param><returns>true if the specified <see cref="T:dotnetCHARTING.LabelOverride">LabelOverride</see> belongs to this collection; otherwise, false.</returns></member><member name="P:dotnetCHARTING.LabelOverrideCollection.Item(System.Int32)"><summary>
            Gets or sets the object at a specified index. 
            </summary></member><member name="T:dotnetCHARTING.ChartAreaCollection"><summary> Contains a collection of <see cref="T:dotnetCHARTING.ChartArea"></see> objects. </summary></member><member name="M:dotnetCHARTING.ChartAreaCollection.#ctor(dotnetCHARTING.ChartArea[])"><summary>Creates a new instance of ChartAreaCollection with the specified list of ChartArea objects.</summary></member><!-- Badly formed XML comment ignored for member "M:dotnetCHARTING.ChartAreaCollection.Add(dotnetCHARTING.ChartArea)" --><member name="M:dotnetCHARTING.ChartAreaCollection.Add(dotnetCHARTING.ChartAreaCollection)"><summary> Adds a specified <see cref="T:dotnetCHARTING.ChartAreaCollection"></see> to this collection.</summary><param name="chartAreaCollection">The <see cref="T:dotnetCHARTING.ChartAreaCollection"></see> to add.</param></member><member name="M:dotnetCHARTING.ChartAreaCollection.Add(dotnetCHARTING.ChartArea[])"><summary> Adds the specified <see cref="T:dotnetCHARTING.ChartArea"></see> objects to this collection.</summary><param name="chartAreaList">A list of <see cref="T:dotnetCHARTING.ChartArea"></see> objects to add.</param></member><member name="M:dotnetCHARTING.ChartAreaCollection.IndexOf(dotnetCHARTING.ChartArea)"><summary>Determines the index of a specified <see cref="T:dotnetCHARTING.ChartArea"></see> in this collection.</summary><param name="chartArea">The <see cref="T:dotnetCHARTING.ChartArea"></see> to find.</param><returns>The zero-based index of the specified <see cref="T:dotnetCHARTING.ChartArea"></see>.</returns></member><member name="M:dotnetCHARTING.ChartAreaCollection.Insert(System.Int32,dotnetCHARTING.ChartArea)"><summary>Inserts a ChartArea into this collection at a specified index. </summary><param name="index">The zero-based index into the collection at which to insert the ChartArea.</param><param name="chartArea">The ChartArea to insert into this collection.</param></member><member name="M:dotnetCHARTING.ChartAreaCollection.Remove(dotnetCHARTING.ChartArea)"><summary>Removes a specified ChartArea from this collection.</summary><param name="chartArea">The ChartArea to remove. </param></member><member name="M:dotnetCHARTING.ChartAreaCollection.Contains(dotnetCHARTING.ChartArea)"><summary>Determines whether this collection contains a specified <see cref="T:dotnetCHARTING.ChartArea"></see>.</summary><param name="chartArea">The <see cref="T:dotnetCHARTING.ChartArea"></see> to find.</param><returns>true if the specified <see cref="T:dotnetCHARTING.ChartArea"></see> belongs to this collection; otherwise, false.</returns></member><member name="P:dotnetCHARTING.ChartAreaCollection.Item(System.Int32)"><summary> Gets or sets the object at a specified index. </summary></member><member name="T:dotnetCHARTING.TimeIntervalCollection"><summary> Contains a collection of <see cref="T:dotnetCHARTING.TimeInterval"></see> objects. </summary></member><member name="M:dotnetCHARTING.TimeIntervalCollection.#ctor(dotnetCHARTING.TimeInterval[])"><summary>Creates a new instance of TimeIntervalCollection with the specified list of TimeInterval objects.</summary></member><!-- Badly formed XML comment ignored for member "M:dotnetCHARTING.TimeIntervalCollection.Add(dotnetCHARTING.TimeInterval)" --><member name="M:dotnetCHARTING.TimeIntervalCollection.Add(dotnetCHARTING.TimeIntervalCollection)"><summary> Adds a specified <see cref="T:dotnetCHARTING.TimeIntervalCollection"></see> to this collection.</summary><param name="timeIntervalCollection">The <see cref="T:dotnetCHARTING.TimeIntervalCollection"></see> to add.</param></member><member name="M:dotnetCHARTING.TimeIntervalCollection.Add(dotnetCHARTING.TimeInterval[])"><summary> Adds the specified <see cref="T:dotnetCHARTING.TimeInterval"></see> objects to this collection.</summary><param name="timeIntervalList">A list of <see cref="T:dotnetCHARTING.TimeInterval"></see> objects to add.</param></member><member name="M:dotnetCHARTING.TimeIntervalCollection.IndexOf(dotnetCHARTING.TimeInterval)"><summary>Determines index of a specified <see cref="T:dotnetCHARTING.TimeInterval"></see> in this collection.</summary><param name="timeInterval">The <see cref="T:dotnetCHARTING.TimeInterval"></see> to find.</param><returns>The zero-based index of the specified <see cref="T:dotnetCHARTING.TimeInterval"></see>.</returns></member><member name="M:dotnetCHARTING.TimeIntervalCollection.Insert(System.Int32,dotnetCHARTING.TimeInterval)"><summary>Inserts a TimeInterval into this collection at a specified index. </summary><param name="index">The zero-based index into the collection at which to insert the TimeInterval.</param><param name="timeInterval">The TimeInterval to insert into this collection.</param></member><member name="M:dotnetCHARTING.TimeIntervalCollection.Remove(dotnetCHARTING.TimeInterval)"><summary>Removes a specified TimeInterval from this collection.</summary><param name="timeInterval">The TimeInterval to remove. </param></member><member name="M:dotnetCHARTING.TimeIntervalCollection.Contains(dotnetCHARTING.TimeInterval)"><summary>Determines whether this collection contains a specified <see cref="T:dotnetCHARTING.TimeInterval"></see>.</summary><param name="timeInterval">The <see cref="T:dotnetCHARTING.TimeInterval"></see> to find.</param><returns>true if the specified <see cref="T:dotnetCHARTING.TimeInterval"></see> belongs to this collection; otherwise, false.</returns></member><member name="P:dotnetCHARTING.TimeIntervalCollection.Item(System.Int32)"><summary> Gets or sets the object at a specified index. </summary></member><member name="T:dotnetCHARTING.SerializerObjectCollection"><summary> Contains a collection of <see cref="T:dotnetCHARTING.SerializerObject"></see> objects. </summary></member><member name="M:dotnetCHARTING.SerializerObjectCollection.#ctor(dotnetCHARTING.SerializerObject[])"><summary>Creates a new instance of SerializerObjectCollection with the specified list of SerializerObject objects.</summary></member><!-- Badly formed XML comment ignored for member "M:dotnetCHARTING.SerializerObjectCollection.Add(dotnetCHARTING.SerializerObject)" --><member name="M:dotnetCHARTING.SerializerObjectCollection.Add(dotnetCHARTING.SerializerObjectCollection)"><summary> Adds a specified <see cref="T:dotnetCHARTING.SerializerObjectCollection"></see> to this collection.</summary><param name="serializerObjectCollection">The <see cref="T:dotnetCHARTING.SerializerObjectCollection"></see> to add.</param></member><member name="M:dotnetCHARTING.SerializerObjectCollection.Add(dotnetCHARTING.SerializerObject[])"><summary> Adds the specified <see cref="T:dotnetCHARTING.SerializerObject"></see> objects to this collection.</summary><param name="serializerObjectList">A list of <see cref="T:dotnetCHARTING.SerializerObject"></see> objects to add.</param></member><member name="M:dotnetCHARTING.SerializerObjectCollection.IndexOf(dotnetCHARTING.SerializerObject)"><summary>Determines index of a specified <see cref="T:dotnetCHARTING.SerializerObject"></see> in this collection.</summary><param name="serializerObject">The <see cref="T:dotnetCHARTING.SerializerObject"></see> to find.</param><returns>The zero-based index of the specified <see cref="T:dotnetCHARTING.SerializerObject"></see>.</returns></member><member name="M:dotnetCHARTING.SerializerObjectCollection.Insert(System.Int32,dotnetCHARTING.SerializerObject)"><summary>Inserts a SerializerObject into this collection at a specified index. </summary><param name="index">The zero-based index into the collection at which to insert the SerializerObject.</param><param name="serializerObject">The SerializerObject to insert into this collection.</param></member><member name="M:dotnetCHARTING.SerializerObjectCollection.Remove(dotnetCHARTING.SerializerObject)"><summary>Removes a specified SerializerObject from this collection.</summary><param name="serializerObject">The SerializerObject to remove. </param></member><member name="M:dotnetCHARTING.SerializerObjectCollection.Contains(dotnetCHARTING.SerializerObject)"><summary>Determines whether this collection contains a specified <see cref="T:dotnetCHARTING.SerializerObject"></see>.</summary><param name="serializerObject">The <see cref="T:dotnetCHARTING.SerializerObject"></see> to find.</param><returns>true if the specified <see cref="T:dotnetCHARTING.SerializerObject"></see> belongs to this collection; otherwise, false.</returns></member><member name="P:dotnetCHARTING.SerializerObjectCollection.Item(System.Int32)"><summary> Gets or sets the object at a specified index. </summary></member><member name="T:dotnetCHARTING.Designer.AxisMarkerValueConverter"><summary>
            Summary description for AxisMarkerValueConverter.
            </summary></member><member name="T:dotnetCHARTING.Designer.AxisMarketValueForm"><summary>
            Summary description for AxisMarketValueForm.
            </summary></member><member name="F:dotnetCHARTING.Designer.AxisMarketValueForm.components"><summary>
            Required designer variable.
            </summary></member><member name="M:dotnetCHARTING.Designer.AxisMarketValueForm.Dispose(System.Boolean)"><summary>
            Clean up any resources being used.
            </summary></member><member name="M:dotnetCHARTING.Designer.AxisMarketValueForm.InitializeComponent"><summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary></member><member name="T:dotnetCHARTING.Designer.ElementMarkerTypeEditor"><summary>
            Summary description for LabelMarkerTypeConverter.
            </summary></member><member name="T:dotnetCHARTING.Designer.ExTimeSpanTypeConverter"><summary>
            Summary description for ExTimeSpanTypeConverter.
            </summary></member><member name="T:dotnetCHARTING.Designer.GridPositionTypeConverter"><summary>
            Summary description for GridPositionTypeConveter.
            </summary></member><member name="T:dotnetCHARTING.Designer.NewExpandableObjectConverter"><summary>
            Summary description for ElementMarkerCoverter.
            </summary></member><member name="T:dotnetCHARTING.Designer.PatternConverter"><summary>
            Summary description for PointTypeConverter.
            </summary></member><member name="T:dotnetCHARTING.Designer.PointTypeConverter"><summary>
            Summary description for PointTypeConverter.
            </summary></member><member name="T:dotnetCHARTING.Designer.PositionConverter"><summary>
            Summary description for PositionConverter.
            </summary></member><member name="T:dotnetCHARTING.Designer.LabelAlignmentTypeEnumConverter"><summary>
            Summary description for SeriesTypeEnumConverter.
            </summary></member><member name="F:dotnetCHARTING.Designer.DesignTimeSeriesType.Marker"><summary>Shows elements with element markers.</summary></member><member name="F:dotnetCHARTING.Designer.DesignTimeSeriesType.Line"><summary>Graphs a series as a line.</summary></member><member name="F:dotnetCHARTING.Designer.DesignTimeSeriesType.Spline"><summary>Graphs a series as a spline (2D Only).</summary></member><member name="F:dotnetCHARTING.Designer.DesignTimeSeriesType.AreaLine"><summary>Graphs a seires as area line.</summary></member><member name="F:dotnetCHARTING.Designer.DesignTimeSeriesType.Column"><summary>Graphs a seies as a bar. </summary></member><member name="F:dotnetCHARTING.Designer.DesignTimeSeriesType.Cylinder"><summary>Graphs a seies as a cylinder. </summary></member><member name="F:dotnetCHARTING.Designer.DesignTimeSeriesType.CandleStick"><summary>
            Draws the series with candle sticks.
            </summary></member><member name="F:dotnetCHARTING.Designer.DesignTimeSeriesType.FinancialBar"><summary>
            Draws the series with bars.
            </summary></member><member name="F:dotnetCHARTING.Designer.DesignTimeSeriesType.FinancialOpen"><summary>
            Draws the opening price as a line.
            </summary></member><member name="F:dotnetCHARTING.Designer.DesignTimeSeriesType.FinancialClose"><summary>
            Draws the closing price as a line.
            </summary></member><member name="F:dotnetCHARTING.Designer.DesignTimeSeriesType.FinancialHigh"><summary>
            Draws the high price as a line.
            </summary></member><member name="F:dotnetCHARTING.Designer.DesignTimeSeriesType.FinancialLow"><summary>
            Draws the low price as a line.
            </summary></member><member name="F:dotnetCHARTING.Designer.DesignTimeSeriesType.FinancialHighLowArea"><summary>
            Draws a range area of highs and lows.
            </summary></member><member name="M:dotnetCHARTING.Internal.TestLib.isGoodLine(System.Drawing.PointF[])"><summary>
            Determines if points represent a valid line. It checks for a couple bad states, not whther it's valid from scratch.
            </summary><param name="p"></param><returns></returns></member><member name="M:dotnetCHARTING.Internal.StringLib.WordLowestPOT(System.String)"><summary>
            gets the shortest words percent of total string.
            </summary><param name="original"></param><returns></returns></member><member name="M:dotnetCHARTING.Internal.StringLib.WordHighestPOT(System.String)"><summary>
            gets the longest words percent of total string.
            </summary><param name="original"></param><returns></returns></member><member name="M:dotnetCHARTING.Internal.StringLib.newLineCount(System.String)"><summary>
            Returns the number of new line occurences
            </summary><param name="original"></param><returns></returns></member><member name="M:dotnetCHARTING.Internal.TrigLib.arcPointAuto(System.Drawing.RectangleF,System.Single)"><summary>
            If the point is at an angle where the result is obvious this will handle it.
            </summary><param name="rectangle"></param><param name="angle"></param><returns></returns></member><!-- Badly formed XML comment ignored for member "M:dotnetCHARTING.Internal.TrigLib.getPointOfCurveWithAngle(System.Drawing.PointF[],System.Single)" --><member name="M:dotnetCHARTING.Internal.TrigLib.getBestPointOfCurveWithAngle(System.Drawing.PointF[],System.Single)"><summary>
            Same as above except it returns
            </summary><param name="curve"></param><param name="theAngle"></param><returns></returns></member><member name="M:dotnetCHARTING.Internal.TrigLib.ensureCorrectX(System.Single,System.Single)"><summary>
            Provided the x and y are a resulting points on an ellipse centered at 0,0. This method ensure the x anx y are correct.
            </summary><param name="x"></param><param name="y"></param><param name="angle"></param></member><member name="M:dotnetCHARTING.Internal.TrigLib.ensureCorrectY(System.Single,System.Single)"><summary>
            Provided the x and y are a resulting points on an ellipse centered at 0,0. 
            This method ensure the x anx y are correct.
            </summary><param name="x"></param><param name="y"></param><param name="angle"></param></member><member name="M:dotnetCHARTING.Internal.TrigLib.angleBetweenPoints(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)"><summary>
            Angle between p2 and p3 at p1.
            </summary><param name="p1">Middle</param><param name="p2"></param><param name="p3"></param><returns></returns></member><member name="M:dotnetCHARTING.Internal.Math2D.LineIntercept(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)"><summary>
            Gets intercept of line p1,p2 and line p3,p4
            </summary><param name="p1"></param><param name="p2"></param><param name="p3"></param><param name="p4"></param><returns></returns></member><member name="M:dotnetCHARTING.Internal.Math2D.LinePointDistance(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)"><summary>
            Distance between a line and a point.
            </summary><param name="linep1"></param><param name="linep2"></param><param name="point"></param><returns></returns></member><member name="M:dotnetCHARTING.Internal.MathLib.calculateRegression(System.Double[],System.Int32)"><summary>
            Calculates regression for the given values and an extra amount of points for each direction.
            </summary><param name="values"></param><param name="extras"></param><returns></returns></member><member name="M:dotnetCHARTING.Internal.MathLib.calculateRegression(System.Double[][],System.Int32)"><summary>
            Calculates regression for multiple series.
            </summary><param name="values"></param><param name="extras"></param><returns></returns></member><member name="M:dotnetCHARTING.Internal.MathLib.calculateRegression(System.Double[],System.Double[],System.Int32)"><summary>
            Calculates scatter regression
            </summary><param name="yValues"></param><param name="xValues"></param><param name="extras"></param><returns>[0] = yValues [1] = XValues</returns></member><member name="M:dotnetCHARTING.Internal.MathLib.CalculateLinearRegression(System.String,dotnetCHARTING.Series,System.Int32)"><summary>
            Generates a trend series based on given series.
            </summary><param name="seriesName"></param><param name="series"></param><param name="extraData"></param><returns></returns></member><member name="M:dotnetCHARTING.Internal.MathLib.minimum(System.Double[])"><summary>
            Calculates high and low date times.
            </summary><param name="values"></param><param name="calculation"></param><returns></returns></member><member name="M:dotnetCHARTING.Internal.ShapeLib.InterpolatedPointGivenX(System.Drawing.PointF[],System.Single)"><summary>
            Gets an interpolated point on a curve line (must be sorted). 
            </summary><param name="curve"></param><param name="givenX"></param><returns>the point of x or PointF.Empty if not found.</returns><hiden></hiden></member><member name="M:dotnetCHARTING.Internal.HitTest.IsOverlapping(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Rectangle)"><summary>
            Determines whether rectangle overlaps the shapes in the graphics path
            </summary><param name="gp"></param><param name="r"></param><returns></returns></member><member name="M:dotnetCHARTING.Internal.HitTest.IsOverlapping(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath)"><summary>
            Determines whether the graphics paths overlap.
            </summary><param name="g"></param><param name="gp"></param><param name="gp2"></param><returns></returns></member><!-- Badly formed XML comment ignored for member "T:dotnetCHARTING.Libraries.Finance.Trading.Indicators.AccumulateDistribute" --><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.AccumulateDistribute.#ctor"><summary>
            Creates a new instance.
            </summary></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.AccumulateDistribute.AccumulationDistribution(System.Double,System.Double,System.Double)"><summary>
            The accumulation/distribution indicator illustrates the degree to which an asset is being accumulated or reduced by the market on a given period.
            </summary><remarks>
            The indicator uses the closing price's proximity to the high or low to determine if
             accumulation or reduction is taking place in the market. The proximity measure if then
             multiplied by the volume in order to give more weight to moves with correspondingly
             higher volume.
            
             <h3>Application</h3><p>A divergence between the price action and the accumulationDistribution indicator can signal
             that a trend is nearing completion, a trends continuation and imminent break-outs from trading
             ranges. The actual value of this indicator is of no significance, what is significant is its
             change in value relative to the previous periods which can warn of a possible break-out during
             a trading range (falling/rising indicator), the continuation of a trend (higher highs in uptrend,
             or lower lows in downtrend) or a change/completion of a trend (divergence between the price
             action and the direction of the indicator).</p></remarks><param name="high">The intra-period high for the given period under consideration.</param><param name="low">The intra-period low for the given period under consideration.</param><param name="volume">The days volume for the given period under consideration.</param><exception cref="T:System.ArgumentException">Thrown if any of the parameters are strictly negative numbers.</exception><seealso cref="!:accumulationDistributionPeriod">a slight variation which measures the Accumulation/Distribution over a period.</seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.AccumulateDistribute.AccumulationDistributionPeriod(System.Double[],System.Double[],System.Double[])"><summary>
            Evaluates the accumulation/distribution indicator over a number of periods.
            </summary><remarks>
            The accumulation/distribution
             indicator illustrates the degree to which an asset is being accumulated or distributed by the market over these periods.
             The indicator uses the closing price's proximity to the high or low over the period to determine if
             accumulation or reduction is taking place in the market. The proximity measure if then
             multiplied by the volume over the period in order to give more weight to moves with correspondingly
             higher volume.
            
             <h3>Interpretation</h3><p>A divergence between the price action and the AccumulationDistribution indicator can signal
             that a trend is nearing completion, a trends continuation and break-outs from trading ranges.
             The actual value of this indicator is of no significance, what is significant is its change
             in value relative to the previous periods which can warn of a possible break-out during a
             trading range (falling/rising indicator), the continuation of a trend (higher highs in uptrend,
             or lower lows in downtrend) or a change/completion of a trend (divergence between the price
             action and the direction of the indicator).</p></remarks><param name="highs">An array where the first term is the intraday high over the most recent period, the second term is the high over the previous period and so on.</param><param name="lows">An array where the first term is the intraday low over the most recent periods, the second term is the high over the previous period and so on.</param><param name="volume">An array where the first terms is the trading volume of the asset considered over the most recent periods, the second term is the volume over the previous period and on so.</param><exception cref="T:System.ArgumentException">Throw when the three arrays highs, lows, volume do not have the same length, or when any element of these three arrays is a strictly negative number.</exception><seealso cref="!:javascript:void(0);">AccumulationDistribution(double,double,double)</seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.AccumulateDistribute.AccumulateDistributionOverPeriod(System.Double[],System.Double[],System.Double[],System.Int32)"><summary>
            Evaluates the accumulation/distribution indicator for each of the (sub)collection of periods of a given length.
            </summary><remarks><p>The accumulation/distribution indicator illustrates the
             degree to which an asset is being accumulated or distributed by the market over each of these collection of periods.
             The indicator uses the closing price's proximity to the high or low over the period to determine if
             accumulation or reduction is taking place in the market. The proximity measure if then
             multiplied by the volume over the period in order to give more weight to moves with correspondingly
             higher volume.</p><h3>Interpretation</h3><p>A divergence between the price action and the AccumulationDistribution indicator can signal
             that a trend is nearing completion, a trends continuation and break-outs from trading ranges.
             The actual value of this indicator is of no significance, what is significant is its change
             in value relative to the previous periods which can warn of a possible break-out during a
             trading range (falling/rising indicator), the continuation of a trend (higher highs in uptrend,
             or lower lows in downtrend) or a change/completion of a trend (divergence between the price
             action and the direction of the indicator).</p><h3>Example</h3><p>Say for example we know that:
             <ol><li><c>Highs = {3, 4, 3, 4, 5}</c> (i.e. 3 is the latest high)</li><li><c>Lows = {2, 1, 2, 1, 3}</c> (i.e. 2 is the latest low)</li><li><c>Volume = {300, 290, 295, 285, 290}</c> (i.e. 300 is the volume in the latest period.</li></ol></p><p>Now if the <c>lengthOfPeriod</c> considered is 4, then this method will return an array
             of length two where the first term is the accumulation\distribution indicator (evaluated using
             <see cref="!:accumulationDistribution"><c>accumulationDistribution</c></see>) when:
             <ol><li><c>Highs = {3, 4, 3, 4}</c> (i.e. above highs with last element removed)</li><li><c>Lows = {2, 1, 2, 1}</c> (i.e. above highs with last element removed)</li><li><c>Volume = {300, 290, 295, 285}</c> (i.e. above highs with last element removed)</li></ol>
             and the second term is the accumulation/distribution indicator when:
             <ol><li><c>Highs = {4, 3, 4, 5}</c> (i.e. the window moves one position back)</li><li><c>Lows = {1, 2, 1, 3}</c> (i.e. the window moves one position back)</li><li><c>Volume = {290, 295, 285, 290}</c> (i.e. the window moves one position back)</li></ol></p></remarks><param name="highs">An array where the first term is the intraday high over the most recent period, the second term is the high over the previous period and so on.</param><param name="lows">An array where the first term is the intraday low over the most recent periods, the second term is the high over the previous period and so on.</param><param name="volume">An array where the first terms is the trading volume of the asset considered over the most recent periods, the second term is the volume over the previous period and on so.</param><param name="lengthOfPeriod">An integer which represents the number of periods within each of the (sub)collection of periods over which the indicator is evaluated.</param><exception cref="T:System.ArgumentException">Throw when the three arrays highs, lows, volume do not have the same length, or when any element of these three arrays is a strictly negative number.</exception><seealso cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.AccumulateDistribute.AccumulationDistribution(System.Double,System.Double,System.Double)">measure the accumulate/distribution on an asset over a single trading period.</seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.AccumulateDistribute.ChaikinOscillator(System.Double[],System.Double[],System.Double[],System.Double)"><summary>
            This method implements the Chaikin Oscillator (also known as the Chaikin A/D Oscillator) and evaluates this indicator for the latest period.
            </summary><remarks>
            The Chaiken Oscillator presents the information contained within the
             A/D indicator in the convenient form of an oscillator. That is, the Chaikin
             Oscillator is simply the Moving Average Convergence Divergence indicator (MACD)
             applied to the Accumulation/Distribution Line.
            
             <p><b>Interpretation</b><br></br>
             A sell signal is when price action develops a higher high into overbought zones and
             the Chaikin Oscillator diverges with a lower high and begins to fall. Conversely, a
             buy signal is generated when price action develops a lower low into oversold zones
             and the oscillator diverges with a higher low and begins to rise. The Chaikin Oscillator
             can also be used to time entry to existing trends by either buying the dip (when the
             oscillator turns down) or selling the rally (when the oscillator turns up).</p><h3>Evaluation</h3><p>The Chaiken Oscillator is given by:<br></br><br></br>
             EMA_3(Accumulate/Distribution) - EMA_10(Accumulate/Distribution),<br></br><br></br></p><p>where EMA_3 and EMA_10 is the exponential moving average over 3 and 10 days
             respectively; and Accumulate/Distribution is the corresponding indicator over
             those 3 or 10 days respectively.</p></remarks><param name="high">An array of 10 elements where the first term is the high in the last trading period, the second term is the high in the trading period before that, and so on.</param><param name="low">An array of 10 elements where the first term is the low in the last trading period, the second term is the low in the trading period before that, and so on.</param><param name="volume">An array of 10 elements where the first term is the volume in the last trading period, the second term is the volume in the trading period before that, and so on.</param><param name="smoothingFactor">The number between 0 and 1. The lower the number the more sensitive the moving average is.</param><exception cref="T:System.ArgumentException">Thrown when the three arrays high, low, volume do not have the same length and when the smoothing factor does not lie within the closed interval [0,1].</exception><seealso cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.AccumulateDistribute.ChaikinOscillatorOverPeriod(System.Double[],System.Double[],System.Double[],System.Double)">a slight generalization of this indicator, here the indicator may be evaluated with respect to a period of a days. This method implements the Chaikin Oscillator over a period (also known as the Chaikin A/D Oscillator).</seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.AccumulateDistribute.ChaikinOscillatorOverPeriod(System.Double[],System.Double[],System.Double[],System.Double)"><summary>
            This method implements the Chaikin Oscillator (also known as the Chaikin A/D Oscillator) and evaluates this indicator for the latest and all previous periods for which there exists sufficient data.
            </summary><remarks>
            The Chaiken Oscillator presents the
             information contained within the A/D indicator in the convenient form of an
             oscillator. That is, the Chaikin Oscillator is simply the Moving Average Convergence
             Divergence indicator (MACD) applied to the Accumulation/Distribution Line.
            
             <h3>Interpretation</h3><p>A sell signal is when price action develops a higher high into overbought zones and
             the Chaikin Oscillator diverges with a lower high and begins to fall. Conversely, a
             buy signal is generated when price action develops a lower low into oversold zones
             and the oscillator diverges with a higher low and begins to rise. The Chaikin Oscillator
             can also be used to time entry to existing trends by either buying the dip (when the
             oscillator turns down) or selling the rally (when the oscillator turns up).</p><h3>Evaluation</h3><p>The Chaiken Oscillator for a given period is given by:<br></br><br></br>
             EMA_3(Accumulate/Distribution) - EMA_10(Accumulate/Distribution),<br></br><br></br></p><p>where EMA_3 and EMA_10 is the exponential moving average over 3 and 10 days
             respectively; and Accumulate/Distribution is the corresponding indicator over
             those 3 or 10 days respectively.</p><h3>Illustration</h3><p>If we are provided within the high, low and volume over the last 15 periods, then
             we will be able to evaluate the Chaikin Oscillator on the previous 5 trading days.
             Since the evaluation of the oscillator on a given period requires knowledge of the
             10 previous periods data.</p></remarks><param name="high">An array of at least 10 elements where the first term is the high in the last trading period, the second term is the high in the trading period before that, and so on.</param><param name="low">An array of at least 10 elements where the first term is the low in the last trading period, the second term is the low in the trading period before that, and so on.</param><param name="volume">An array of at least 10 elements where the first term is the volume in the last trading period, the second term is the volume in the trading period before that, and so on.</param><param name="smoothingFactor">The number between 0 and 1. The lower the number the more sensitive the indicator is.</param><exception cref="T:System.ArgumentException">Thrown when the three arrays high, low, volume do not have the same length and when the smoothing factor does not lie within the closed interval [0,1].</exception><returns>an array where the first term is the value of the oscillator using the last 10 days data, the previous term is the value of the oscillator on the previous period and so on.</returns><seealso cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.AccumulateDistribute.ChaikinOscillator(System.Double[],System.Double[],System.Double[],System.Double)"></seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.AccumulateDistribute.ChaikinMoneyFlow(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Chaikin Money Flow (CMF) is a volume weighted average of Accumulation/Distribution over a specified period, which is usually taken to be 21 days.
            </summary><remarks>
            The CMF offers a volume weighted
             indicator on the following two principles:
             <p><ul><li> The nearer the close is to the high the more accumulation is taking place.</li><li> The nearer the close is to the low the more distribution is taking place.</li></ul></p><h3>Interpretation</h3><p>A sell signal is generated in positive over brought territory when higher highs diverge into a lower
             high and the indicator continues to decrease. Conversely, a buy signal in generated in negative
             oversold territory when lower lows diverge into a high low and the indicator continues to increase.</p><p>The CMF indicator can be used as a confirmation signal after a breakout of a trading range. When
             a market breaks higher then the breakout is confirmed if the CMF moves into positive territory
             and continues to get stronger. Conversely, if the market down after a trading range then the breakout
             if confirmed if the CMF move into negative territory and continues to weaken.</p><h3>Evaluation</h3><p>The CMF indicator is evaluated for the following steps:
             <ul><li> Evaluate the Volume Weighted Accumulation/Distribution over each of the days within the
             period considered for the calculation. The Volume Weighted Accumulation/Distribution on each
             day is given by:<br></br><br></br>
             (((Close - Low)-(High - Close))/(High - Low)) * Volume</li><li> Sum the Volume Weighted Accumulation/Distribution over the period and the divide the
             result by the sum of the volume over the period.</li></ul></p></remarks><param name="high">An array where the first term in the high in the latest trading period and the second term is the high in the previous trading periods and so on... Until the last term which is the highest market price during the first period which is used in the evaluation of the CMF indicator.</param><param name="low">An array where the first term in the low in the latest trading period and the second term is the low in the previous trading periods and so on... Until the last term which is the lowest market price during the first period which is used in the evaluation of the CMF indicator.</param><param name="closing">An array where the first term is the closing price in the latest trading period and the second term is the closing price in the previous trading periods and so on... Until the last term which is the closing price during the first period which is used in the evaluation of the CMF indicator.</param><param name="volume">An array where the first term in the volume in the securities latest trading period and the second term is the securities volume in the previous trading periods and so on... Until the last term which is the securities volume during the first period which is used in the evaluation of the CMF indicator.</param><exception cref="T:System.ArgumentException">Thrown if the arrays high, low, close, volume do not have the same length or if any element of these arrays is a strictly negative number.</exception><seealso cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.AccumulateDistribute.ChaikinMoneyFlowOverPeriod(System.Double[],System.Double[],System.Double[],System.Double[],System.Int32)">a slight generalization of this indicator, in that here we iteratively evaluate the Chaikin Money Flow (CMF) indicator over periods.</seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.AccumulateDistribute.ChaikinMoneyFlowOverPeriod(System.Double[],System.Double[],System.Double[],System.Double[],System.Int32)"><summary>
            Iteratively evaluate the Chaikin Money Flow (CMF) indicator over all (sub)collections of periods of a given length for all periods for which data is provided.
            </summary><remarks>
            In particular, this method returns
             an array where the 1st term of the CMF indicator for the latest period, the second term of the CMF
             in the previous period and so on. Please note that the CMF will be evaluated for all periods for
             which there is sufficient data (see example below for more details).
            
             <p><b>Remark:</b> The form in which the Chaikin Money Flow (CMF) in provided here is
             particularly suitable when wishing to integrated this functionality within a Client side
             GUI Charting Application.</p><h3>Details of Chaikin Money Flow (CMF)</h3><p>Chaikin Money Flow (CMF) is a volume weighted average of Accumulation/Distribution over
             a specified period, which is usually taken to be 21 days. The CMF offers a volume weighted
             indicator on the following two principles:
             <ul><li> The nearer the close is to the high the more accumulation is taking place.</li><li> The nearer the close is to the low the more distribution is taking place.</li></ul></p><h3>Evaluation</h3><p>The CMF indicator is evaluated for the following steps:
             <ul><li> Evaluate the Volume Weighted Accumulation/Distribution over each of the days within the
             period considered for the calculation. The Volume Weighted Accumulation/Distribution on each
             day is given by:<br></br><br></br>
             (((Close - Low)-(High - Close))/(High - Low)) * Volume</li><li> Sum the Volume Weighted Accumulation/Distribution over the period and the divide the
             result by the sum of the volume over the period.</li></ul></p><h3>Example of Application</h3><p>Within this example we illustrate the way this method works when we consider a given 10
             period in which the length of period over which the CHM is evaluated is 4. In this case
             the result will be an array of 7 elements as follows:
             <ul><li> result[0]: CMF calculated over the last four periods
             </li><li> result[1]: CMF calculated over previous four periods
             </li><li> ...
             </li><li> result[7]: CMF calculated using the periods between the earliest period and the fourth from
             earliest period.
             </li></ul></p></remarks><param name="high">An array where the first term in the high in the latest trading period and the second term is the high in the previous trading periods and so on... Until the last term which is the highest market price during the first period which is used in the evaluation of the CMF indicator.</param><param name="low">An array where the first term in the low in the latest trading period and the second term is the low in the previous trading periods and so on... Until the last term which is the lowest market price during the first period which is used in the evaluation of the CMF indicator.</param><param name="closing">An array where the first term is the closing price in the latest trading period and the second term is the closing price in the previous trading periods and so on... Until the last term which is the closing price during the first period which is used in the evaluation of the CMF indicator.</param><param name="volume">An array where the first term in the volume in the securities latest trading period and the second term is the securities volume in the previous trading periods and so on... Until the last term which is the securities volume during the first period which is used in the evaluation of the CMF indicator.</param><param name="lengthOfPeriod">An integer which represents the number of periods over which the indicator is calculated.</param><exception cref="T:System.ArgumentException">Thrown if the arrays high, low, close, volume do not have the same length or if any element of these arrays is a strictly negative number.</exception><seealso cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.AccumulateDistribute.ChaikinMoneyFlow(System.Double[],System.Double[],System.Double[],System.Double[])">evaluates the Chaikin Money Flow for the last period only.</seealso></member><member name="T:dotnetCHARTING.AnalysisEngine.Implementation.FinancialAcumulateDistributeOverPeriod"><summary>
            Evaluates the accumulation/distribution indicator for each of the (sub)collection of periods of 
            a given length.
            </summary><remarks></remarks></member><!-- Badly formed XML comment ignored for member "T:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Aroon" --><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Aroon.#ctor"><summary>
            Creates a new instance.
            </summary></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Aroon.AroonUp(System.Double[])"><summary>
            Evaluates the Aroon Up indicator which measures the relative time since the last highest high.
            </summary><remarks>
            The indicator will return a value between 0 and 100, where a higher
             value indicates that the highest high was achieved more recently. Persistent
             values between 70 and 100 are said to indicate strength in the asset and in
             conjunction with a low range (i.e. 0-30) in the Aroon Down indicator,
             indicates an upward trend.
            
             <h3>Evaluation of the Aroon Up Indicator</h3><p>The Aroon Up indicator is given by:<br></br><br></br>
             100(n - (number of periods since last highest high over n periods))/n<br></br><br></br>
             where n is the number of periods being considered (a reasonable default value for n is 14).</p></remarks><param name="highs">An array of the trading highs over the last n-periods where the k-th terms of the array if the trading high on the k-th previous period.</param><exception cref="T:System.ArgumentException">Thrown is the `highs' array is empty.</exception><seealso cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Aroon.AroonUpOverPeriod(System.Double[],System.Int32)">This indicator is a generalization of this indicator and calculates the values of the Aroon Up indicator over all sub-periods of a given length for all possible periods for which sufficient historical data is provided.</seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Aroon.AroonUpOverPeriod(System.Double[],System.Int32)"><summary>
            Evaluates the Aroon Up indicator which measures the relative time since the last highest high for all periods for which sufficient data is provided.
            </summary><remarks>
            This indicator
             for each period will return a value between 0 and 100, where a higher
             value indicates that the highest high was achieved more recently. Persistent
             values between 70 and 100 are said to indicate strength in the asset and in
             conjunction with a low range (i.e. 0-30) of the Aroon Down indicator,
             indicates an upward trend.
            
             <h3>Evaluation of the Aroon Up Indicator</h3><p>The Aroon Up indicator for each period is given by:<br></br><br></br>
             100(n - (number of periods since last highest high over n periods))/n<br></br><br></br>
             where n is the number of periods being considered (a reasonable default value for
             n is 14).</p></remarks><param name="highs">An array of the trading highs over the last n-periods where the k-th term of the array if the trading high on the k-th previous period.</param><param name="period">An integer which represents the length of the period over which the indicator will be iteratively evaluated.</param><exception cref="T:System.ArgumentException">Thrown is the `highs' array is empty, the <c>period</c> is not a strictly positive integer or if it is greater than the length of the array <c>lows</c>.</exception><returns>Returns of double array where the first term is the values of the Aroon Up indicator over the earliest set of consecutive periods and the second term is the value of the next set of the periods (i.e. the windows is moving one place along), and so on.</returns><seealso cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Aroon.AroonUp(System.Double[])">This indicator is a special case of this indicator and calculates the Aroon Up indicator for a single period.</seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Aroon.AroonDown(System.Double[])"><summary>
            Calculates the Aroon Down indicator which measures the relative time since the last lowest low for all periods for which sufficient data is provided.
            </summary><remarks>
            This indicator for each period
             will return a value between 0 and 100, where a higher value
             indicates that the lowest low was achieved more recently. Persistent values
             between 70 and 100 are said to indicate weakness in the asset and in conjunction
             with a low range (i.e. 0-30) in the Aroon Up indicator, indicates an downward trend.
            
             <h3>Evaluation of the Aroon Down Indicator</h3><p>The Aroon Down indicator is given by:<br></br><br></br>
             100(n - (number of periods since last highest high over n periods))/n<br></br><br></br>
             where n is the number of periods being considered (a reasonable default value for n is 14).</p></remarks><param name="lows">An array of the trading lows over the last n-periods where the k-th terms of the array if the trading low on the k-th previous period.</param><exception cref="T:System.ArgumentException">Thrown when the `lows' array is empty.</exception><seealso cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Aroon.AroonUpOverPeriod(System.Double[],System.Int32)">This indicator is a generalization of this indicator and calculates the values of the Aroon Up indicator over all sub-periods of a given length for all possible periods for which sufficient historical data is provided.</seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Aroon.AroonDownOverPeriod(System.Double[],System.Int32)"><summary>
            Calculates the Aroon Down indicator which measures the relative time since the last lowest low for all periods for which sufficient data is provided.
            </summary><remarks>
            The indicator for each period
             will return a value between 0 and 100, where a higher value indicates that the lowest low
             was achieved more recently. Persistent values between 70 and 100 are said to indicate
             weakness in the asset and in conjunction with a low range (i.e. 0-30) in the Aroon Up
             indicator, indicates an downward trend.
            
             <h3>Evaluation of the Aroon Down Indicator</h3><p>The Aroon Down indicator for each period is given by:<br></br><br></br>
             100(n - (number of periods since last highest high over n periods))/n<br></br><br></br>
             where n is the number of periods being considered (a reasonable default value for n is 14).</p></remarks><param name="lows">An array where the first term is the traded high of the asset within the most recent trading period, the second term is the traded high of the asset within the previous period and so on.</param><param name="lengthOfPeriod">An integer which represents the length of the period over which the indicator will be iteratively evaluated.</param><exception cref="T:System.ArgumentException">Thrown when the `lows' array is empty, the <c>lengthOfPeriod</c> is not a strictly positive integer or if it is greater than the length of the array <c>lows</c>.</exception><seealso cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Aroon.AroonDown(System.Double[])">This indicator is a special case of this indicator and calculates the Aroon Down indicator for a single period.</seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Aroon.AroonOscillator(System.Double,System.Double)"><summary>
            Evaluates the Aroon Oscillator over the given period.
            </summary><remarks><h3>Evaluation of the Aroon Oscillator</h3><p>The Aroon Oscillator over a given period is evaluated using the following
             formulae:<br></br><br></br>
             Aroon Oscillator = (Aroon Up Indicator) - (Aroon Down Indicator)<br></br><br></br>
             where `Aroon Up Indicator' can be evaluated using <see cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Aroon.AroonUp(System.Double[])"><c>AroonUp</c></see>, and
             `Aroon Down Indicator' can be evaluated using <see cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Aroon.AroonDown(System.Double[])"><c>AroonDown</c></see>.</p></remarks><param name="aroonUp">The value of the Aroon Up Indicator which can be evaluated using <see cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Aroon.AroonUp(System.Double[])"><c>AroonUp</c></see>.</param><param name="aroonDown">The value of the Aroon Down Indicator which can be evaluated using <see cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Aroon.AroonDown(System.Double[])"><c>AroonDown</c></see>.</param><seealso cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Aroon.AroonOscillatorOverPeriod(System.Double[],System.Double[])">Evaluates the Aroon Oscillator over all periods for which sufficient historical data is provided.</seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Aroon.AroonOscillatorOverPeriod(System.Double[],System.Double[])"><summary>
            Evaluates the Aroon Oscillator over all periods where sufficient historical data is provided.
            </summary><remarks><h3>Evaluation of the Aroon Oscillator</h3><p>The Aroon Oscillator over each period is evaluated using the following
             formulae:<br></br><br></br>
             Aroon Oscillator = (Aroon Up Indicator) - (Aroon Down Indicator)<br></br><br></br>
             where `Aroon Up Indicator' can be evaluated using <see cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Aroon.AroonUp(System.Double[])"><c>AroonUp</c></see>, and
             `Aroon Down Indicator' can be evaluated using <see cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Aroon.AroonDown(System.Double[])"><c>AroonDown</c></see>.</p></remarks><param name="aroonUp">An array where the first term is the Aroon Up Oscillator over the most recent period, the second term of the oscillator over the previous period and so on. Please note that the value of the Aroon Up Indicator over each period can be evaluated using <see cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Aroon.AroonUp(System.Double[])"></see>, alternatively you may evaluate the indicator over all periods using <see cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Aroon.AroonUpOverPeriod(System.Double[],System.Int32)"><c>AroonUpOverPeriod</c></see>.</param><param name="aroonDown">An array where the first term is the Aroon Down indicator over the most recent period, the second term of the Aroon Down indicator over the previous period and so on. Please note that the value of the Aroon Down Indicator over each period can be evaluated using <see cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Aroon.AroonDown(System.Double[])"></see>, alternatively you may evaluate the indicator over all periods for the data provided using <see cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Aroon.AroonDownOverPeriod(System.Double[],System.Int32)"><c>AroonDownOverPeriod</c></see>.</param><exception cref="T:System.ArgumentException">Thrown when the array parameters <c>aroonUp</c> and <c>aroonDown</c> are empty or the lengths of these two arrays are not equal.</exception><returns>an array where the first term is the value of the Aroon Oscillator for the most recent period, the second term is the value of the Aroon Oscillator for the previous period and so on.</returns></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Aroon.AroonOscillator(System.Double[],System.Double[])"><summary>
            Evaluates the Aroon Oscillator over the a period.
            </summary><remarks><h3>Evaluation of the Aroon Oscillator</h3><p>The Aroon Oscillator over each period is evaluated using the following
             formulae:<br></br><br></br>
             Aroon Oscillator = (Aroon Up Indicator) - (Aroon Down Indicator)<br></br><br></br>
             where `Aroon Up Indicator' can be evaluated using <see cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Aroon.AroonUp(System.Double[])"><c>AroonUp</c></see>, and
             `Aroon Down Indicator' can be evaluated using <see cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Aroon.AroonDown(System.Double[])"><c>AroonDown</c></see>.</p></remarks><param name="lows">An array where the first term is the traded low of the asset within the most recent trading period, the second term is the traded low of the asset within the previous period and so on.</param><param name="highs">An array where the first term is the traded high of the asset within the most recent trading period, the second term is the traded high of the asset within the previous period and so on.</param><exception cref="T:System.ArgumentException">Thrown when the array parameters <c>lows</c> and <c>highs</c> are empty or the lengths of these two arrays are not equal.</exception><seealso cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Aroon.AroonOscillatorOverPeriod(System.Double[],System.Double[])">(double[], double[], int) calculates the values of the Aroon Oscillator indicator over all sub-periods of a given length.</seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Aroon.AroonOscillatorOverPeriod(System.Double[],System.Double[],System.Int32)"><summary>
            Evaluates the Aroon Oscillator over all periods where sufficient historical data is provided.
            </summary><remarks><h3>Evaluation of the Aroon Oscillator</h3><p>The Aroon Oscillator over each period is evaluated using the following
             formulae:<br></br><br></br>
             Aroon Oscillator = (Aroon Up Indicator) - (Aroon Down Indicator)<br></br><br></br>
             where `Aroon Up Indicator' and `Aroon Down Indicator' are evaluated using.</p><p>The Aroon Up indicator is given by:<br></br><br></br>
             100(n - (number of periods since last highest high over n periods))/n<br></br><br></br>
             where n is the number of periods being considered (a reasonable default value for n is 14).</p><p>The Aroon Down indicator is given by:<br></br><br></br>
             100(n - (number of periods since last highest high over n periods))/n<br></br><br></br>
             where n is the number of periods being considered (a reasonable default value for n is 14).</p></remarks><param name="lows">An array where the first term is the traded low of the asset within the most recent trading period, the second term is the traded low of the asset within the previous period and so on.</param><param name="highs">An array where the first term is the traded high of the asset within the most recent trading period, the second term is the traded high of the asset within the previous period and so on.</param><param name="lengthOfPeriod">An integer which represents the length of the period over which the indicator will be iteratively evaluated.</param><exception cref="T:System.ArgumentException">Thrown when the `lows' or 'highs' array is empty or not equal, the <c>lengthOfPeriod</c> is not a strictly positive integer or if it is greater than the length of the array <c>lows</c>.</exception><returns>an array where the first term is the value of the Aroon Oscillator for the most recent period, the second term is the value of the Aroon Oscillator for the previous period and so on.</returns></member><member name="T:dotnetCHARTING.Forecasting.Avevar"><summary>
            Given array data[0..n-1], returns its mean as ave and its variance as var.
            </summary></member><member name="T:dotnetCHARTING.Libraries.Finance.Trading.Indicators.BollingerBands"><summary>
            Within this class we offer procedures which evaluate the upper and lower Bollinger Bands.
            </summary><remarks><h3>Further Details</h3><p>Bollinger Bands are a type of envelope that are plotted at standard
             deviation levels above and below the corresponding (simple) moving average. This
             produces an effect of having the bands widen during periods of higher
             volatility and contract during less volatile periods. Bollinger Bands
             indicate the relative supply and demand for a given asset. If the asset to
             move close to the top of the envelope then it indicates that there is
             strong demand for the asset, conversely if the asset hugs the bottom of
             the trading range then it indicates that there is oversupply of the asset.</p><p>Since the Bollinger Bands will nearly always be combined with other
             indicators when forming a trading system the number of periods used in the
             evaluation of the standard deviation of the stocks and the moving average
             will vary. For those without design restrictions a popular choice of
             the number of time periods is around 20-23.</p></remarks></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.BollingerBands.#ctor"><summary>
            Creates a new instance.
            </summary></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.BollingerBands.LowerBollingerBands(System.Double[],System.Double,System.Int32)"><summary>
            Evaluates the position of the Lower Bollinger Band for a given standard deviation level.
            </summary><remarks>
            Please note that by standard
             deviation level we not only refer to the number of standard
             deviations shifts away from the moving average at which the Higher
             Bollinger Band is drawn but also the number of time series points
             which are used in the evaluation of the standard deviation and the
             moving average.<br></br></remarks><param name="prices">An array of doubles where the first term correspond the latest periods price and the previous element is the value of the element before that and so on... The length of this array is equal to the number of periods used in the evaluation of the standard deviation and the moving average.</param><param name="standardDeviationLevel">The number of standard deviation which the lower band in shifted from the moving average.</param><param name="lengthOfMA">The length of the moving average used within the evaluation of the Bollinger Bands. Note that this also corresponds to the length of the period over which the standard deviation is evaluated.</param><exception cref="T:System.ArgumentException">Thrown when the Prices array in empty or the number of standard deviations considered (i.e. the parameters standardDeviationLevel) is not positive number.</exception><returns>An array where the first term corresponds to the value of the Upper Bollinger Band for the latest periods, the second terms to the previous period and so on.</returns></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.BollingerBands.UpperBollingerBands(System.Double[],System.Double,System.Int32)"><summary>
            Evaluates the position of the Upper Bollinger Band for a given standard deviation level.
            </summary><remarks>
            Please note that by standard
             deviation level we not only refer to the number of standard
             deviations shifts away from the moving average at which the Higher
             Bollinger Band is drawn but also the number of time series points
             which are used in the evaluation of the standard deviation and the
             moving average.<br></br></remarks><param name="prices">An array of doubles where the first term correspond the latest periods price and the previous element is the value of the element before that and so on... The length of this array is equal to the number of periods used in the evaluation of the standard deviation.</param><param name="standardDeviationLevel">The (positive) number of standard deviations which the lower band in shifted from the moving average.</param><param name="lengthOfMA">The length of the moving average used within the evaluation of the Bollinger Bands. Note that this also corresponds to the length of the period over which the standard deviation is evaluated.</param><exception cref="T:System.ArgumentException">Throw if the array historicalPrices is empty or if the number of standard deviations given (i.e. the parameter standardDeviationsLevel) is a negative number.</exception><returns>An array where the first term corresponds to the value of the Upper Bollinger Band for the latest periods, the second terms to the previous period and so on.</returns></member><member name="T:dotnetCHARTING.Forecasting.Brent"><summary>
            Given a function f, and given a bracketing triplet of abscissas ax, bx, cx (such that bx is
            between ax and cx, and f(bx) is less than both f(ax) and f(cx)), this routine isolates
            the minimum to a fractional precision of about tol using Brent¡¯s method. The abscissa of
            the minimum is returned as Minimum, and the minimum function value is returned as brent, the
            returned function value.
            </summary></member><member name="T:dotnetCHARTING.Forecasting.Chixy"><summary>
            Created to assist us in he LinearWithError alghoritm
            </summary></member><member name="T:dotnetCHARTING.Forecasting.Function"><summary> This interface represents a one space variable function.
            It contains one method which returns the value at a certain point. 
            </summary></member><member name="M:dotnetCHARTING.Forecasting.Function.getValueAt(System.Double)"><summary> Returns the value of the function in <c>x</c>.
            </summary></member><member name="T:dotnetCHARTING.Libraries.Statistics.Correlation.Correlation"><summary> This is the stateless version of the Correlation and Regression :service:.
            </summary></member><member name="M:dotnetCHARTING.Libraries.Statistics.Correlation.Correlation.SampleVarianceY(System.Double[])"><seealso cref="!:">#sampleVarianceX
            </seealso></member><member name="M:dotnetCHARTING.Libraries.Statistics.Correlation.Correlation.MeanY(System.Double[])"><seealso cref="!:">#meanX
            </seealso></member><member name="T:dotnetCHARTING.Libraries.Statistics.Correlation.CorrelationStateful"><summary>
            This is the Correlation and Regression :service:.
            </summary></member><member name="T:dotnetCHARTING.Forecasting.Covsrt"><summary>
            Expand in storage the covariance matrix covar, so as to take into account parameters that are
            being held fixed. (For the latter, return zero covariances.)
            </summary></member><member name="T:dotnetCHARTING.Forecasting.CurveFittingException"><summary> This is the Curve Fitting class exception.</summary></member><member name="T:dotnetCHARTING.Forecasting.Cyclic"><summary> This interface represents a one space variable function. It contains one
            method which returns the value at a certain point of an array of function.
            </summary></member><member name="T:dotnetCHARTING.Forecasting.FunctionBasis"><summary> This interface represents a one space variable function. It contains one
            method which returns the value at a certain point of an array of function.
            </summary></member><member name="M:dotnetCHARTING.Forecasting.FunctionBasis.GetValueAt(System.Double)"><summary> Returns a double array which represents the values of the functions in <code>x</code>.
            y(x)= a0f0(x) + a1f1(x) + a2f2(x) + ... + amfm(x)
            
            </summary></member><member name="M:dotnetCHARTING.Forecasting.Cyclic.GetValueAt(System.Double)"><summary> Returns a double array which represents the values of the functions in <code>x</code>.
            y(x)= sin (n[0]*x + t[0]) + cos (n[1]*x +t[1]) + constant
            
            </summary></member><!-- Badly formed XML comment ignored for member "T:dotnetCHARTING.Libraries.Finance.Trading.Indicators.DirectionalMovementIndicator" --><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.DirectionalMovementIndicator.#ctor"><summary>
            Creates a new instance.
            </summary></member><!-- Badly formed XML comment ignored for member "M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.DirectionalMovementIndicator.ClassifyMovements(System.Double,System.Double,System.Double,System.Double)" --><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.DirectionalMovementIndicator.PositiveDirectionalMovement(System.Double,System.Double,System.Double,System.Double)"><summary>
            Evaluates the Positive Directional Movement (PDM).
            </summary><param name="todaysHigh">The highest traded value which the asset under consideration takes during todays market action.</param><param name="todaysLow">The lowest traded value which the asset under consideration takes during todays market action.</param><param name="yesterdaysHigh">The highest traded value which the asset under consideration takes during yesterdays market action.</param><param name="yesterdaysLow">The lowest traded value which the asset under consideration takes during yesterdays market action.</param><exception cref="T:System.ArgumentException">Thrown if any of the parameters todaysHigh, todaysLow, yesterdaysHigh or yesterdaysLow is a strictly negative number.</exception></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.DirectionalMovementIndicator.MinusDirectionalMovement(System.Double,System.Double,System.Double,System.Double)"><summary>
            Evaluates the Minus Directional Movement (MDM).
            </summary><param name="todaysHigh">The highest traded value which the asset under consideration takes during todays market action.</param><param name="todaysLow">The lowest traded value which the asset under consideration takes during todays market action.</param><param name="yesterdaysHigh">The highest traded value which the asset under consideration takes during yesterdays market action.</param><param name="yesterdaysLow">The lowest traded value which the asset under consideration takes during yesterdays market action.</param><exception cref="T:System.ArgumentException">Thrown if any of the parameters todaysHigh, todaysLow, yesterdaysHigh or yesterdaysLow is a strictly negative number.</exception></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.DirectionalMovementIndicator.TrueRange(System.Double,System.Double,System.Double)"><summary>
            Finds the True Range (TR) of a traded asset today.
            </summary><remarks>
            Also, described as the True Range (TR)
             of the current bar.
            </remarks><param name="todaysHigh">The highest traded value of the asset today.</param><param name="todaysLow">The lowest traded value of the asset today.</param><param name="yesterdaysClose">The closing price of the asset on the preceding day.</param><exception cref="T:System.ArgumentException">Thrown if any of the parameters todaysHigh, todaysLow or yesterdaysClose is a strictly negative number.</exception><seealso cref="!:averageDailyTrueRange"></seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.DirectionalMovementIndicator.TrueRangePeriod(System.Double[],System.Double[],System.Double[])"><summary>
            Finds the True Range (TR) of a traded asset.
            </summary><remarks>
            Also, described as the True Range (TR)
             of the current bar. This function is a generalization of the <see cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.DirectionalMovementIndicator.TrueRange(System.Double,System.Double,System.Double)"><c>TrueRange</c></see>
             method
            </remarks><param name="highs">A double array where a first term contains the value of the highest traded price during the last trading period considered, the second terms contains the highest traded price in the previous trading periods and on so.</param><param name="lows">A double array where a first term contains the value of the lowest traded price during the last trading period considered, the second terms contains the lowest traded price in the previous trading periods and on so.</param><param name="closing">A double array where a first term contains the value of the closing price during the last trading period considered, the second terms contains the closing price in the previous trading periods and on so.</param><exception cref="T:System.ArgumentException">Thrown if the length of the array parameters <c>high</c>, <c>low</c> or <c>closing</c>, is not the same or if any elements of any one of these array's has a negative element.</exception><seealso cref="!:trueRange"></seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.DirectionalMovementIndicator.AverageDailyTrueRange(System.Double[])"><summary>
            We evaluate the x-day Average Daily True Range (ADTR) of an asset over a period.
            </summary><remarks>
            This measure
             is often used as a measure of volatility. The ADTR is the simple moving average of daily true
             values.
            </remarks><param name="trueRange">An array of (positive) doubles of length x, where the first element is the true range on the last trading session, the second value of the true range range on the previous trading session and so on.</param><exception cref="T:System.ArgumentException">Thrown if any element of the array is strictly negative. The elements of the trueRange array cannot be strictly negative since they represent the (positive) true range's (TRs) of an asset over a period.</exception><seealso cref="!:trueRange"></seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.DirectionalMovementIndicator.PlusDirectionalMovement(System.Double,System.Double)"><summary>
            Calculates the Plus Directional Movement Indicator (DMI) of todays price action.
            </summary><param name="trueRange">The true range of the Current Bar (i.e. todays).</param><param name="positiveDirectionalMovement">The positive directional movement of the asset over the past day.</param><exception cref="T:System.ArgumentException">Thrown if the trueRange is not positive.</exception><seealso cref="!:trueRange"></seealso><seealso cref="!:positiveDirectionalMovement"></seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.DirectionalMovementIndicator.MinusDirectionalMovement(System.Double,System.Double)"><summary>
            Evaluates the Minus Directional Movement Indicator (DMI).
            </summary><param name="trueRange">The true range of the Current Bar (i.e. todays).</param><param name="minusDirectionalMovement">The minus directional movement of the asset over the past day.</param><exception cref="T:System.ArgumentException">Thrown if the trueRange is not positive.</exception><seealso cref="!:trueRange"></seealso><seealso cref="!:minusDirectionalMovement"></seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.DirectionalMovementIndicator.PlusDirectionalMovement(System.Double,System.Double,System.Double,System.Double,System.Double)"><summary>
            Evaluates the Plus Directional Movement Indicator (DMI).
            </summary><param name="todaysHigh">The highest traded value which the asset under consideration takes during todays market action.</param><param name="todaysLow">The lowest traded value which the asset under consideration takes during todays market action.</param><param name="yesterdaysHigh">The highest traded value which the asset under consideration takes during yesterdays market action.</param><param name="yesterdaysLow">The lowest traded value which the asset under consideration takes during yesterdays market action.</param><param name="yesterdaysClose">The close price of the asset the preceding day.</param><exception cref="T:System.ArgumentException">Thrown if any of the parameters todaysHigh, todaysLow, yesterdaysHigh, yesterdaysLow or yesterdaysClose is not a positive number.</exception></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.DirectionalMovementIndicator.MinusDirectionalMovement(System.Double,System.Double,System.Double,System.Double,System.Double)"><summary>
            Evaluates the Minus Directional Movement Indicator (DMI).
            </summary><param name="todaysHigh">The highest traded value which the asset under consideration takes during todays market action.</param><param name="todaysLow">The lowest traded value which the asset under consideration takes during todays market action.</param><param name="yesterdaysHigh">The highest traded value which the asset under consideration takes during yesterdays market action.</param><param name="yesterdaysLow">The lowest traded value which the asset under consideration takes during yesterdays market action.</param><param name="yesterdaysClose">The close price of the asset the preceding day.</param><exception cref="T:System.ArgumentException">Thrown if any of the parameters todaysHigh, todaysLow, yesterdaysHigh, yesterdaysLow or yesterdaysClose is not a positive number.</exception></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.DirectionalMovementIndicator.DirectionalMotion(System.Double,System.Double,System.Double,System.Double,System.Double)"><summary>
            Evaluates the Directional Movement Indicator (DMI).
            </summary><remarks>
            When a trend is moving with
             strength, the directional indicator (ADX) will measure the strength of the trend
             by measuring the spread between the Plus directional Indicator (PDI) and Minus
             Directional Indicator (MDI).
            
             <h3>Evaluation of the Directional Movement Indicator</h3><p>The Directional Movement Indicator (DMI) can be summarized by the following
             formula:<br></br><br></br>
            	((PDM - MDM)/(PDP + MDM)) * 100,<br></br><br></br>
             where,
             <ul><li> PDM = Plus Directional Movement (PDM) indicator</li><li> MDM = Minus Directional Movement (MDM) indicator</li></ul></p><h4>Interpretation</h4><p>The Directional movement indicator has a range of [0,100], where to higher the
             value returned the stronger the trend is said to be. If a trend is reliable then
             the directional lines (PDM and MDM) will diverge and the indicator will increase.
             If on the other hand a trend starts to fail and price whip-saws (for example with
             price is within a trading range) the difference between the direction lines will
             decrease and the overall index will decrease.</p></remarks><param name="todaysHigh">The highest traded value which the asset under consideration takes during todays market action.</param><param name="todaysLow">The lowest traded value which the asset under consideration takes during todays market action.</param><param name="yesterdaysHigh">The highest traded value which the asset under consideration takes during yesterdays market action.</param><param name="yesterdaysLow">The lowest traded value which the asset under consideration takes during yesterdays market action.</param><param name="yesterdaysClose">The closing price of the asset the preceding day.</param><exception cref="T:System.ArgumentException">Thrown if any of the parameters todaysHigh, todaysLow, yesterdaysHigh, yesterdaysLow or yesterdaysClose is not a positive number.</exception><seealso cref="!:plusDirectionalMovement"></seealso><seealso cref="!:minusDirectionalMovement"></seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.DirectionalMovementIndicator.DirectionalMotion(System.Double,System.Double)"><summary>
            Calculates the Directional Indicator forms the main part of the Directional Movement System developed by Wellas Wilder.
            </summary><remarks>
            This indicator is generally evaluated using 14 periods and is used
             with the <see cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.DirectionalMovementIndicator.PlusDirectionalMovement(System.Double,System.Double)"><c>PlusDirectionalMovement</c></see> and
             <see cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.DirectionalMovementIndicator.MinusDirectionalMovement(System.Double,System.Double,System.Double,System.Double)"><c>MinusDirectionalMovement</c></see> indicators.
            
             <h3>Evaluation of the Directional Movement System</h3><p>The directional movement indicator can be summarized by the following formula:<br></br><br></br>
            	((up - down)/(up+down)) * 100,<br></br><br></br>where,
             <ul><li> up = Plus Directional Movement (PDM) indicator</li><li> down = Minus Directional Movement (MDM) indicator</li></ul></p><h4>Interpretation</h4><p>The directional indicator has a range of [0,100], where to higher the value returned the
             stronger the trend is said to be. If a trend is reliable then the smoothed directional lines
             (PDM and MDM) will diverge and the indicator will increase. If on the other hand a trend starts
             to fail and price whip-saws (for example with price is within a trading range) the difference
             between the smoothed direction lines will decrease and the overall index will decrease.</p></remarks><param name="plusDirectionalMovement">The value of the Plus Directional Movement indicator.</param><param name="minusDirectionalMovement">The value of the Minus Directional Movement indicator.</param><seealso cref="!:plusDirectionalMovement"></seealso><seealso cref="!:minusDirectionalMovement"></seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.DirectionalMovementIndicator.DmiSignal(System.Double[],System.Double[],System.Int32)"><summary>
            Evaluates what is know as the Directional Motion Indicator (MDI) Trading Signal.
            </summary><remarks>
            This signal determines whether a given asset or index should be sold, brought or no
             action should be taken for a given asset under consideration. This trading signal
             forms the basis of the DMI Trading System which was developed by Welles Wilder.
            
             <p>At its simplest level to DMI system states that when the PDI crosses above the MDI a
             buy signal is generated and when the MDI crosses above the PMI then a sell signal is
             generated. This however may generate an excessive number of signals and hence we offer
             the possibility to smooth out these indicators according to a moving average which will
             help to reduce to sensitivity of the trading system.</p><h4>Advantages to this Approach</h4><p>This trading approach will reveal a trend before it is detected by most market
             participants. Once the trend becomes more widely recognized other market participants
             will tend to buy the tend and hence re-enforcing the trend dynamics. Hence the DMI
             system offers a good risk/reward trend following system.</p></remarks><param name="pdi">An array of the previous values of the positive directional indicator (PDI), where the length of the array is ONE MORE than the number of periods used within the moving average. Where pdi[0] is the latest value of the PDI indicator, pdi[1] is the previous value and so on.</param><param name="mdi">An array of the previous values of the minus directional indicator (MDI), where the length of the array is ONE MORE than the number of periods used within the moving average. Where mdi[0] is the latest value of the MDI indicator, mdi[0] is the previous value and so on.</param><param name="method">An integer which determines the method used in the evaluation of the moving average in accordance with the following key: <ol type="1"><li> Simple Moving Average</li><li> Geometric Moving Average</li><li> Linearly Weighted Moving Average</li><li> Exponentially Weighted Moving Average with a smoothing weight of 0.5</li></ol><p><b>Remark:</b> The length of the array <c>pdi</c> and <c>mdi</c>, must be identical.</p>.</param><returns>this method returns <c>-1</c>, <c>0</c>, or <c>1</c>; according to whether a sell, no action or buy signal is generated.</returns></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.DirectionalMovementIndicator.WilderAverageDirectionalMotion(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)"><summary>
            Evaluates the Average Directional Movement Index Rating (ADXR), which is a component of the Directional Movement System developed by Welles Wilder.
            </summary><remarks>
            The ADXR should be considered as a
             special type of moving average (WilderMA) or or equivalently as a filter which can be applied
             to the Directional Indicator.
            
             <p>Originally Welles Wilder used the ADXR indicator to determine whether a trend was sufficiently
             strong enough in order to apply a trend following system. The rule was to only apply a trend
             following system when the ADXR was between 20 and 25. The ADMR can also be used within a system
             which uses the Directional Movement Indicator (for example Welles, Directional Movement System)
             which will result in trading signals being more infrequently generated.</p><h3>Evaluation of the ADXR</h3><p>This indicator is given by the following formula:<br></br><br></br>
              ADXR = (directionalMotion(today) + directionalMotion(n-days ago))/2<br></br><br></br>
             where directionalMotion(today) in the value of the Directional Motion Index (above) today
             and directionalMotion (n-days ago) is the Directional Motion Index of the asset under
             consideration n-days ago.</p></remarks><param name="todaysHigh">The highest traded value which the asset under consideration takes during todays market action.</param><param name="todaysLow">The lowest traded value which the asset under consideration takes during todays market action.</param><param name="yesterdaysHigh">The highest traded value which the asset under consideration takes during yesterdays market action.</param><param name="yesterdaysLow">The lowest traded value which the asset under consideration takes during yesterdays market action.</param><param name="yesterdaysClose">The closing price of the asset the preceding day.</param><param name="nDaysHigh">The highest traded value which the asset under consideration takes during the trading period n-days previously.</param><param name="nDaysLow">The lowest traded value which the asset under consideration takes during the trading period n-days previously.</param><param name="yesterdaysNDaysHigh">The highest traded value which the asset under consideration takes during the trading period (n+1)-days previously.</param><param name="yesterdaysNDaysLow">The lowest traded value which the asset under consideration takes during the trading period (n+1)-days previously.</param><param name="yesterdaysNDaysClose">The closing price of the asset on the trading period (n+1) days ago.</param><exception cref="T:System.ArgumentException">Thrown if any of the methods double parameters is not a positive number.</exception></member><member name="T:dotnetCHARTING.Libraries.Statistics.PDistributions.ExponentialProbabilityDistribution"><summary>
            Within this class we deal with the definition and use of the Exponential Probability Distribution.
            </summary></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ExponentialProbabilityDistribution.#ctor"><summary>
            Creates a new Exponential Probability Distribution instance with its mean set to <c>1</c>.
            </summary><remarks>
            In order to specify
             your own mean, use the <c>Mean</c> get/set property.
            </remarks></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ExponentialProbabilityDistribution.#ctor(System.Double)"><summary>
            Creates a new Exponential Probability Distribution instance with the specified mean.
            </summary><param name="mean">The mean of the probability distribution.</param><exception cref="T:dotnetCHARTING.Libraries.Statistics.PDistributions.ExponentialProbabilityDistributionException">Thrown if the mean is not strictly positive.</exception></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ExponentialProbabilityDistribution.SetMean(System.Double)"><summary>
            Sets the mean for the exponential probability distribution.
            </summary><remarks>
            Note
             that you are able to read any set value of the mean using
             <see cref="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ExponentialProbabilityDistribution.GetMean"></see>.
            </remarks><param name="mean">The mean which is set for the exponential probability distribution.</param><exception cref="T:dotnetCHARTING.Libraries.Statistics.PDistributions.ExponentialProbabilityDistributionException">Is thrown if the mean given is less than or equal to zero.</exception></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ExponentialProbabilityDistribution.GetMean"><summary>
            Returns the mean of the exponential probability distribution which has been set using <see cref="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ExponentialProbabilityDistribution.SetMean(System.Double)"></see>.
            </summary></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ExponentialProbabilityDistribution.DensityFunction(System.Double)"><summary>
            Calculates the Exponential Probability Distribution density function in a given point.
            </summary><param name="evaluationPoint">The point at which the exponential probability density function is evaluated.</param><exception cref="T:dotnetCHARTING.Libraries.Statistics.PDistributions.ExponentialProbabilityDistributionException">Thrown if the value of the evaluation point is less than zero.</exception></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ExponentialProbabilityDistribution.DensityFunction(System.Double[],System.Double[])"><summary>
            Calculates the Exponential Probability Density function in a given set of points.
            </summary><param name="x">The values of the points of the X axis at which the Exponential Probability Density function is evaluated.</param><param name="y">The values of the points of the Y axis at which the Exponential Probability Density function is evaluated.</param></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ExponentialProbabilityDistribution.Probability(System.Double,System.Double)"><summary>
            Evaluates the probability of the events described in accordance with the Exponential Probability which lie within the interval <c>[lowerBound, upperBound]</c>.
            </summary><param name="lowerBound">The lower bound of the interval over which the probability is evaluated.</param><param name="upperBound">The upper bound of the interval over which the probability is evaluated.</param><exception cref="T:dotnetCHARTING.Libraries.Statistics.PDistributions.ExponentialProbabilityDistributionException">Thrown if the value of the <c>lowerBound</c>, given is negative or if the <c>upperBound</c>, is less than the <c>lowerBound</c>.</exception></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ExponentialProbabilityDistribution.ProbabilityDown(System.Double)"><summary>
            Calculates the Exponential Probability on the half-line <c>[-`infinity',upperBound]</c>, where <c>upperBound</c> is a given real number and <c>-`infinity'</c> is ``minus infinity''.
            </summary><remarks>
            That is, we evaluated the integral of the Exponential probability density
             function for all values less than a given upper bound,
            </remarks><param name="upperBound">The upper bound of the interval for which the exponential probability on the half-line is evaluated.</param><exception cref="T:dotnetCHARTING.Libraries.Statistics.PDistributions.ExponentialProbabilityDistributionException">Thrown if the value of the <c>upperBound</c> is less than zero.</exception></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ExponentialProbabilityDistribution.ProbabilityUp(System.Double)"><summary>
            Calculates the exponential probability for the half-line <c>[lowerBound,+`infinity']</c>, where <c>lowerBound</c> is the given real number and <c>+`infinity'</c> is ``plus infinity''.
            </summary><remarks>
            That is, we evaluated the integral of the Exponential probability density
             function for all values greater than a given lower bound.
            </remarks><param name="lowerBound">The lower bound of the interval for which the exponential probability on the half line is evaluated.</param><exception cref="T:dotnetCHARTING.Libraries.Statistics.PDistributions.ExponentialProbabilityDistributionException">Thrown if the value of the lower bound is less than zero.</exception></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ExponentialProbabilityDistribution.Inverse(System.Double)"><summary>
            Returns the inverse of the Exponential probability distribution.
            </summary><remarks><p><b>Note:</b> If the probability is <c>1</c>, then +Infinity is returned.</p></remarks><param name="probability">The value of the probability for which the inverse of the exponential probability distribution is evaluated.</param><exception cref="T:dotnetCHARTING.Libraries.Statistics.PDistributions.ExponentialProbabilityDistributionException">Thrown if the value probability given lies outside the interval <c>[0,1]</c>.</exception></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ExponentialProbabilityDistribution.GetRandomValue"><summary>
            Generates a random number from the Exponential Probability function.
            </summary><remarks>
            That is,
             for a given number within the interval <c>[0,1]</c>, we return the value
             for which the inverse distribution is equal to the given number.
            </remarks><seealso cref="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ExponentialProbabilityDistribution.GetRandomValues(System.Int32)">this is the corresponding procedure for generating a collection of random numbers from the Exponential Probability function.</seealso></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ExponentialProbabilityDistribution.GetRandomValues(System.Int32)"><summary>
            Generates an array of random numbers from the Exponential Probability function.
            </summary><remarks>
            That is, for sequence of given numbers within the interval
             <c>[0,1]</c>, we return an array of values where the k-th element of
             the array is the value for which the inverse distribution equals the k-th
             number with the array of number given.
            
             <p><b>Remark:</b> This method is identical to the method <see cref="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ExponentialProbabilityDistribution.GetRandomValue"></see>,
             except that here we apply the procedure to an array rather than an individual
             number.</p></remarks><param name="numberOfRandomValues">The number of random values from the Exponential Probability function which is generated.</param><exception cref="T:dotnetCHARTING.Libraries.Statistics.PDistributions.ExponentialProbabilityDistributionException">Thrown if the number of random number required is not an integer strictly greater than zero.</exception></member><member name="T:dotnetCHARTING.Libraries.Statistics.PDistributions.ExponentialProbabilityDistributionException"><summary>
            This exception is thrown by the HypergeometricProbabilityDistribution
            class.  It occurs when the the mean is less or equal to zero or the
            start is less than zero.
            </summary></member><member name="T:dotnetCHARTING.Forecasting.FactorModel"><summary>
            This class allows the basis of functions which describes a factor model.
            </summary><remarks>
            A factor model
            is a real vector space of functions from which a function will be selected in accordance with
            some criteria. That is, we allow the basis of functions <c>f_1(x), f_2(x) , ..., f_n(x)</c>,
            which span the factor model, i.e. any element of the factor model can be represented as:
            
            <p><c>a_1 * f_1(x) + a_2 * f_2(x) + ... + a_n * f_n(x)</c></p><p>where <c>a_1, ..., a_n</c> are real numbers. Note that the above representation is unique.</p></remarks></member><member name="M:dotnetCHARTING.Forecasting.FactorModel.#ctor"><summary>
            Creates a new FactorModel instance.
            </summary></member><member name="M:dotnetCHARTING.Forecasting.FactorModel.AddConstantTerm(System.Double)"><summary>
            Adds a constant function on one real variable to the function basis.
            </summary><remarks>
            The constant function
            takes the form:
            
            <p><c>f(x) = constant</c></p><p>where <c>x</c> is the variable and <c>constant</c> is a real number.</p></remarks><param name="constant">The constant value taken by the constant function.</param></member><member name="M:dotnetCHARTING.Forecasting.FactorModel.AddSumOfPowerTerms(System.Double[],System.Double[])"><summary>
            Adds a sum of power terms as an element of the function basis.
            </summary><remarks>
            The sum of
            power terms will take the follow form:
            
            <p><c>(a_1 * x^n_1) + ... + (a_m * x^n_p)</c>,</p><p>where <c>a_1,..., a_n, n_1,..., n_p</c> are arbitrary real numbers.</p></remarks><param name="coefficients">An array where the k-th term is the coefficient of the (k+1)-th term of the sum of power terms (i.e. <c>a_k</c>).</param><param name="exponents">An array where the k-th term is the exponent and the variable of the (k+1)-th power term (i.e. <c>n_k</c>).</param></member><member name="M:dotnetCHARTING.Forecasting.FactorModel.AddRationalSumOfPowerTerms(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Adds a rational expression where the numerator and denominator are both themselves a sum of power terms as defined within <see cref="M:dotnetCHARTING.Forecasting.FactorModel.AddSumOfPowerTerms(System.Double[],System.Double[])"></see> to the function basis.
            </summary><remarks>
            That is, the rational
            sum of the power terms takes the form:
            
            <p><c>( (a_1 * x^n_1) + ... + (a_p * x^n_p) ) / ( (b_1 * x^m_1) + ... + (b_q * x^m_q) )</c>,</p><p>where <c>a_1,..., a_n, n_1,..., n_p, b_1,..., b_q</c> are real numbers and <c>x</c>
            is the real variable.</p></remarks><param name="upperCoeff">An array where the k-th term is the coefficient of the (k+1)-th term of the sum of power terms (i.e. <c>a_k</c>) which make up the numerator.</param><param name="upperExp">An array where the k-th term is the exponent and the variable of the (k+1)-th power term (i.e. <c>n_k</c>) which make up the numerator.</param><param name="lowerCoeff">An array where the k-th term is the coefficient of the (k+1)-th term of the sum of power terms (i.e. <c>b_k</c>) which make up the denominator.</param><param name="lowerExp">An array where the k-th term is the exponent and the variable of the (k+1)-th power term (i.e. <c>m_k</c>) which make up the denominator.</param></member><member name="M:dotnetCHARTING.Forecasting.FactorModel.AddCosineSum(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Adds a sum a Cosine functions to an elements of the function basis.
            </summary><remarks>
            Please note that
            the k-th term of the sum which makes up the basis function will take to form:
            
            <p>k-th Term = <c>a_k * (Cos<sup>n_k</sup> (b_k * x + c_k))</c>,</p><p>where the Cosine function is in terms of radians, and <c>a_k, n_k, b_k, c_k</c>
            are real numbers. Please, in order to construct the sum you just sum over <c>k</c>
            starting at <c>0</c>.</p><h3>Notes on the Radian measure</h3><p>Radians are a means by which to describe the angle and are related to the more commonly
            used degrees as follows:<br></br><br></br><c>360</c> degrees <c>= 2 * Pi * radians</c><br></br><br></br>
            therefore, <c>1</c> radian <c>= 180 / Pi </c> degrees <c>= 57.295...</c> degrees.</p></remarks><param name="cosCoeff">An array where the k-th term is the coefficient of the (k+1)-th term of the sum of Cosine terms (i.e. <c>a_k</c>).</param><param name="exponent">An array where the k-th term is the exponent of the Cosine term of the (k+1)-th term of the sum of the Cosine terms (i.e. <c>b_k</c>).</param><param name="constant">An array where the k-th term is the constant shift in the x-axis of the Cosine term of the (k+1)-th term of the sum of Cosine terms (i.e. <c>c_k</c>).</param><param name="exponent">An array where the k-th term is the exponent of the Cosine term within the (k+1)-th term of the sum of the Cosine terms (i.e. <c>n_k</c>).</param></member><member name="M:dotnetCHARTING.Forecasting.FactorModel.AddSineSum(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Adds a sum of Sine functions to the used as basis elements.
            </summary><remarks>
            Please note that
            each term of the sum which makes up the basis function will take to form:
            
            <p><c>sinCoeff * (sin<sup>n</sup> (coefficient * x + constant))</c>,</p><p>where the Sine function is in terms of radians.</p><h3>Notes on the Radian measure</h3><p>Radians are a means by which to describe the angle and are related to the
            more commonly used degrees as follows:<br></br><br></br>
            360 degrees = 2 * Pi * radians<br></br><br></br>
            therefore, 1 radian = 180 / Pi degrees = 57.295... degrees.</p></remarks><param name="sinCoeff">An array where the k-th term is the coefficient of the whole k-th cosine term within the sum.</param><param name="coefficient">An array where the k-th term is the coefficient of the variable within the k-th sine term within the sum (i.e. <c>coefficient</c> as shown above).</param><param name="constant">An array where the k-th term is the constant shift of the sine function of the k-th term within the sum (i.e. the <c>constant</c> term as shown above).</param><param name="exponent">An array where the k-th term is the exponent of the sine term within the k-th element of the sum (i.e. <c>n</c> as shown above).</param></member><member name="M:dotnetCHARTING.Forecasting.FactorModel.AddTanSum(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Adds a sum of Tangent functions to the used as basis elements.
            </summary><remarks>
            Please note that
            each term of the cum which makes up the basis function will take to form:
            
            <p><c>tanCoeff * (tan<sup>n</sup> (coefficient * x + constant))</c>,</p><p>where the Tangent function is in terms of radians.</p><h3>Notes on the Radian measure</h3><p>Radians are a means by which to describe the angle and are related to the
            more commonly used degrees as follows:<br></br><br></br>
            360 degrees = 2 * Pi * radians<br></br><br></br>
            therefore, 1 radian = 180 / Pi degrees = 57.295... degrees.</p></remarks><param name="tanCoeff">An array where the k-th term is the coefficient of the whole k-th tangent term within the sum.</param><param name="coefficient">An array where the k-th term is the coefficient of the variable within the k-th tangent term within the sum (i.e. <c>coefficient</c> as shown above).</param><param name="constant">An array where the k-th term is the constant shift of the tangent function of the k-th term within the sum (i.e. the <c>constant</c> term as shown above).</param><param name="exponent">An array where the k-th term is the exponent of the tangent term within the k-th element of the sum (i.e. <c>n</c> as shown above).</param></member><member name="M:dotnetCHARTING.Forecasting.FactorModel.AddLogSum(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Adds a sum of (natural) log functions to be used as basis elements.
            </summary><remarks>
            Where
            each of the elements of the sum given will take the following form:
            
            <p><c>logCoeff * log<sup>n</sup> (coefficient * x + constant))</c></p></remarks><param name="logCoeff">An array where the k-th term is the coefficient of the whole k-th logarithm term within the sum.</param><param name="coefficient">An array where the k-th term is the coefficient of the variable within the k-th logarithm term within the sum (i.e. <c>coefficient</c> as shown above).</param><param name="constant">An array where the k-th term is the constant shift of the logarithm function of the k-th term within the sum (i.e. the <c>constant</c> term as shown above).</param><param name="exponent">An array where the k-th term is the exponent of the logarithm term within the k-th element of the sum (i.e. <c>n</c> as shown above).</param></member><member name="M:dotnetCHARTING.Forecasting.FactorModel.AddExpSum(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Adds a sum of exponential functions to be used as basis elements.
            </summary><remarks>
            Where
            each of the elements of the sum given will take the following form:
            
            <p><c>expCoeff * exp<sup>n</sup> (coefficient * x + constant))</c></p></remarks><param name="logCoeff">An array where the k-th term is the coefficient of the whole k-th exponential term within the sum.</param><param name="coefficient">An array where the k-th term is the coefficient of the variable within the k-th exponential term within the sum (i.e. <c>coefficient</c> as shown above).</param><param name="constant">An array where the k-th term is the constant shift of the exponential function of the k-th term within the sum (i.e. the <c>constant</c> term as shown above).</param><param name="exponent">An array where the k-th term is the exponent of the exponential term within the k-th element of the sum (i.e. <c>n</c> as shown above).</param></member><member name="M:dotnetCHARTING.Forecasting.FactorModel.AddAbsoluteSum(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Adds a sum of absolute functions to be used as basis element.
            </summary><remarks>
            Where each of the elements of this sum takes the following form:
            
            <p><c>absCoeff * Abs<sup>n</sup>(coefficient * x + constant)</c></p><p>where the <c>Abs</c> is the absolute functions given by:
            <ol><li><c>Abs(x) = x</c>, if <c>x &gt; 0</c></li><li><c>Abs(x) = -x</c>, if <c>x &lt; 0</c></li></ol></p></remarks><param name="absCoeff">An array where the k-th term is the coefficient of the whole k-th absolute function term within the sum.</param><param name="coefficient">An array where the k-th term is the coefficient of the variable within the k-th absolute function term within the sum (i.e. <c>coefficient</c> as shown above).</param><param name="constant">An array where the k-th term is the constant shift of the absolute function of the k-th term within the sum (i.e. the <c>constant</c> term as shown above).</param><param name="exponent">An array where the k-th term is the exponent of the absolute function term within the k-th element of the sum (i.e. <c>n</c> as shown above).</param></member><!-- Badly formed XML comment ignored for member "M:dotnetCHARTING.Forecasting.FactorModel.AddStepSum(System.Double[],System.Double[],System.Double[])" --><member name="M:dotnetCHARTING.Forecasting.FactorModel.DeleteBasisFunction(System.Int32)"><summary>
            Delete the k-th basis function set.
            </summary></member><member name="M:dotnetCHARTING.Forecasting.FactorModel.ClearBasisFunction"><summary>
            Delete all function from the basis elements set.
            </summary></member><member name="M:dotnetCHARTING.Forecasting.FactorModel.GetNumberOfBasisFunctions"><summary>
            Returns the number of functions set within the function basis.
            </summary></member><member name="M:dotnetCHARTING.Forecasting.FactorModel.GetValueAt(System.Double)"><summary>
            Returns an array where the k-th term is the value of the k-th basis function at the <c>evaluationPoint</c>.
            </summary><param name="evaluationPoint">The point at which each of the basis functions are eventuated.</param></member><member name="M:dotnetCHARTING.Forecasting.FactorModel.DisplayFunction(System.Double[])"><summary>
            Returns a string which contains the definition of the function
            </summary><returns></returns></member><!-- Badly formed XML comment ignored for member "T:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Filters" --><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Filters.#ctor"><summary>
            Creates a new instance.
            </summary></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Filters.TypicalPrice(System.Double,System.Double,System.Double)"><summary>
            Evaluates the Typical Price of an asset within a given trading period.
            </summary><remarks>
            The typical price is just the arithmetic average of the high, low and closing
            price for the trading period considered. Generally speaking the period considered
            will be a single trading period, however the typical price is equally applicable to
            other time spans and hence the period considered could be (for example) a month
            or year.
            
            <h3>Applications</h3><p>The Typical Price is often used in place of the closing price in the development
            of trading systems in which either another intra-period system is used from the intra-period
            timing of trades, or when the trading party is given discretion on intra-period trading
            decisions.</p></remarks><param name="high">The highest traded price of the asset within the trading period considered.</param><param name="low">The lowest traded price of the asset within the trading period considered.</param><param name="closing">The closing price of the asset on the trading period considered.</param><exception cref="T:System.ArgumentException">Thrown if the <c>high</c>, <c>low</c> or <c>closing</c> parameters are strictly negative.</exception><seealso cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Filters.TypicalPriceOverPeriod(System.Double[],System.Double[],System.Double[])">evaluates the typical price over a number of periods.</seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Filters.TypicalPriceOverPeriod(System.Double[],System.Double[],System.Double[])"><summary>
            Evaluates the Typical Price of an asset over a number of trading periods.
            </summary><remarks>
            Note that the Typical Price for each of the trading periods considered is
            just the arithmetic average of the high, low and closing price of the asset
            over that period. Generally speaking the periods considered will be a single
            trading periods, however the typical price is equally applicable to other time
            spans and hence the times periods considered could be (for example) months or
            years.
            
            <h3>Applications</h3><p>The Typical Price is often used in place of the closing price in the development
            of trading systems in which either another intra-period system is used from the intra-period
            timing of trades, or when the trading party is given discretion on intra-period trading
            decisions.</p></remarks><param name="highs">A double array where a first term contains the value of the highest traded price during the last trading period considered, the second terms contains the highest traded price in the previous trading periods and on so.</param><param name="lows">A double array where a first term contains the value of the lowest traded price during the last trading period considered, the second terms contains the lowest traded price in the previous trading periods and on so.</param><param name="closing">A double array where a first term contains the value of the closing price during the last trading period considered, the second terms contains the closing price in the previous trading periods and on so.</param><exception cref="T:System.ArgumentException">Thrown if the length of the array parameters <c>high</c>, <c>low</c> or <c>closing</c>, is not the same or if any elements of any one of these array's has a negative element.</exception><returns>a double array where the first term is the typical price for the last trading period, the second term is the previous periods typical price and so on.</returns><seealso cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Filters.TypicalPrice(System.Double,System.Double,System.Double)">evaluates the typical price of an asset for a single trading period.</seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Filters.MedianPrice(System.Double,System.Double)"><summary>
            Evaluates the Median Price of an asset for a given trading period.
            </summary><remarks>
            The Median price is
            just the midpoint of the trading periods range, where the period considered will generally
            a day, however the Median price is equally applicable to other time spans and hence the
            period considered could be (for example) a month or year.
            </remarks><param name="high">The traded high of the asset on the trading period under consideration.</param><param name="low">The traded low of the asset on the trading period under consideration.</param><exception cref="T:System.ArgumentException">Thrown if the <c>high</c> or <c>low</c> are strictly negative.</exception><seealso cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Filters.MedianPriceOverPeriod(System.Double[],System.Double[])">evaluates the Median price for a number of periods.</seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Filters.MedianPriceOverPeriod(System.Double[],System.Double[])"><summary>
            Evaluates the Median Price for each periods of a collection of periods.
            </summary><remarks>
            The Median price is
            just the midpoint of each of the trading periods ranges, where the period considered will
            generally a day, however the Median price is equally applicable to other time spans and hence
            the period considered could be (for example) a month or year.
            </remarks><param name="highs">A double array where the first term is the traded high on the most resent period, the second terms is the traded high of the previous periods and so on, for the asset under consideration.</param><param name="lows">A double array where the first term is the traded low on the most resent period, the second terms is the traded low of the previous periods and so on, for the asset under consideration.</param><exception cref="T:System.ArgumentException">Thrown if the length of the array parameters <c>high</c> and <c>low</c>, are not the same or if any elements of these two array's is strictly negative.</exception><returns>a double array where the first term is the Median price of the asset on the most recent period considered, the second term is the median price on the period before that and so on.</returns><seealso cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Filters.MedianPrice(System.Double,System.Double)">evaluates the Median price for a single period.</seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Filters.AveragePrice(System.Double,System.Double,System.Double,System.Double)"><summary>
            Evaluates the Average Price of an asset for a given trading period.
            </summary><remarks>
            The Average price is just the average of the traded high, low, open and close of the asset,
            where the period considered will generally a day, however the Average price is equally 
            applicable to other time spans and hence the period considered could be (for example) a month or year.
            </remarks><param name="high">The traded high of the asset on the trading period under consideration.</param><param name="low">The traded low of the asset on the trading period under consideration.</param><param name="open">The traded open of the asset on the trading period under consideration.</param><param name="close">The traded close of the asset on the trading period under consideration.</param><exception cref="T:System.ArgumentException">Thrown if the <c>high</c>, <c>low</c>, <c>open</c>, <c>close</c> are strictly negative.</exception><seealso cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Filters.AveragePriceOverPeriod(System.Double[],System.Double[],System.Double[],System.Double[])">evaluates the Average price for a number of periods.</seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Filters.AveragePriceOverPeriod(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Evaluates the Average Price for each periods of a collection of periods.
            </summary><remarks>
            The Average price is just the average of the high, low, open and close of each of the trading 
            periods ranges, where the period considered will generally a day, however the Average price is equally
             applicable to other time spans and hence the period considered could be (for example) a month or year.
            </remarks><param name="high">A double array where the first term is the traded high on the most recent period, 
            the second terms is the traded high of the previous periods and so on, for the asset under 
            consideration.</param><param name="low">A double array where the first term is the traded low on the most recent period, 
            the second terms is the traded low of the previous periods and so on, for the asset under 
            consideration.</param><param name="open">A double array where the first term is the traded open on the most recent period, 
            the second terms is the traded open of the previous periods and so on, for the asset under consideration.</param><param name="close">A double array where the first term is the traded close on the most recent period, 
            the second terms is the traded close of the previous periods and so on, for the asset under consideration.</param><exception cref="T:System.ArgumentException">Thrown if the length of the array parameters <c>high</c> and 
            <c>low</c>, <c>open</c>, <c>close</c> are not the same or if any elements of these two array's is 
            strictly negative.</exception><returns>A double array where the first term is the average price of the asset on the most recent 
            period considered, the second term is the average price on the period before that and so on.</returns><seealso cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Filters.AveragePrice(System.Double,System.Double,System.Double,System.Double)">Evaluates the Average price for a single period.</seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Filters.PriceAction(System.Double,System.Double,System.Double,System.Double)"><summary>
            Evaluates the Price Action Indicator (PAIN) of an asset for a given trading period.
            </summary><remarks><h3>Evaluation</h3><p>The PAIN indicator is evaluated by the following formula:
            <br></br><c>PAIN = ((close-open)+(close-high)+(close-low))/2</c><br></br> where:
            <ol><li>(close-open) defines Intra-Day Momentum</li><li>(close-low) defines Late Selling Pressure (LSP)</li><li>(close-high) defines Late Buying Pressure (LBP)</li></ol><c>Close</c> is the period closing price, <c>open</c> is the period opening
            price, <c>high</c> is the highest traded price during the period and <c>low</c>
            is the lowest traded price during the period.</p><h3>Interpretation</h3><p>When the close is near the low, the assets's price is under selling pressure.
            If the close is near the high the asset's price is  price is under buying pressure</p></remarks><param name="high">The traded high of the asset on the trading period under consideration.</param><param name="low">The traded low of the asset on the trading period under consideration.</param><param name="open">The traded open of the asset on the trading period under consideration.</param><param name="close">The traded close of the asset on the trading period under consideration.</param><exception cref="T:System.ArgumentException">Thrown if the <c>high</c>, <c>low</c>, <c>open</c>, <c>close</c> 
            are strictly negative.</exception><seealso cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Filters.PriceActionOverPeriod(System.Double[],System.Double[],System.Double[],System.Double[])">evaluates the Average price for a number of periods.</seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Filters.PriceActionOverPeriod(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Evaluates the Price Action Indicator (PAIN) of an asset for a given trading period.
            </summary><remarks>
            An array is returned where the first term corresponds to the PAIN of the last trading
            period, the second term gives the PAIN on the previous trading period and so on.
            
            <h3>Evaluation</h3><p>The PAIN indicator is evaluated by the following formula:
            <br></br><c>PAIN = ((close-open)+(close-high)+(close-low))/2</c><br></br> where:
            <ol><li>(close-open) defines Intra-Day Momentum</li><li>(close-low) defines Late Selling Pressure (LSP)</li><li>(close-high) defines Late Buying Pressure (LBP)</li></ol><c>Close</c> is the periods closing price, <c>open</c> is the periods opening
            price, <c>high</c> is the highest traded price during the period and <c>low</c>
            is the lowest traded price during the period.</p><h3>Interpretation</h3><p>When the close is near the low, the assets's price is under selling pressure.
            If the close is near the high the asset's price is  price is under buying pressure</p></remarks><param name="high">A double array where the first term is the traded high on the most recent period, the second terms is the traded high of the previous periods and so on, for the asset under consideration.</param><param name="low">A double array where the first term is the traded low on the most recent period, the second terms is the traded low of the previous periods and so on, for the asset under consideration.</param><param name="open">A double array where the first term is the traded open on the most recent period, the second terms is the traded open of the previous periods and so on, for the asset under consideration.</param><param name="close">A double array where the first term is the traded close on the most recent period, the second terms is the traded close of the previous periods and so on, for the asset under consideration.</param><exception cref="T:System.ArgumentException">Thrown if the length of the array parameters <c>high</c> and <c>low</c>, <c>open</c>, <c>close</c> are not the same or if any elements of these two array's is strictly negative.</exception><returns>a double array where the first term is the PAIN of the asset on the most recent period considered, the second term is the PAIN on the period before that and so on.</returns><seealso cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Filters.PriceAction(System.Double,System.Double,System.Double,System.Double)">evaluates the Average price for a single period.</seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Filters.FiniteImpulseResponse(System.Double[],System.Double[])"><summary>
            Calculates a Finite Impulse Response Filter.
            </summary><remarks>
            This is a type of smoothing filter that assigns different weights
            to prices from the past.
            
            <h3>Evaluation</h3><p>The FIR indicator is evaluated by the following formula:
            <br></br><c> FIR = ((historicalValues[i]*weights[0]) + historicalValues[i-1]*wights[1] + ...)/(Sum of weights)</c><br></br></p></remarks><param name="historicalValues">A double array where the first term is the traded price on the most recent 
            period, the second terms is the traded price of the previous periods and so on, for the asset under 
            consideration.</param><param name="weights">A double array which represent the different weights associated with the given 
            prices.</param><exception cref="T:System.ArgumentException">Thrown if the length of the array parameter 
            <c>historicalValues</c> is less than the length of weights array or if any elements of 
            this array is strictly negative.</exception><returns>a double array where the first term is the FIR of the asset on the most recent period 
            considered, the second term is the FIR on the period before that and so on.</returns></member><member name="T:dotnetCHARTING.Forecasting.Gammln"><summary>
            Returns the value ln[¥Ã(xx)] for xx &gt; 0.
            </summary></member><member name="T:dotnetCHARTING.Forecasting.Gammq"><summary>
            Returns the incomplete gamma function Q(a, x) ¡Õ 1 -  P(a, x).
            </summary></member><member name="T:dotnetCHARTING.Forecasting.Gaussj"><summary>
            Linear equation solution by Gauss-Jordan elimination, equation (2.1.1) above. a[0..n-1,0..n-1]
            is the input matrix. b[0..n-1,0..m-1] is input containing the m right-hand side vectors. On output, 
            a is replaced by its matrix inverse, and b is replaced by the corresponding set of solution vectors.
            </summary></member><member name="T:dotnetCHARTING.Forecasting.Gcf"><summary>
            Returns the incomplete gamma function Q(a, x) evaluated by its continued fraction representation
            as gammcf. Also returns ln¥Ã(a) as gln.
            </summary></member><member name="T:dotnetCHARTING.Forecasting.GeneralLinear"><summary>
            This class offers the ability to find the function of best fit in accordance with the least squares 
            approach where the function is constructed as the sum of a collection of basis functions.
            </summary><remarks>
            The basis
             functions are set using the method <see cref="M:dotnetCHARTING.Forecasting.GeneralLinear.SetFunctionBasis(dotnetCHARTING.Forecasting.FunctionBasis)"></see> and allow complete flexibility over the
             functions which are used in order to construct the sum which will form the function is best fit.
            
             <h3>Details concerning the Function of Best Fit</h3><p>The function is best fit is constructed from a linear combination of basis functions
             <c>f_1(x), f_2(x), ..., f_n(x)</c>, where the basis functions are set using <see cref="M:dotnetCHARTING.Forecasting.GeneralLinear.SetFunctionBasis(dotnetCHARTING.Forecasting.FunctionBasis)"></see>.
             That is, the function of best fit can be any function which takes the form:</p><p><c>a_1 * f_1(x) + a_2 * f_2(x) + ... + a_n * f_n(x)</c>,</p><p>where <c>a_1,..., a_n</c> are any real numbers.</p><h3>The Least Square Approach</h3><p>When we refer to the function of best fit strictly speaking we are refering to the function constructed
             as a linear combination of basis functions constructed by the following means. The coefficients are selected
             such that the resulting function has the maximum likelyhood of being the best fit in accordance with the least
             squares approach when the measurement errors of the y-axis coordinates of the known data points are given.</p><p>This implementation we offer the ability to incorporate measurement errors within the observed data by
             which the function it fit. In particular, we assume that the measurement errors of the <c>y_i</c>'s
             are independently random and distributed as a Normal Guassian distribution about a true value. It follows
             from these assumptions (though not rigorously) that the most likely coefficients which generate the best fit
             are acheived by finding the coefficients: <c>a_1, ..., a_n</c> such that the sum of the squares of the
             terms:</p><p><c>( y_i - (a_1 * f_1(x_i) + ... + a_n * f_n(x_i)) \ sigma_i</c>,</p><p>is minimized where we sum over the <c>i</c>, for <c>1 &lt;= i &lt;= m</c>; where <c>m</c>
             is the number of data points, namely <c>(x_i, y_i)</c>; <c>f_1,..., f_n</c> are the function basis
             elements and the <c>sigma_i</c> of the standard deviation of the measurement error of the values of
             <c>y_i</c>.</p><p><b>Remarks:</b><ol><li><b>Measurement Error Unknown:</b> If you do not wish to incorporate measurement error within the select of the
             greatest likelyhood coefficient then just set all the standard deviations of each of the errors to <c>1</c>.
             </li><li><b>Weighted Best Fit:</b> If you wish you are also able to apply this class with the view of finding the
             best weighted fit where the <c>sigma_i</c> corresponds the weight applied to the <c>i</c>-th data point.
             </li><li><b>Chi-Squared Measure:</b> The value of the sum of the above terms is referred to as the Chi-Squared measure.
             Clearly the lower the absolute value of this measure the better (globally) over the range of value the curve selected
             fits the given data.
             </li></ol></p><h3>Using this class</h3><p>In order to apply this class you must perform the following steps:
             <ol><li><b>Set the Basis Functions:</b> using <see cref="M:dotnetCHARTING.Forecasting.GeneralLinear.SetFunctionBasis(dotnetCHARTING.Forecasting.FunctionBasis)"></see></li><li><b>Fit the Function set to the Data:</b> using <see cref="M:dotnetCHARTING.Forecasting.GeneralLinear.SetGeneralFit(System.Double[],System.Double[],System.Double[],System.Double[],System.Boolean[])"></see> or <see cref="!:SetGeneralFitOrdered"></see></li></ol></p><p>Once the function has been fit you are able to ``read'' the following quantitative information about the
             fitted function:
             <ol><li> Return the value of Chi-Squared using <see cref="M:dotnetCHARTING.Forecasting.GeneralLinear.GetChiSquare"></see></li><li> Return the coefficients in the function of best fit using <see cref="M:dotnetCHARTING.Forecasting.GeneralLinear.GetCoefficients"></see></li><li> Evaluate the value of the function of best fit at a given point using <see cref="M:dotnetCHARTING.Forecasting.GeneralLinear.BestFitValue(System.Double)"></see></li></ol></p></remarks></member><member name="M:dotnetCHARTING.Forecasting.GeneralLinear.#ctor"><summary>
            Creates a new GeneralLinear instance.
            </summary></member><member name="M:dotnetCHARTING.Forecasting.GeneralLinear.SetFunctionBasis(dotnetCHARTING.Forecasting.FunctionBasis)"><summary>
            This is the method which allows you to set the function basis you wish to use in order to construct the function you wish to fit to the data set.
            </summary><remarks>
            The function basis is provided to providing an implementation of the imterface
             <see cref="T:dotnetCHARTING.Forecasting.FunctionBasis"></see>.
            </remarks></member><member name="M:dotnetCHARTING.Forecasting.GeneralLinear.GetChiSquare"><summary>
            Gets the value of Chi-Squared for the function of best fit.
            </summary><remarks>
            The Chi-Square is a convenient measure of how
             well (globally) over the range considered the function of best fit, fits the data considered.
            
             <p><b>Remark:</b> Roughly speaking for an unweighted function of best fit the square root of the chi-Squared
             measure is average distance from the curve of the best fit to a data point in the y-axis direction.</p><h3>What is Chi-Squared?</h3><p>Recall that here we are finding the curve of best fit in accordance with minimizing the sum of the squares
             of the terms:</p><p><c>( y_i - (a_1 * f_1(x_i) + ... + a_n * f_n(x_i)) / sigma_i</c>,</p><p>where we sum over the <c>i</c>, for <c>1 &lt;= i &lt;= n</c>; the <c>(x_i, y_i)</c>
             are the data points, <c>f_1,..., f_n</c> are the function basis elements and the <c>sigma_i</c> are
             the standard deviation of the measurement error of the values of <c>y_i</c>. The <b>Chi-Squared</b> measure
             is precisely the value of this sum.</p></remarks></member><member name="M:dotnetCHARTING.Forecasting.GeneralLinear.GetCoefficients"><summary>
            Gets the greatest likelyhood coefficients of the function of best fit in accordance with the least squares approach for the function basis given.
            </summary></member><member name="M:dotnetCHARTING.Forecasting.GeneralLinear.SetGeneralFit(System.Double[],System.Double[],System.Double[],System.Double[],System.Boolean[])"><summary>
            Evaluates the greatest likelyhood coefficients of the function of best fit in accordance with the least squares approach for the function basis given.
            </summary><remarks><h3>Further Details</h3><p>In its simplest case this method given a data set <c>(x_i, y_i)</c>, for <c>i=0, ..., m</c>,
             are are able to find the coefficients <c>a_1, ..., a_n</c> such that the function:</p><p><c>f(x) = a_1 * f_1(x) + a_2 * f_2 + ... + x_n * f_n(x)</c></p><p>where <c>f_1,...f_n</c> are the function basis set using <see cref="M:dotnetCHARTING.Forecasting.GeneralLinear.SetFunctionBasis(dotnetCHARTING.Forecasting.FunctionBasis)"></see>, and the
             function <c>f(x)</c>, is best fit in accordance with the least square approach. That is, coefficients
             are selected such the points <c>(x_i, f(x_i))</c>, for <c>i=1,...,m</c>; are a best fit
             for the given data set <c>(x_i, y_i)</c>, <c>i=1,...,m</c>.</p><h3>Fixing some Coefficients</h3><p>Please note that within this implementation we reserve the right to fix some of the
             coefficients before the function is fitted. In such instances the above described fitting is performed
             with some of the coefficients fixed to the initial value which they are given. The <c>fit</c> parameter
             is used in order to determine which (if any) of the coefficient are kept fixed during the fitting.</p><h3>Measure Errors or Weighted Best Fit</h3><p>In addition as mentioned within the overview of this class you are able to incorporate one of the
             following features when determining the greatest likelyhood coefficients:
             <ol><li><b>Measure Error:</b> You are able to find the greatest likelyhood coefficients when the measure 
             error (i.e. the standard deviations of the errors of the observation so the <c>y_i</c>'s). 
             In order to fit the function  taking into account the measurment error you are required to provide 
             the k-th term of the parameter <c>sigma</c> as the measurement error of the <c>y_k</c> 
             (i.e. the value of the y-axis corrdinate of the k-th data point which in used within the fitting 
             of the function.
             </li><li><b>Weighted Best Fit:</b> If you wish you are also able to apply this class with the view of finding the
             best weighted fit where the <c>sigma_i</c> corresponds the weight applied to the <c>i</c>-th data point.
             </li></ol></p></remarks><param name="xDataPoints">An aray where the k-th term corresponds to the x-axis coordinate value of the
             k-th data element of the data set from which the (weighted or not) function of best fit is fitted.
            </param><param name="yDataPoints">An aray where the k-th term corresponds to the y-axis coordinate value of 
            the k-th data element of the data set from which the (weighted or not) function of best fit is fitted.
            </param><param name="sigma">An array where the k-th term depending on your point of view to one of the following:
            <ol><li> Measure Error View: is the standard deviation of the value in the y-axis of the k-th data point. 
            </li><li> Weighted Fitting View: is inverse of the weight given to the k-th data point. </li></ol>.
            </param><param name="initialValue">An array where the k-th term corresponds the initial estimate of the value of the k-th coefficient within the function of best fit.</param><param name="fit">An array of booleans where the k-th term is a true boolean if the k-th coefficient is fitted to the data set considered, and is a false boolean if the k-th coefficient is not fitted to the data set copnsidered and held fixed. Please note that if a coefficient is held fixed then its value within the best fit function will correspond to the initialValue parameter value provided.</param><returns>Returns an array of doubles where the k-th term corresponds to the value of the k-th coefficient within the function of best fit.</returns></member><member name="M:dotnetCHARTING.Forecasting.GeneralLinear.BestFitValue(System.Double)"><summary>
            Returns the value of the function of best fit at a given point on the x-axis.
            </summary><remarks>
            Note that before
             this method is called you are require to have already fitted the data.
            </remarks></member><member name="T:dotnetCHARTING.Forecasting.GeneralLinearEasy"><summary>
            Within this class we provide short-cuts to the curve fitting functionality offer by the more general Linear curve fitting framework provided within <see cref="T:dotnetCHARTING.Forecasting.GeneralLinear"></see>.
            </summary><remarks>
            In particular, we allow the fitting to a number of standard
             function types where the fitting in each case can to achieved using only one static methods call in each case.
            
             <h3>Least Squares Approach</h3><p>The least squares approach determines the line of best fit by finding the function such that the sum of the squares
             of the distances between the given data and the fitted curve in the y-direction is minimized.</p></remarks></member><member name="M:dotnetCHARTING.Forecasting.GeneralLinearEasy.#ctor"><summary>
            Creates a new GeneralLinearEasy instance.
            </summary></member><member name="M:dotnetCHARTING.Forecasting.GeneralLinearEasy.TrendLinePolynomial(System.Double[],System.Double[],System.Int32)"><summary>
            Fits a polynomial of a given degree to a data set in accordance with the least squares approach and returned the values of the fitted function over the same range of the x-coordinate as the given data set.
            </summary><remarks>
            For example,
             if we fit a polynomial of degree 2, then we fit the quadratic polynomial (i.e. f(x) = a_0 + a_1 x + a_2 x^2);
             similarly if we fit a polynomial of degree 3, then we fit the cubic polynomial (i.e. f(x) = a_0 + a_1 x
             + a_2 x^2 + a_3 x^3).
            </remarks><param name="x">An array where the k-th value of the value of the x-coordinate of the k-th data point.</param><param name="y">An array where the k-th value of the value of the y-coordinate of the k-th data point.</param><param name="degree">The degree of the polynomial which is fitted to the data set given (i.e. if degree is 2, then a quadratic is fitted).</param><returns>an array where the k-th value is the value in the y-coordinate of the fitted function at the value of the x-coordinate of the k-th data point.</returns><seealso cref="M:dotnetCHARTING.Forecasting.GeneralLinearEasy.TrendLinePolynomial(System.Double[],System.Double[],System.Int32,System.Double,System.Int32,System.Int32)">Allows the values of the fitted function to be evaluated over an extended range. That is, a range in the x-coordinate greater than the original given data set.</seealso></member><member name="M:dotnetCHARTING.Forecasting.GeneralLinearEasy.TrendLinePolynomial(System.Double[],System.Double[],System.Int32,System.Double,System.Int32,System.Int32)"><summary>
            Fits a polynomial of a given degree to a data set in accordance with the least squares approach and returns the value of the fitted function over an extended (i.e. above, below or both) range of the x-coordinate values of the given data set.
            </summary><remarks>
            For example,
             if we fit a polynomial of degree 2, then we fit the quadratic polynomial (i.e. f(x) = a_0 + a_1 x + a_2 x^2);
             similarly if we fit a polynomial of degree 3, then we fit the cubic polynomial (i.e. f(x) = a_0 + a_1 x
             + a_2 x^2 + a_3 x^3).
            
             <p><b>Remark:</b> The difference between this method and <see cref="M:dotnetCHARTING.Forecasting.GeneralLinearEasy.TrendLinePolynomial(System.Double[],System.Double[],System.Int32)"></see>,
             is that it allows the values of the fitted function to be evaluated over an extended range.
             That is, a range in the x-coordinate greater than the original given data set.</p><h3>Where the extended values are evaluated?</h3><p>The parameters <c>step</c>, <c>forward</c>, <c>backward</c> allows the position and number
             of additional points above and/or below the range of the values in the x-coordinate of the original data set to
             be given. The <c>forward</c> parameter specifies the number the additional evaluation points of the fitted
             function which are greater than the values of the x-coordinates of the original data set. Similarly, the
             <c>backward</c> parameter specifies the number the additional evaluation points of the fitted
             function which are lower than the values of the x-coordinates of the original data set. The <c>step</c>
             specifies the distance in the x-coordinate between each of the additional data points, where the first additional
             data point either above or below is exactly a distance of <c>step</c> from the points of the original data set
             which the highest and lowest values in the x-coordinate.</p><p>For example, consider the data set <c>x = 1, 2, 3</c>; <c>y = 1, 2, 3</c>. Now if
             <c>step = 1</c>, <c>forward = 2</c>, and <c>backward = 3</c>, then this method when applied
             will return a two dimensional array. This two dimensional array will have the following structure:
             <c>{ { -2, f(-2) } { -1, f(-1) } { 0, f(0) }{ 1, 1 } { 2, 2 }{ 3, 3 } { 4, f(4) } { 5, f(5) } }</c>,
             where <c>f(-2), f(-1), f(0), f(4), f(5)</c> correspond to the value of the fitted functions at the
             points <c>x = -2, -1, 0, 4, 5</c>, respectively.</p></remarks><param name="x">An array where the k-th value of the value of the x-coordinate of the k-th data point.</param><param name="y">An array where the k-th value of the value of the y-coordinate of the k-th data point.</param><param name="degree">The degree of the polynomial which is fitted to the data set given (i.e. if degree is 2, then a quadratic is fitted).</param><param name="step">The distance in the x-coordinate between two adjacent extended points. Please note that this also corresponds to the distance in the x-coordinate between the highest and lowest original data point and the first (above or below) additional evaluation point.</param><param name="forward">The number of additional evaluation points which are evaluated above the x-coordinates of the original given data set.</param><param name="backward">The number of additional evaluation points which are evaluated below the x-coordinates of the original given data set.</param><returns>an array of dimensional two where the k-th element of the array represents of k-th point (i.e. { x_k, y_k }) of the total set over which the fitted function is evaluated. The total set over which the fitted function is evaluated consists of the `backward' points, original data set points and the `forward' points. Therefore, in the example given above the returned two dimensional array consists of an array of eight elements where each element is an array with two elements corresponds to that points x and y coordinate value.  <p><b>Remark:</b> This methods corresponds in functionality to the method of the same name within Microsoft Excel.</p></returns></member><member name="T:dotnetCHARTING.Forecasting.GeneralLinearFactorModel"><summary>
            This class offers the ability to find the function of best fit in accordance with the least squares approach where the function considered is provided as a sequence of method calls rather than as a user defined :server:, as detail below.
            </summary><remarks><h3>Details concerning the Function of Best Fit</h3><p>The function is best fit is constructed from a linear combination of basis functions
             <c>f_1(x), f_2(x), ..., f_n(x)</c>, where the basis functions are set using itterative basis building
             procedure as detailed below. That is, the function of best fit can be any function which takes the form:</p><p><c>a_1 * f_1(x) + a_2 * f_2(x) + ... + a_n * f_n(x)</c>,</p><p>where <c>a_1,..., a_n</c> are any real numbers.</p><h3>Providing the Function to Fit via the Factor Model</h3><p>The function of best fit is constructed as the linear sum of functions: <c>f_1(x), f_2(x),..., f_n(x)</c>
             where each of the individual functions are given by calling one of the methods:
             <ol><li><see cref="M:dotnetCHARTING.Forecasting.GeneralLinearFactorModel.AddConstantTerm(System.Double)"></see> - Add a basis constant function.
             </li><li><see cref="M:dotnetCHARTING.Forecasting.GeneralLinearFactorModel.AddSumOfPowerTerms(System.Double[],System.Double[])"></see> - Add a basis function which is a sum of power terms.
             </li><li><see cref="M:dotnetCHARTING.Forecasting.GeneralLinearFactorModel.AddRationalSumOfPowerTerms(System.Double[],System.Double[],System.Double[],System.Double[])"></see> - Add a basis function which is a sum of a rational where the
             denominator and numerator which our themselves sums of power terms.
             </li><li><see cref="M:dotnetCHARTING.Forecasting.GeneralLinearFactorModel.AddCosineSum(System.Double[],System.Double[],System.Double[],System.Double[])"></see> - Add a basis function which is a sum of Cosine functions.
             </li><li><see cref="M:dotnetCHARTING.Forecasting.GeneralLinearFactorModel.AddSineSum(System.Double[],System.Double[],System.Double[],System.Double[])"></see> - Add a basis function which is a sum of Sine functions.
             </li><li><see cref="M:dotnetCHARTING.Forecasting.GeneralLinearFactorModel.AddTanSum(System.Double[],System.Double[],System.Double[],System.Double[])"></see> - Add a basis function which is a sum of Tangent functions.
             </li><li><see cref="M:dotnetCHARTING.Forecasting.GeneralLinearFactorModel.AddLogSum(System.Double[],System.Double[],System.Double[],System.Double[])"></see> - Add a basis function which is a sum of Logarithm functions.
             </li><li><see cref="M:dotnetCHARTING.Forecasting.GeneralLinearFactorModel.AddExpSum(System.Double[],System.Double[],System.Double[],System.Double[])"></see> - Add a basis funtion which is a sum of Exponential functions.
             </li><li><see cref="M:dotnetCHARTING.Forecasting.GeneralLinearFactorModel.AddAbsoluteSum(System.Double[],System.Double[],System.Double[],System.Double[])"></see> - Add a basis function which is a sum of absolute functions.
             </li><li><see cref="M:dotnetCHARTING.Forecasting.GeneralLinearFactorModel.AddStepSum(System.Double[],System.Double[],System.Double[])"></see> - Add a basis functiopn which is a sum of step functions.
             </li></ol></p><p>That is, we construct the function which is to be fitted by itteratively added terms to the basis elements
             from which it is constructed. We illustrate exactly how this works withint he following example.</p><h3>Example of the Factor Model Function Builder</h3><p>Say we wish to fit the function of the following type to the data set considered:</p><p><c>f(x) = (a_1 * x) + (a_2 * sin(x+3) ) + (a_3 * 2)</c></p><p>where the terms <c>a_1, a_2, a_3</c>, are just constants which are yet to be decided.</p>
             
             
             
            
            
             is constructed as the sum of a collection of basis functions. The basis
             functions are set using the method <see cref="!:SetFunctionBasis"></see> and allow complete flexibility over the
             functions which are used in order to construct the sum which will form the function is best fit.
            
            
             <h3>The Least Square Approach</h3><p>When we refer to the function of best fit strictly speaking we are refering to the function constructed
             as a linear combination of basis functions constructed by the following means. The coefficients are selected
             such that the resulting function has the maximum likelyhood of being the best fit in accordance with the least
             squares approach when the measurement errors of the y-axis coordinates of the known data points are given.</p><p>This implementation we offer the ability to incorporate measurement errors within the observed data by
             which the function it fit. In particular, we assume that the measurement errors of the <c>y_i</c>'s
             are independently random and distributed as a Normal Guassian distribution about a true value. It follows
             from these assumptions (though not rigorously) that the most likely coefficients which generate the best fit
             are acheived by finding the coefficients: <c>a_1, ..., a_n</c> such that the sum of the squares of the
             terms:</p><p><c>( y_i - (a_1 * f_1(x_i) + ... + a_n * f_n(x_i)) \ sigma_i</c>,</p><p>is minimized where we sum over the <c>i</c>, for <c>1 &lt;= i &lt;= m</c>; where <c>m</c>
             is the number of data points, namely <c>(x_i, y_i)</c>; <c>f_1,..., f_n</c> are the function basis
             elements and the <c>sigma_i</c> of the standard deviation of the measurement error of the values of
             <c>y_i</c>.</p><p><b>Remarks:</b><ol><li><b>Measurement Error Unknown:</b> If you do not wish to incorporate measurement error within the select of the
             greatest likelyhood coefficient then just set all the standard deviations of each of the errors to <c>1</c>.
             </li><li><b>Weighted Best Fit:</b> If you wish you are also able to apply this class with the view of finding the
             best weighted fit where the <c>sigma_i</c> corresponds the weight applied to the <c>i</c>-th data point.
             </li><li><b>Chi-Squared Measure:</b> The value of the sum of the above terms is referred to as the Chi-Squared measure.
             Clearly the lower the absolute value of this measure the better (globally) over the range of value the curve selected
             fits the given data.
             </li></ol></p><h3>Using this class</h3><p>In order to apply this class you must perform the following steps:
             <ol><li><b>Set the Basis Functions:</b> using <see cref="!:SetFunctionBasis"></see></li><li><b>Fit the Function set to the Data:</b> using <see cref="M:dotnetCHARTING.Forecasting.GeneralLinearFactorModel.SetGeneralFit(System.Double[],System.Double[],System.Double[],System.Double[],System.Boolean[])"></see> or <see cref="!:SetGeneralFitOrdered"></see></li></ol></p><p>Once the function has been fit you are able to `read'' the following quantitative information about the
             fitted function:
             <ol><li> Return the value of Chi-Squared using <see cref="M:dotnetCHARTING.Forecasting.GeneralLinearFactorModel.GetChiSquare"></see></li><li> Return the coefficients in the function of best fit using <see cref="!:GetCoefficients"></see></li><li> Evaluate the value of the function of best fit at a given point using <see cref="!:BestFitValue"></see></li></ol></p></remarks></member><member name="M:dotnetCHARTING.Forecasting.GeneralLinearFactorModel.#ctor"><summary>
            Creates a new GeneralLinearFactorModel instance.
            </summary></member><member name="M:dotnetCHARTING.Forecasting.GeneralLinearFactorModel.AddConstantTerm(System.Double)"><summary>
            Add a constant function to the function basis, where the constant function takes the form:  <p><c>f(x) = constant</c></p>.
            </summary></member><member name="M:dotnetCHARTING.Forecasting.GeneralLinearFactorModel.AddSumOfPowerTerms(System.Double[],System.Double[])"><summary></summary></member><member name="M:dotnetCHARTING.Forecasting.GeneralLinearFactorModel.AddRationalSumOfPowerTerms(System.Double[],System.Double[],System.Double[],System.Double[])"><summary></summary></member><member name="M:dotnetCHARTING.Forecasting.GeneralLinearFactorModel.AddCosineSum(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Allow a sum a Cosine functions to the used as basis elements.
            </summary><remarks>
            Please note that
             each term of the cum which makes up the basis function will take to form:
            
             <c>cosCoeff * (Cos<sup>n</sup> (coeffficient * X + constant))</c>,
            
             where the Cosine function is in terms of radians.
            
             <h3>Notes on the Radian measure</h3><p>Radians are a means by which to describe the angle and are related to the more
             commonly used degress as follows:<br></br><br></br>
             360 degress = 2 * Pi * radians<br></br><br></br>
             therefore, 1 radian = 180 / Pi degress = 57.295... degrees.</p></remarks></member><member name="M:dotnetCHARTING.Forecasting.GeneralLinearFactorModel.AddSineSum(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Allow a sum of Sine functions to the used as basis elements.
            </summary><remarks>
            Please note that
             each term of the cum which makes up the basis function will take to form:
            
             <p><c>sinCoeff * (Sin<sup>n</sup> (coeffficient * x + constant))</c>,</p><p>where the Sine function is in terms of radians.</p><h3>Notes on the Radian measure</h3><p>Radians are a means by which to describe the angle and are related to the
             more commonly used degress as follows:<br></br><br></br>
             360 degress = 2 * Pi * radians<br></br><br></br>
             therefore, 1 radian = 180 / Pi degress = 57.295... degrees.</p></remarks></member><member name="M:dotnetCHARTING.Forecasting.GeneralLinearFactorModel.AddTanSum(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Allow a sum of Tangent functions to the used as basis elements.
            </summary><remarks>
            Please note that
             each term of the cum which makes up the basis function will take to form:
            
             <p><c>tanCoeff * (tan<sup>n</sup> (coeffficient * x + constant))</c>,</p><p>where the Tangent function is in terms of radians.</p><h3>Notes on the Radian measure</h3><p>Radians are a means by which to describe the angle and are related to the
             more commonly used degress as follows:<br></br><br></br>
             360 degress = 2 * Pi * radians<br></br><br></br>
             therefore, 1 radian = 180 / Pi degress = 57.295... degrees.</p></remarks></member><member name="M:dotnetCHARTING.Forecasting.GeneralLinearFactorModel.AddLogSum(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Allows the sum of (natural) log functions to be used as basis elements, where each of the elements of the lof function given will take the following form:  <p><c>logCoeff * log<sup>n</sup> (coefficient * x + constant))</c></p>.
            </summary></member><member name="M:dotnetCHARTING.Forecasting.GeneralLinearFactorModel.AddExpSum(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Allows the sum of exponential functions to be used as basis elements, where each of the elements of the lof function given will take the following form:  <p><c>expCoeff * exp<sup>n</sup> (coefficient * x + constant))</c></p>.
            </summary></member><member name="M:dotnetCHARTING.Forecasting.GeneralLinearFactorModel.AddAbsoluteSum(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Allows the sum of absolute functions where each element of this sum takes the following form:  <p><c>absCoeff * Abs<sup>n</sup>(coefficient * x + constant)</c></p>.
            </summary></member><!-- Badly formed XML comment ignored for member "M:dotnetCHARTING.Forecasting.GeneralLinearFactorModel.AddStepSum(System.Double[],System.Double[],System.Double[])" --><member name="T:dotnetCHARTING.Forecasting.Gser"><summary>
            Returns the incomplete gamma function P(a, x) evaluated by its series representation as gamser.
            Also returns ln ¥Ã(a) as gln.
            </summary></member><member name="T:dotnetCHARTING.StatisticalEngine"><summary>
            Provides a set of methods that perform statistical analysis of series and series collections.
            </summary></member><member name="M:dotnetCHARTING.StatisticalEngine.DataDistributionChart(dotnetCHARTING.Series)"><summary>
            Calculates some quality control features like median, mean and percentile and integrate them 
            within an element.</summary><param name="s">A statistical series.</param><exception cref="T:System.ArgumentException">Thrown if the series s is empty</exception></member><member name="M:dotnetCHARTING.StatisticalEngine.DataDistributionChart(dotnetCHARTING.SeriesCollection)"><summary>
            Calculates some quality control features like median, mean and percentile and integrate them within an element.
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><exception cref="T:System.ArgumentException">Thrown if the sc does not contain any series.</exception></member><member name="M:dotnetCHARTING.StatisticalEngine.DataDistribution(System.String,dotnetCHARTING.Series)"><summary>
            Calculates some quality control features like median, mean and percentile and integrate them 
            within an element.</summary><param name="s">A statistical series.</param><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><exception cref="T:System.ArgumentException">Thrown if the series s is empty</exception></member><member name="M:dotnetCHARTING.StatisticalEngine.DataDistribution(dotnetCHARTING.Series)"><summary>
            Calculates some quality control features like median, mean and percentile and integrate them 
            within an element.</summary><param name="s">A statistical series.</param><exception cref="T:System.ArgumentException">Thrown if the series s is empty</exception></member><member name="M:dotnetCHARTING.StatisticalEngine.DataDistribution(dotnetCHARTING.SeriesCollection)"><summary>
            Calculates some quality control features like median, mean and percentile and integrate them within an element.
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><exception cref="T:System.ArgumentException">Thrown if the sc does not contain any series.</exception></member><member name="M:dotnetCHARTING.StatisticalEngine.RunChart(System.String,dotnetCHARTING.Series)"><summary>
            Create the run chart for a given series.</summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><returns>An element with his YValue representing the arithmetic mean of the elements YValues of the series</returns><exception>Thrown if the series s is empty.</exception></member><member name="M:dotnetCHARTING.StatisticalEngine.RunChart(dotnetCHARTING.Series)"><summary>
            Create the run chart for a given series.</summary><param name="s">A statistical series.</param><exception cref="T:System.ArgumentException">Thrown if the series s is empty</exception></member><member name="M:dotnetCHARTING.StatisticalEngine.RunChart(dotnetCHARTING.SeriesCollection)"><summary>
            Create the run chart for a given SeriesCollection object.
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><exception cref="T:System.ArgumentException">Thrown if the sc does not contain any series.</exception></member><member name="M:dotnetCHARTING.StatisticalEngine.RChart(System.String,dotnetCHARTING.SeriesCollection)"><summary>
            Create the R Chart chart for a given SeriesCollection object.
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><exception cref="T:System.ArgumentException">Thrown if the sc does not contain any series.</exception></member><member name="M:dotnetCHARTING.StatisticalEngine.RChart(dotnetCHARTING.SeriesCollection)"><summary>
            Create the R Chart chart for a given SeriesCollection object.
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><exception cref="T:System.ArgumentException">Thrown if the sc does not contain any series.</exception></member><member name="M:dotnetCHARTING.StatisticalEngine.RXBARChart(System.String,dotnetCHARTING.SeriesCollection)"><summary>
            Create the XBAR Chart based on R Chart results for a given SeriesCollection object.
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><exception cref="T:System.ArgumentException">Thrown if the sc does not contain any series.</exception></member><member name="M:dotnetCHARTING.StatisticalEngine.RXBARChart(dotnetCHARTING.SeriesCollection)"><summary>
            Create the XBAR Chart based on R Chart for a given SeriesCollection object.
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><exception cref="T:System.ArgumentException">Thrown if the sc does not contain any series.</exception></member><member name="M:dotnetCHARTING.StatisticalEngine.SChart(System.String,dotnetCHARTING.SeriesCollection)"><summary>
            Create the S Chart chart for a given SeriesCollection object.
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><exception cref="T:System.ArgumentException">Thrown if the sc does not contain any series.</exception></member><member name="M:dotnetCHARTING.StatisticalEngine.SChart(dotnetCHARTING.SeriesCollection)"><summary>
            Create the S Chart chart for a given SeriesCollection object.
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><exception cref="T:System.ArgumentException">Thrown if the sc does not contain any series.</exception></member><member name="M:dotnetCHARTING.StatisticalEngine.SXBARChart(System.String,dotnetCHARTING.SeriesCollection)"><summary>
            Create the XBAR Chart based on S Chart results for a given SeriesCollection object.
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><exception cref="T:System.ArgumentException">Thrown if the sc does not contain any series.</exception></member><member name="M:dotnetCHARTING.StatisticalEngine.SXBARChart(dotnetCHARTING.SeriesCollection)"><summary>
            Create the XBAR Chart based on S Chart for a given SeriesCollection object.
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><exception cref="T:System.ArgumentException">Thrown if the sc does not contain any series.</exception></member><member name="M:dotnetCHARTING.StatisticalEngine.Mean(System.String,dotnetCHARTING.Series)"><summary>
            Calculates the arithmetic mean of the elements YValues of the series.
            </summary><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><returns>An element with his YValue representing the arithmetic mean of the elements YValues of the series</returns><seealso cref="M:dotnetCHARTING.StatisticalEngine.GeometricMean(System.String,dotnetCHARTING.Series)">Evaluates the geometric mean of the series.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Mean(dotnetCHARTING.Series)"></seealso><exception>Thrown if the series s is empty.</exception></member><member name="M:dotnetCHARTING.StatisticalEngine.Mean(dotnetCHARTING.Series)"><summary>
            Calculates the arithmetic mean of the elements YValues of the series.
            </summary><param name="s">A statistical series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.GeometricMean(dotnetCHARTING.Series)">Evaluates the geometric mean of the series.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Mean(System.String,dotnetCHARTING.Series)"></seealso><exception cref="T:System.ArgumentException">Thrown if the series s is empty</exception></member><member name="M:dotnetCHARTING.StatisticalEngine.Mean(System.String,dotnetCHARTING.SeriesCollection)"><summary>
            Calculates the arithmetic mean of the elements YValues of each of the series within the collection of series.
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.GeometricMean(System.String,dotnetCHARTING.SeriesCollection)">Evaluates the geometric mean of the series.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Mean(dotnetCHARTING.SeriesCollection)"></seealso><exception cref="T:System.ArgumentException">Thrown if the sc does not contain any series.</exception></member><member name="M:dotnetCHARTING.StatisticalEngine.Mean(dotnetCHARTING.SeriesCollection)"><summary>
            Calculates the arithmetic mean of the elements YValues of each of the series within the collection of series.
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.GeometricMean(dotnetCHARTING.SeriesCollection)">Evaluates the geometric mean of the series.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Mean(System.String,dotnetCHARTING.Series)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.GeometricMean(System.String,dotnetCHARTING.Series)"><summary>
            Calculates the geometric mean of the series's elements YValues.
            </summary><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Mean(System.String,dotnetCHARTING.Series)">Evaluates the arithmetic mean of the series.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.GeometricMean(dotnetCHARTING.Series)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.GeometricMean(dotnetCHARTING.Series)"><summary>
            Calculates the geometric mean of the series's elements YValues.
            </summary><param name="s">A statistical series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Mean(dotnetCHARTING.Series)">Evaluates the arithmetic mean of the series.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.GeometricMean(System.String,dotnetCHARTING.Series)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.GeometricMean(System.String,dotnetCHARTING.SeriesCollection)"><summary>
            Calculates the geometric mean of the series's elements YValues.
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Mean(System.String,dotnetCHARTING.SeriesCollection)">Evaluates the arithmetic mean of the series.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.GeometricMean(dotnetCHARTING.SeriesCollection)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.GeometricMean(dotnetCHARTING.SeriesCollection)"><summary>
            Calculates the geometric mean of the series's elements YValues.
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Mean(dotnetCHARTING.SeriesCollection)">Evaluates the arithmetic mean of the series.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.GeometricMean(System.String,dotnetCHARTING.SeriesCollection)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.StandardDeviation(System.String,dotnetCHARTING.Series)"><summary>
            Calculates the sample standard variance of the series's elements YValues.
            </summary><remarks><p><b>Remark:</b> The units of the Sample Standard Deviation will correspond to the units
            used by the observations (i.e. the units of the members of the data set). In many instances
            it is convenient that the units used for the observations corresponds to the units used
            for a measure of the sets deviations. This differs from the <see cref="M:dotnetCHARTING.StatisticalEngine.Variance(System.String,dotnetCHARTING.Series)"></see> in which
            the deviation is measured in units which are the squares of the units of the observations.</p></remarks><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Variance(System.String,dotnetCHARTING.Series)">Another measure of the deviation of the elements of the data set
            considered.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.StandardDeviation(dotnetCHARTING.Series)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.StandardDeviation(dotnetCHARTING.Series)"><summary>
            Calculates the sample standard variance of the series's elements YValues.
            </summary><remarks><p><b>Remark:</b> The units of the Sample Standard Deviation will correspond to the units
            used by the observations (i.e. the units of the members of the data set). In many instances
            it is convenient that the units used for the observations corresponds to the units used
            for a measure of the sets deviations. This differs from the <see cref="M:dotnetCHARTING.StatisticalEngine.Variance(dotnetCHARTING.Series)"></see>
            in which the deviation is measured in units which are the squares of the units of the observations.</p></remarks><param name="s">A statistical series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Variance(dotnetCHARTING.Series)">Another measure of the deviation of the elements of 
            the data set considered.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.StandardDeviation(System.String,dotnetCHARTING.Series)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.StandardDeviation(System.String,dotnetCHARTING.SeriesCollection)"><summary>
            Calculates the sample standard variance of the series's elements YValues.
            </summary><remarks><p><b>Remark:</b> The units of the Sample Standard Deviation will correspond to the units
            used by the observations (i.e. the units of the members of the data set). In many instances
            it is convenient that the units used for the observations corresponds to the units used
            for a measure of the sets deviations. This differs from the <see cref="M:dotnetCHARTING.StatisticalEngine.Variance(dotnetCHARTING.Series)"></see>
            in which the deviation is measured in units which are the squares of the units of the observations.</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Variance(System.String,dotnetCHARTING.SeriesCollection)">Another measure of the deviation 
            of the elements of the data set considered.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.StandardDeviation(dotnetCHARTING.SeriesCollection)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.StandardDeviation(dotnetCHARTING.SeriesCollection)"><summary>
            Calculates the sample standard variance of the series's elements YValues.
            </summary><remarks><p><b>Remark:</b> The units of the Sample Standard Deviation will correspond to the units
            used by the observations (i.e. the units of the members of the data set). In many instances
            it is convenient that the units used for the observations corresponds to the units used
            for a measure of the sets deviations. This differs from the <see cref="M:dotnetCHARTING.StatisticalEngine.Variance(dotnetCHARTING.Series)"></see>
            in which the deviation is measured in units which are the squares of the units of the observations.</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Variance(dotnetCHARTING.SeriesCollection)">Another measure of the deviation of the 
            elements of the data set considered.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.StandardDeviation(System.String,dotnetCHARTING.SeriesCollection)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.MeanDeviation(System.String,dotnetCHARTING.Series)"><summary>
            Calculates the mean deviation of the series's element YValues.
            </summary><remarks> The mean deviation is exactly what the name implies, that is, it is the
            arithmetic average of the differences from each of the elements of the series to the mean of the series.
            </remarks><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.StandardDeviation(System.String,dotnetCHARTING.Series)">StandardDeviation - a measure of the 
            deviation of the elements of the data set considered.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.MeanDeviation(dotnetCHARTING.Series)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.MeanDeviation(dotnetCHARTING.Series)"><summary>
            Calculates the mean deviation of the series's element YValues.
            </summary><remarks> The mean deviation is exactly what the name implies, that is, it is the
            arithmetic average of the differences from each of the elements of the series to the mean of the series.
            </remarks><param name="s">A statistical series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.StandardDeviation(dotnetCHARTING.Series)">StandardDeviation - a measure of the deviation of the elements of 
            the data set considered.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.MeanDeviation(System.String,dotnetCHARTING.Series)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.MeanDeviation(System.String,dotnetCHARTING.SeriesCollection)"><summary>
            Calculates the mean deviation of the series's element YValues.
            </summary><remarks> The mean deviation is exactly what the name implies, that is, it is the
            arithmetic average of the differences from each of the elements of the series to the mean of the series.
            </remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.StandardDeviation(System.String,dotnetCHARTING.SeriesCollection)">StandardDeviation - a measure 
            of the deviation of the elements of the data set considered.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.MeanDeviation(dotnetCHARTING.SeriesCollection)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.MeanDeviation(dotnetCHARTING.SeriesCollection)"><summary>
            Calculates the mean deviation of the series's element YValues.
            </summary><remarks> The mean deviation is exactly what the name implies, that is, it is the
            arithmetic average of the differences from each of the elements of the series to the mean of the series.
            </remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.StandardDeviation(dotnetCHARTING.SeriesCollection)">StandardDeviation - a measure of 
            the deviation of the elements of the data set considered.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.MeanDeviation(System.String,dotnetCHARTING.SeriesCollection)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Variance(System.String,dotnetCHARTING.Series)"><summary>
            Calculates the sample variance of the series's elements YValues.
            <seealso cref="M:dotnetCHARTING.StatisticalEngine.StandardDeviation(System.String,dotnetCHARTING.Series)"></seealso></summary><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.StandardDeviation(System.String,dotnetCHARTING.Series)"> StatndardDeviation - a measure of the deviation of the elements 
            of the data set considered.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Variance(dotnetCHARTING.Series)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Variance(dotnetCHARTING.Series)"><summary>
            Calculates the sample variance of the series's elements YValues.
            <seealso cref="M:dotnetCHARTING.StatisticalEngine.StandardDeviation(System.String,dotnetCHARTING.Series)"></seealso></summary><param name="s">A statistical series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.StandardDeviation(dotnetCHARTING.Series)">A measure of the deviation of the elements of the 
            data set considered.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Variance(System.String,dotnetCHARTING.Series)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Variance(System.String,dotnetCHARTING.SeriesCollection)"><summary>
            Calculates the sample variance of the series's elements YValues.
            <seealso cref="M:dotnetCHARTING.StatisticalEngine.StandardDeviation(System.String,dotnetCHARTING.Series)"></seealso></summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.StandardDeviation(System.String,dotnetCHARTING.SeriesCollection)">A measure of the deviation of 
            the elements of the data set considered.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Variance(dotnetCHARTING.SeriesCollection)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Variance(dotnetCHARTING.SeriesCollection)"><summary>
            Calculates the sample variance of the series's elements YValues.
            <seealso cref="M:dotnetCHARTING.StatisticalEngine.StandardDeviation(System.String,dotnetCHARTING.Series)"></seealso></summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.StandardDeviation(dotnetCHARTING.SeriesCollection)">A measure of the deviation of the 
            elements of the data set considered.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Variance(System.String,dotnetCHARTING.SeriesCollection)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Median(System.String,dotnetCHARTING.Series)"><summary>
            Calculates the median of the series's elements YValues.
            </summary><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Mean(System.String,dotnetCHARTING.Series)">Evaluates the arithmetic mean of the series.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Median(dotnetCHARTING.Series)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Median(dotnetCHARTING.Series)"><summary>
            Calculates the median of the series's elements YValues.
            </summary><param name="s">A statistical series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Mean(dotnetCHARTING.Series)">Evaluates the arithmetic mean of the series.</seealso><sealso cref="M:dotnetCHARTING.StatisticalEngine.Median(System.String,dotnetCHARTING.Series)"></sealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Median(System.String,dotnetCHARTING.SeriesCollection)"><summary>
            Calculates the median of the series's elements YValues.
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Mean(System.String,dotnetCHARTING.SeriesCollection)">Evaluates the arithmetic mean of the series.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Median(dotnetCHARTING.SeriesCollection)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Median(dotnetCHARTING.SeriesCollection)"><summary>
            Calculates the median of the series's elements YValues.
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Mean(dotnetCHARTING.SeriesCollection)">Evaluates the arithmetic mean of the series.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Median(System.String,dotnetCHARTING.SeriesCollection)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Percentile25(System.String,dotnetCHARTING.Series)"><summary>
            Calculates the first percentile of the series's elements YValues.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="T:dotnetCHARTING.AnalysisEngine.Implementation.FinancialMedian"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile50(System.String,dotnetCHARTING.Series)">The second percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile75(System.String,dotnetCHARTING.Series)">The third percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile25(dotnetCHARTING.Series)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Percentile25(dotnetCHARTING.Series)"><summary>
            Calculates the first percentile of the series's elements YValues.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="T:dotnetCHARTING.AnalysisEngine.Implementation.FinancialMedian"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="s">A statistical series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile50(dotnetCHARTING.Series)">The second percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile75(dotnetCHARTING.Series)">The third percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile25(System.String,dotnetCHARTING.Series)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Percentile25(System.String,dotnetCHARTING.SeriesCollection)"><summary>
            Calculates the first percentile of the series's elements YValues.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="T:dotnetCHARTING.AnalysisEngine.Implementation.FinancialMedian"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile50(System.String,dotnetCHARTING.SeriesCollection)">The second percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile75(System.String,dotnetCHARTING.SeriesCollection)">The third percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile25(dotnetCHARTING.SeriesCollection)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Percentile25(dotnetCHARTING.SeriesCollection)"><summary>
            Calculates the first percentile of the series's elements YValues.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="T:dotnetCHARTING.AnalysisEngine.Implementation.FinancialMedian"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile50(dotnetCHARTING.SeriesCollection)">The second percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile75(dotnetCHARTING.SeriesCollection)">The third percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile25(System.String,dotnetCHARTING.SeriesCollection)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Percentile50(System.String,dotnetCHARTING.Series)"><summary>
            Calculates the second percentile of the series's elements YValues.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="T:dotnetCHARTING.AnalysisEngine.Implementation.FinancialMedian"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile25(System.String,dotnetCHARTING.Series)">The first percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile75(System.String,dotnetCHARTING.Series)">The third percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile50(dotnetCHARTING.Series)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Percentile50(dotnetCHARTING.Series)"><summary>
            Calculates the second percentile of the series's elements YValues.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="T:dotnetCHARTING.AnalysisEngine.Implementation.FinancialMedian"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="s">A statistical series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile25(dotnetCHARTING.Series)">The first percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile75(dotnetCHARTING.Series)">The third percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile50(System.String,dotnetCHARTING.Series)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Percentile50(System.String,dotnetCHARTING.SeriesCollection)"><summary>
            Calculates the second percentile of the series's elements YValues.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="T:dotnetCHARTING.AnalysisEngine.Implementation.FinancialMedian"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile25(System.String,dotnetCHARTING.SeriesCollection)">The first percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile75(System.String,dotnetCHARTING.SeriesCollection)">The third percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile50(dotnetCHARTING.SeriesCollection)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Percentile50(dotnetCHARTING.SeriesCollection)"><summary>
            Calculates the second percentile of the series's elements YValues.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="T:dotnetCHARTING.AnalysisEngine.Implementation.FinancialMedian"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile25(dotnetCHARTING.SeriesCollection)">The first percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile75(dotnetCHARTING.SeriesCollection)">The third percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile50(System.String,dotnetCHARTING.SeriesCollection)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Percentile75(System.String,dotnetCHARTING.Series)"><summary>
            Calculates the third percentile of the series's elements YValues.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="M:dotnetCHARTING.FinancialEngine.Median(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile25(System.String,dotnetCHARTING.Series)">The first percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile50(System.String,dotnetCHARTING.Series)">The second percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile75(dotnetCHARTING.Series)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Percentile75(dotnetCHARTING.Series)"><summary>
            Calculates the third percentile of the series's elements YValues.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="T:dotnetCHARTING.AnalysisEngine.Implementation.FinancialMedian"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="s">A statistical series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile25(dotnetCHARTING.Series)">The first percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile50(dotnetCHARTING.Series)">The second percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile75(System.String,dotnetCHARTING.Series)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Percentile75(System.String,dotnetCHARTING.SeriesCollection)"><summary>
            Calculates the third percentile of the series's elements YValues.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="T:dotnetCHARTING.AnalysisEngine.Implementation.FinancialMedian"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile25(System.String,dotnetCHARTING.SeriesCollection)">The first percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile50(System.String,dotnetCHARTING.SeriesCollection)">The second percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile75(dotnetCHARTING.SeriesCollection)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Percentile75(dotnetCHARTING.SeriesCollection)"><summary>
            Calculates the third percentile of the series's elements YValues.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="T:dotnetCHARTING.AnalysisEngine.Implementation.FinancialMedian"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile25(dotnetCHARTING.SeriesCollection)">The first percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile50(dotnetCHARTING.SeriesCollection)">The second percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile75(System.String,dotnetCHARTING.SeriesCollection)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Percentile(System.String,dotnetCHARTING.Series,System.Int32)"><summary>
            Calculates the n-th percentile of the series's elements YValues.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="M:dotnetCHARTING.FinancialEngine.Median(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><param name="percentile">A value between 1 and 100 which reprezent the value of the percetile.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile25(System.String,dotnetCHARTING.Series)">The first percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile50(System.String,dotnetCHARTING.Series)">The second percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile75(System.String,dotnetCHARTING.Series)">The third percentile.</seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Percentile(dotnetCHARTING.Series,System.Int32)"><summary>
            Calculates the n-th percentile of the series's elements YValues.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="T:dotnetCHARTING.AnalysisEngine.Implementation.FinancialMedian"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="s">A statistical series.</param><param name="percentile">A value between 1 and 100 which reprezent the value of the percetile.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile25(dotnetCHARTING.Series)">The first percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile50(dotnetCHARTING.Series)">The second percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile75(System.String,dotnetCHARTING.Series)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Percentile(System.String,dotnetCHARTING.SeriesCollection,System.Int32)"><summary>
            Calculates the n-th percentile of the series's elements YValues.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="T:dotnetCHARTING.AnalysisEngine.Implementation.FinancialMedian"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="percentile">A value between 1 and 100 which reprezent the value of the percetile.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile25(System.String,dotnetCHARTING.SeriesCollection)">The first percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile50(System.String,dotnetCHARTING.SeriesCollection)">The second percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile75(dotnetCHARTING.SeriesCollection)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Percentile(dotnetCHARTING.SeriesCollection,System.Int32)"><summary>
            Calculates the n-th percentile of the series's elements YValues.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="T:dotnetCHARTING.AnalysisEngine.Implementation.FinancialMedian"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="percentile">A value between 1 and 100 which reprezent the value of the percetile.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile25(dotnetCHARTING.SeriesCollection)">The first percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile50(dotnetCHARTING.SeriesCollection)">The second percentile.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.Percentile75(dotnetCHARTING.SeriesCollection)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Range(System.String,dotnetCHARTING.Series)"><summary>
            Calculates the range of the series's elements YValues.
            </summary><remarks>
            The range is the difference of a discrete data set is the difference between the largest and smallest 
            members of the data set  considered.
            </remarks><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Range(dotnetCHARTING.Series)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Range(dotnetCHARTING.Series)"><summary>
            Calculates the range of the series's elements YValues.
            </summary><remarks>
            The range is the difference of a discrete data set is the difference between the largest and smallest 
            members of the data set  considered.
            </remarks><param name="s">A statistical series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Range(System.String,dotnetCHARTING.Series)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Range(System.String,dotnetCHARTING.SeriesCollection)"><summary>
            Calculates the range of the series's elements YValues.
            </summary><remarks>
            The range is the difference of a discrete data set is the difference between the largest and smallest 
            members of the data set  considered.
            </remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Range(dotnetCHARTING.SeriesCollection)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Range(dotnetCHARTING.SeriesCollection)"><summary>
            Calculates the range of the series's elements YValues.
            </summary><remarks>
            The range is the difference of a discrete data set is the difference between the largest and smallest 
            members of the data set  considered.
            </remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Range(System.String,dotnetCHARTING.SeriesCollection)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.IQR(System.String,dotnetCHARTING.Series)"><summary>
            Calculates the Inter-Quartile Range(IQR) of the currently registered data set.
            </summary><remarks>
            Recall that the IQR is the
            difference between the <c>1</c>-st quartile (i.e. <c>25</c>-th percentile) and the
            <c>2</c>-nd quartile (i.e. the <c>75</c>-th percentile).
            </remarks><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Range(System.String,dotnetCHARTING.Series)">Evaluates the range of the series's elements YValues.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.IQR(dotnetCHARTING.Series)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.IQR(dotnetCHARTING.Series)"><summary>
            Calculates the Inter-Quartile Range(IQR) of the currently registered data set.
            </summary><remarks>
            Recall that the IQR is the
            difference between the <c>1</c>-st quartile (i.e. <c>25</c>-th percentile) and the
            <c>2</c>-nd quartile (i.e. the <c>75</c>-th percentile).
            </remarks><param name="s">A statistical series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Range(dotnetCHARTING.Series)">Evaluates the range of the series's elements YValues.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.IQR(System.String,dotnetCHARTING.Series)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.IQR(System.String,dotnetCHARTING.SeriesCollection)"><summary>
            Calculates the Inter-Quartile Range(IQR) of the currently registered data set.
            </summary><remarks>
            Recall that the IQR is the
            difference between the <c>1</c>-st quartile (i.e. <c>25</c>-th percentile) and the
            <c>2</c>-nd quartile (i.e. the <c>75</c>-th percentile).
            </remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Range(System.String,dotnetCHARTING.SeriesCollection)">Evaluates the range of the series's elements YValues.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.IQR(dotnetCHARTING.SeriesCollection)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.IQR(dotnetCHARTING.SeriesCollection)"><summary>
            Calculates the Inter-Quartile Range(IQR) of the currently registered data set.
            </summary><remarks>
            Recall that the IQR is the
            difference between the <c>1</c>-st quartile (i.e. <c>25</c>-th percentile) and the
            <c>2</c>-nd quartile (i.e. the <c>75</c>-th percentile).
            </remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.Range(dotnetCHARTING.SeriesCollection)">Evaluates the range of the series's elements YValues.</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.IQR(System.String,dotnetCHARTING.SeriesCollection)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.SimpleMovingAverage(System.String,dotnetCHARTING.Series,System.Int32)"><summary> Calculates the arithmetic(or simple) Moving Average (MA) of a given period for all possible 
            data points (i.e. periods) for which there is sufficient historical data provided.  
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><param name="lengthOfMA">The number of periods considered within the evaluation of the 
            moving average for each of the periods on which it can be evaluated.
            </param><exception cref="T:System.ArgumentException">Thrown if the series is empty.
            </exception><returns>A series where the first term corresponds to the Moving Average on the last period and the 
            previous value is the value of the Moving average on the previous period and so on.
            </returns><seealso cref="M:dotnetCHARTING.StatisticalEngine.GeometricMovingAverage(System.String,dotnetCHARTING.Series,System.Int32)">Geometric Moving Average (GMA)</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.SimpleMovingAverage(dotnetCHARTING.Series,System.Int32)"></seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.SimpleMovingAverage(dotnetCHARTING.SeriesCollection,System.Int32)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.SimpleMovingAverage(dotnetCHARTING.Series,System.Int32)"><summary> Calculates the arithmetic(or simple) Moving Average (MA) of a given period for all possible 
            data points (i.e. periods) for which there is sufficient historical data provided.  
            </summary><param name="s">A statistical series.</param><param name="lengthOfMA">The number of periods considered within the evaluation of the 
            moving average for each of the periods on which it can be evaluated.
            </param><exception cref="T:System.ArgumentException">Thrown if the series is empty.
            </exception><returns>A series where the first term corresponds to the Moving Average on the last period and the 
            previous value is the value of the Moving average on the previous period and so on.
            </returns><seealso cref="M:dotnetCHARTING.StatisticalEngine.GeometricMovingAverage(dotnetCHARTING.Series,System.Int32)">Geometric Moving Average (GMA)</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.SimpleMovingAverage(System.String,dotnetCHARTING.Series,System.Int32)"></seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.SimpleMovingAverage(dotnetCHARTING.SeriesCollection,System.Int32)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.SimpleMovingAverage(dotnetCHARTING.SeriesCollection,System.Int32)"><summary> Calculates the arithmetic(or simple) Moving Average (MA) of a given period for all possible 
            data points (i.e. periods) for which there is sufficient historical data provided.  
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="lengthOfMA">The number of periods considered within the evaluation of the 
            moving average for each of the periods on which it can be evaluated.</param><exception cref="T:System.ArgumentException">Thrown if the series is empty.</exception><returns>A series where the first term corresponds to the Moving Average on the last period and the 
            previous value is the value of the Moving average on the previous period and so on.</returns><seealso cref="M:dotnetCHARTING.StatisticalEngine.GeometricMovingAverage(System.String,dotnetCHARTING.Series,System.Int32)">Geometric Moving Average (GMA)</seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.SimpleMovingAverage(System.String,dotnetCHARTING.Series,System.Int32)"></seealso><seealso cref="M:dotnetCHARTING.StatisticalEngine.SimpleMovingAverage(dotnetCHARTING.Series,System.Int32)"></seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.GeometricMovingAverage(System.String,dotnetCHARTING.Series,System.Int32)"><summary> Calculates the Geometric Moving Average (GMA) for a given period for all possible 
            data points (i.e. periods) for which there is sufficient historical data provided.
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><param name="lengthOfMA">The number of periods over which the moving average is evaluated
            for each period.</param><exception cref="T:System.ArgumentException">Thrown if the series is empty.</exception><returns>A series where the first term corresponds to the Moving Average on the
            last period and the previous value is the value of the Moving average on the previous 
            period and so on.</returns><seealso cref="M:dotnetCHARTING.StatisticalEngine.SimpleMovingAverage(System.String,dotnetCHARTING.Series,System.Int32)">Simple Moving Average (MA)</seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.GeometricMovingAverage(dotnetCHARTING.Series,System.Int32)"><summary> Calculates the Geometric Moving Average (GMA) for a given period for all possible 
            data points (i.e. periods) for which there is sufficient historical data provided.
            </summary><param name="s">A statistical series.</param><param name="lengthOfMA">The number of periods over which the moving average is evaluated
            for each period.</param><exception cref="T:System.ArgumentException">Thrown if the series is empty.</exception><returns>A series where the first term corresponds to the Moving Average on the
            last period and the previous value is the value of the Moving average on the previous 
            period and so on.</returns></member><member name="M:dotnetCHARTING.StatisticalEngine.GeometricMovingAverage(dotnetCHARTING.SeriesCollection,System.Int32)"><summary> Calculates the Geometric Moving Average (GMA) for a given period for all possible 
            data points (i.e. periods) for which there is sufficient historical data provided.
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="lengthOfMA">The number of periods over which the moving average is evaluated
            for each period.</param><exception cref="T:System.ArgumentException">Thrown if the series is empty.</exception><returns>A series where the first term corresponds to the Moving Average on the
            last period and the previous value is the value of the Moving average on the previous 
            period and so on.</returns></member><member name="M:dotnetCHARTING.StatisticalEngine.TriangularMovingAverage(System.String,dotnetCHARTING.Series,System.Int32)"><summary> Evaluates the <c>x</c>-period Triangular Moving Average (TMA) where <c>x</c> corresponds to 
            the length of the time series array given as a parameter, for all periods for which sufficient data 
            is provided.  
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><param name="lengthOfMA">The number of periods over which the moving average is evaluated
            for each period.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.TriangularMovingAverage(dotnetCHARTING.Series,System.Int32)"><summary> Evaluates the <c>x</c>-period Triangular Moving Average (TMA) where <c>x</c> corresponds to 
            the length of the time series array given as a parameter, for all periods for which sufficient data 
            is provided.  
            </summary><param name="s">A statistical series.</param><param name="lengthOfMA">The number of periods over which the moving average is evaluated
            for each period.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.TriangularMovingAverage(dotnetCHARTING.SeriesCollection,System.Int32)"><summary> Evaluates the <c>x</c>-period Triangular Moving Average (TMA) where <c>x</c> corresponds to 
            the length of the time series array given as a parameter, for all periods for which sufficient data 
            is provided.  
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="lengthOfMA">The number of periods over which the moving average is evaluated
            for each period.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.LinearlyWeightedMovingAverage(System.String,dotnetCHARTING.Series,System.Int32)"><summary> Returns the value of the Linearly Weighted Moving Average (LWMA) for all periods for which 
            sufficient historical data is provided.  
            </summary><remarks> The Linearly Weighted Moving Average (LWMA) weights the time series by assigning a weight of 1, 
            to the oldest price and a weight of 2, to the second oldest price and so on... Until the weight of the most 
            recent value is assigned to be the parameter <c>lengthOfMA</c>, after which the LWMA is given by the sum 
            of the weighted prices divided by the sum of the weights. This indicator then shifts the window 
            (one place back) over which the MA is evaluated and the indicator is then re-evaluated.
            </remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><param name="lengthOfMA">The number of periods over which the moving average is evaluated for each
            period.</param><exception cref="T:System.ArgumentException">Thrown if the series <c>s</c> is empty or if its length 
            is less than the <c>lengthofMA</c>.
            </exception><returns>A series where the first term is the LWMA of length <c>lengthOfMA</c> for the
            latest period, the second term is the LWMA of length <c>lengthOfMA</c> for the previous 
            period and so on.
            </returns></member><member name="M:dotnetCHARTING.StatisticalEngine.LinearlyWeightedMovingAverage(dotnetCHARTING.Series,System.Int32)"><summary> Returns the value of the Linearly Weighted Moving Average (LWMA) for all periods for which 
            sufficient historical data is provided.  
            </summary><remarks> The Linearly Weighted Moving Average (LWMA) weights the time series by assigning a weight of 1, 
            to the oldest price and a weight of 2, to the second oldest price and so on... Until the weight of the most 
            recent value is assigned to be the parameter <c>lengthOfMA</c>, after which the LWMA is given by the sum 
            of the weighted prices divided by the sum of the weights. This indicator then shifts the window 
            (one place back) over which the MA is evaluated and the indicator is then re-evaluated.
            </remarks><param name="s">A statistical series.</param><param name="lengthOfMA">The number of periods over which the moving average is evaluated for each
            period.</param><exception cref="T:System.ArgumentException">Thrown if the series <c>s</c> is empty or if its length 
            is less than the <c>lengthofMA</c>.
            </exception><returns>A series where the first term is the LWMA of length <c>lengthOfMA</c> for the
            latest period, the second term is the LWMA of length <c>lengthOfMA</c> for the previous 
            period and so on.
            </returns></member><member name="M:dotnetCHARTING.StatisticalEngine.LinearlyWeightedMovingAverage(dotnetCHARTING.SeriesCollection,System.Int32)"><summary> Returns the value of the Linearly Weighted Moving Average (LWMA) for all periods for which 
            sufficient historical data is provided.  
            </summary><remarks> The Linearly Weighted Moving Average (LWMA) weights the time series by assigning a weight of 1, 
            to the oldest price and a weight of 2, to the second oldest price and so on... Until the weight of the most 
            recent value is assigned to be the parameter <c>lengthOfMA</c>, after which the LWMA is given by the sum 
            of the weighted prices divided by the sum of the weights. This indicator then shifts the window 
            (one place back) over which the MA is evaluated and the indicator is then re-evaluated.
            </remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="lengthOfMA">The number of periods over which the moving average is evaluated for each
            period.</param><exception cref="T:System.ArgumentException">Thrown if the series <c>s</c> is empty or if its length 
            is less than the <c>lengthofMA</c>.
            </exception><returns>A series where the first term is the LWMA of length <c>lengthOfMA</c> for the
            latest period, the second term is the LWMA of length <c>lengthOfMA</c> for the previous 
            period and so on.</returns></member><member name="M:dotnetCHARTING.StatisticalEngine.ExponentiallyWeightedMovingAverage(System.String,dotnetCHARTING.Series,System.Double,System.Int32)"><summary> Evaluates the (<c>x</c>-day) Exponentially Weighted Moving Average (EWMA) of a time 
            series provided where <c>x</c> is the length of the time series array which is provided as a
            parameter, for all periods for which sufficient data is provided.  
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><param name="smoothingFactor">The number between 0 and 1 which is known as a smoothing factor. 
            The closer the value is to zero the more influence more resent measurements
            will have on the EWMA.</param><param name="lengthOfMA">The number of periods over which the moving average is evaluated
            for each period.</param><exception cref="T:System.ArgumentException">Thrown if the Series is empty or if the value 
            given for the smoothing factor lies outside the closed range [0,1].</exception><returns>A series where the first term is the EWMA for the most recent period,
            the second term is the EWMA for the previous period and so on.</returns></member><member name="M:dotnetCHARTING.StatisticalEngine.ExponentiallyWeightedMovingAverage(dotnetCHARTING.Series,System.Double,System.Int32)"><summary> Evaluates the (<c>x</c>-day) Exponentially Weighted Moving Average (EWMA) of a time 
            series provided where <c>x</c> is the length of the time series array which is provided as a
            parameter, for all periods for which sufficient data is provided.  
            </summary><param name="s">A statistical series.</param><param name="smoothingFactor">The number between 0 and 1 which is known as a smoothing factor. 
            The closer the value is to zero the more influence more resent measurements
            will have on the EWMA.</param><param name="lengthOfMA">The number of periods over which the moving average is evaluated
            for each period.</param><exception cref="T:System.ArgumentException">Thrown if the Series is empty or if the value 
            given for the smoothing factor lies outside the closed range [0,1].</exception><returns>A series where the first term is the EWMA for the most recent period,
            the second term is the EWMA for the previous period and so on.</returns></member><member name="M:dotnetCHARTING.StatisticalEngine.ExponentiallyWeightedMovingAverage(dotnetCHARTING.SeriesCollection,System.Double,System.Int32)"><summary> Evaluates the (<c>x</c>-day) Exponentially Weighted Moving Average (EWMA) of a time 
            series provided where <c>x</c> is the length of the time series array which is provided as a
            parameter, for all periods for which sufficient data is provided.  
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="smoothingFactor">The number between 0 and 1 which is known as a smoothing factor. 
            The closer the value is to zero the more influence more resent measurements
            will have on the EWMA.</param><param name="lengthOfMA">The number of periods over which the moving average is evaluated
            for each period.</param><exception cref="T:System.ArgumentException">Thrown if the Series is empty or if the value 
            given for the smoothing factor lies outside the closed range [0,1].</exception><returns>A series where the first term is the EWMA for the most recent period,
            the second term is the EWMA for the previous period and so on.</returns></member><member name="M:dotnetCHARTING.StatisticalEngine.MedianMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.Series,System.Int32)"><summary> Returns the Median Moving Average of a given period of the data series provided for all 
            possible periods for the data given.  
            </summary><param name="seriesName">The name of the series.</param><param name="highSeries">A series  where the elements corresponds to the highest recorded values.</param><param name="lowSeries">A series  where the elements corresponds to the lowest recorded values.</param><param name="lengthOfMA">The number of periods considered within the evaluation of the moving average 
            of each of the days on which it can be evaluated.</param><exception cref="T:System.ArgumentException">Thrown if the series highSeries and lowSeries are of 
            different lengths or if one of these arrays is empty.</exception><returns>A series where the first term is the value of the Median Moving Average
            for the most recent period, the second term is the value of the Median Moving Average 
            for the previous period and so on.</returns></member><member name="M:dotnetCHARTING.StatisticalEngine.MedianMovingAverage(dotnetCHARTING.Series,dotnetCHARTING.Series,System.Int32)"><summary> Returns the Median Moving Average of a given period of the data series provided for all 
            possible periods for the data given.  
            </summary><param name="highSeries">A series  where the elements corresponds to the highest recorded values.</param><param name="lowSeries">A series  where the elements corresponds to the lowest recorded values.</param><param name="lengthOfMA">The number of periods considered within the evaluation of the moving average 
            of each of the days on which it can be evaluated.</param><exception cref="T:System.ArgumentException">Thrown if the series highSeries and lowSeries are of 
            different lengths or if one of these arrays is empty.</exception><returns>A series where the first term is the value of the Median Moving Average
            for the most recent period, the second term is the value of the Median Moving Average 
            for the previous period and so on.</returns></member><member name="M:dotnetCHARTING.StatisticalEngine.MedianMovingAverage(dotnetCHARTING.SeriesCollection,System.Int32)"><summary> Returns the Median Moving Average of a given period of the data series provided for all 
            possible periods for the data given.  
            </summary><param name="sc"> A colection of two series: a series  where the elements corresponds to the highest 
            recorded values and a series  where the elements corresponds to the lowest recorded values.</param><param name="lengthOfMA">The number of periods considered within the evaluation of the moving average 
            of each of the days on which it can be evaluated.</param><exception cref="T:System.ArgumentException">Thrown if the series highSeries and lowSeries are of 
            different lengths or if one of these arrays is empty.</exception><returns>A series where the first term is the value of the Median Moving Average
            for the most recent period, the second term is the value of the Median Moving Average 
            for the previous period and so on.</returns></member><member name="M:dotnetCHARTING.StatisticalEngine.WeightedMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.Series,System.Int32)"><summary> Evaluate the Weighted Moving Average(WMA) where the weights associated to all the elements of 
            the historical values are given and the WMA is evaluated for all periods for which there is sufficient 
            historical data.  
            </summary><remarks> That is, the weights are fixed for all given historical values and the window of length 
            <c>lengthOfMA</c> over which  the GMA is evaluated is shifted along the series.
            
            <h3>Application</h3><p>Generally speaking the WMA where the weights are all set and the window over which
            GMA is evaluated is shifted is used when you wish to give emphasis to particular dates.</p><p><b>Note:</b> The length of the <c>weights</c> array must equal or be greater
            than the length of the <c>historicalPrices</c> series. If it's greater than we
            ignore the supplementary values.</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">An statistical series</param><param name="weightSeries">A series of doubles which assigns weights to the k-th previous historical values 
            for the given period on which the moving average is being evaluated.
            Here k is just the length of the weights array given.</param><param name="lengthOfMA">The number of periods over which the weighted moving average is evaluated.
            </param><exception cref="T:System.ArgumentException">Thrown if the length of the weightsSeries and s 
            differ or if either series is empty.</exception><returns>A series where the first term is the value of the moving average corresponding of the latest
            period, the second term is the value for the previous period and so on.</returns></member><member name="M:dotnetCHARTING.StatisticalEngine.WeightedMovingAverage(dotnetCHARTING.Series,dotnetCHARTING.Series,System.Int32)"><summary> Evaluate the Weighted Moving Average(WMA) where the weights associated to all the elements of 
            the historical values are given and the WMA is evaluated for all periods for which there is sufficient 
            historical data.  
            </summary><remarks> That is, the weights are fixed for all given historical values and the window of length 
            <c>lengthOfMA</c> over which  the GMA is evaluated is shifted along the series.
            
            <h3>Application</h3><p>Generally speaking the WMA where the weights are all set and the window over which
            GMA is evaluated is shifted is used when you wish to give emphasis to particular dates.</p><p><b>Note:</b> The length of the <c>weights</c> array must equal or be greater
            than the length of the <c>historicalPrices</c> series. If it's greater than we
            ignore the supplementary values.</p></remarks><param name="s">An statistical series</param><param name="weightSeries">A series of doubles which assigns weights to the k-th previous historical values 
            for the given period on which the moving average is being evaluated.
            Here k is just the length of the weights array given.</param><param name="lengthOfMA">The number of periods over which the weighted moving average is evaluated.
            </param><exception cref="T:System.ArgumentException">Thrown if the length of the weightsSeries and s 
            differ or if either series is empty.</exception><returns>A series where the first term is the value of the moving average corresponding of the latest
            period, the second term is the value for the previous period and so on.</returns></member><member name="M:dotnetCHARTING.StatisticalEngine.WeightedMovingAverage(dotnetCHARTING.SeriesCollection,dotnetCHARTING.Series,System.Int32)"><summary> Evaluate the Weighted Moving Average(WMA) where the weights associated to all the elements of 
            the historical values are given and the WMA is evaluated for all periods for which there is sufficient 
            historical data.  
            </summary><remarks> That is, the weights are fixed for all given historical values and the window of length 
            <c>lengthOfMA</c> over which  the GMA is evaluated is shifted along the series.
            
            <h3>Application</h3><p>Generally speaking the WMA where the weights are all set and the window over which
            GMA is evaluated is shifted is used when you wish to give emphasis to particular dates.</p><p><b>Note:</b> The length of the <c>weights</c> array must equal or be greater
            than the length of the <c>historicalPrices</c> series. If it's greater than we
            ignore the supplementary values.</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="weightSeries">A series of doubles which assigns weights to the k-th previous historical values 
            for the given period on which the moving average is being evaluated.
            Here k is just the length of the weights array given.</param><param name="lengthOfMA">The number of periods over which the weighted moving average is evaluated.
            </param><exception cref="T:System.ArgumentException">Thrown if the length of the weightsSeries and s 
            differ or if either series is empty.</exception><returns>A series where the first term is the value of the moving average corresponding of the latest
            period, the second term is the value for the previous period and so on.</returns></member><member name="M:dotnetCHARTING.StatisticalEngine.WeightedMovingAverage(System.String,dotnetCHARTING.Series,System.Double[])"><summary> Here we evaluate the Weighted Moving Average(WMA) where for each period for which the 
            WMA is evaluated the historical terms are weighted in accordance with the same set of weights.  
            </summary><remarks> I.e. The weights shift with the window of the historical values.
            
            <h3>Application</h3><p>Generally speaking the WMA is used in order to allow more weight to be
            assigned to more resent price dynamics. Here the length of the weights array
            is used as the length of the period over which the moving average is calculated.
            If you wish to control the number of periods used within the moving average
            then we refer you to <see cref="M:dotnetCHARTING.StatisticalEngine.WeightedMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.Series,System.Int32)"><c>(historicalPrices,
            weights, lengthOfMovingAverage)</c></see>.
            </p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">An series of historical values, where the first element corresponds 
            to the market on the last period, the second term to the value on previous period and so on.
            </param><param name="weights">Array of doubles which assigns weights to the k-th previous historical values 
            for the given period on which the moving average is being evaluated.
            Here k is just the length of the weights array given.</param><exception cref="T:System.ArgumentException">Thrown if the length of the weights and series differ or 
            if either array is empty.</exception><returns>A series where the first term is the value of the moving average corresponding of
            the latest period, the second term is the value for the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.StatisticalEngine.WeightedMovingAverage(dotnetCHARTING.Series,System.Double[])"><summary> Here we evaluate the Weighted Moving Average(WMA) where for each period for which the 
            WMA is evaluated the historical terms are weighted in accordance with the same set of weights.  
            </summary><remarks> I.e. The weights shift with the window of the historical values.
            
            <h3>Application</h3><p>Generally speaking the WMA is used in order to allow more weight to be
            assigned to more resent price dynamics. Here the length of the weights array
            is used as the length of the period over which the moving average is calculated.
            If you wish to control the number of periods used within the moving average
            then we refer you to <see cref="M:dotnetCHARTING.StatisticalEngine.WeightedMovingAverage(dotnetCHARTING.Series,dotnetCHARTING.Series,System.Int32)"><c>
            (historicalPrices, weights, lengthOfMovingAverage)</c></see>.</p></remarks><param name="s">An series of historical values, where the first element corresponds 
            to the market on the last period, the second term to the value on previous period and so on.
            </param><param name="weights">Array of doubles which assigns weights to the k-th previous historical values 
            for the given period on which the moving average is being evaluated.
            Here k is just the length of the weights array given.</param><exception cref="T:System.ArgumentException">Thrown if the length of the weights and series differ or 
            if either array is empty.</exception><returns>A series where the first term is the value of the moving average corresponding of
            the latest period, the second term is the value for the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.StatisticalEngine.WeightedMovingAverage(dotnetCHARTING.SeriesCollection,System.Double[])"><summary> Here we evaluate the Weighted Moving Average(WMA) where for each period for which the 
            WMA is evaluated the historical terms are weighted in accordance with the same set of weights.  
            </summary><remarks> I.e. The weights shift with the window of the historical values.
            
            <h3>Application</h3><p>Generally speaking the WMA is used in order to allow more weight to be
            assigned to more resent price dynamics. Here the length of the weights array
            is used as the length of the period over which the moving average is calculated.
            If you wish to control the number of periods used within the moving average
            then we refer you to <see cref="M:dotnetCHARTING.StatisticalEngine.WeightedMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.Series,System.Int32)"><c>(historicalPrices,
            weights, lengthOfMovingAverage)</c></see>.
            </p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="weights">Array of doubles which assigns weights to the k-th previous historical values 
            for the given period on which the moving average is being evaluated.
            Here k is just the length of the weights array given.</param><exception cref="T:System.ArgumentException">Thrown if the length of the weights and series differ or 
            if either array is empty.</exception><returns>A series where the first term is the value of the moving average corresponding of
            the latest period, the second term is the value for the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.StatisticalEngine.Kairi(System.String,dotnetCHARTING.Series,dotnetCHARTING.Series)"><summary> Calculates the Kairi Indicator measure as a percentage of the element value, the divergence between 
            the a moving average (generally the simple moving average) of the value and the value itself for each 
            period for which there is sufficient historical values.  
            </summary><remarks><p><b>Remark:</b> The Kairi Indicator is often used with conjunction with other
            moving averages within trading systems.</p><h3>Evaluation</h3><p>The formulae for the Kairi Indicator is as follows:<br></br><br></br>
            Kairi Indicator = (MA - price) / price<br></br><br></br>
            where MA is the moving average being considered and price is the present price
            of the underlying asset.</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><param name="movingAverageSeries"></param></member><member name="M:dotnetCHARTING.StatisticalEngine.Kairi(dotnetCHARTING.Series,dotnetCHARTING.Series)"><summary> Calculates the Kairi Indicator measure as a percentage of the element value, the divergence between 
            the a moving average (generally the simple moving average) of the value and the value itself for each 
            period for which there is sufficient historical values.  
            </summary><remarks><p><b>Remark:</b> The Kairi Indicator is often used with conjunction with other
            moving averages within trading systems.</p><h3>Evaluation</h3><p>The formulae for the Kairi Indicator is as follows:<br></br><br></br>
            Kairi Indicator = (MA - price) / price<br></br><br></br>
            where MA is the moving average being considered and price is the present price
            of the underlying asset.</p></remarks><param name="s">A statistical series.</param><param name="movingAverageSeries">A series where the first term corresponds to the most 
            recent value of the moving average (generally the simple moving average) of the underlying asset,
            the second term to the previous value and so on.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.Kairi(dotnetCHARTING.Series,dotnetCHARTING.SeriesCollection)"><summary> Calculates the Kairi Indicator measure as a percentage of the element value, the divergence between 
            the a moving average (generally the simple moving average) of the value and the value itself for each 
            period for which there is sufficient historical values.  
            </summary><remarks><p><b>Remark:</b> The Kairi Indicator is often used with conjunction with other
            moving averages within trading systems.</p><h3>Evaluation</h3><p>The formulae for the Kairi Indicator is as follows:<br></br><br></br>
            Kairi Indicator = (MA - price) / price<br></br><br></br>
            where MA is the moving average being considered and price is the present price
            of the underlying asset.</p></remarks><param name="s">A statistical series.</param><param name="movingAverages"> A collection of series.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.ZScore(System.String,dotnetCHARTING.Series)"><summary> Evaluates the z-score (often referred to as the standardized value) of an element 
            series's element values.
            </summary><remarks> The z-score denotes the number of standard deviations of a given element
             of the data set is from the mean of the data set.
            </remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.ZScore(dotnetCHARTING.Series)"><summary> Evaluates the z-score (often referred to as the standardized value) of an element 
            series's element values.
            </summary><remarks> The z-score denotes the number of standard deviations of a given element
             of the data set is from the mean of the data set.
            </remarks><param name="s">A statistical series.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.ZScore(dotnetCHARTING.SeriesCollection)"><summary> Evaluates the z-score (often referred to as the standardized value) of an element 
            series's element values.
            </summary><remarks> The z-score denotes the number of standard deviations of a given element
             of the data set is from the mean of the data set.</remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.LowerBollingerBands(System.String,dotnetCHARTING.Series,System.Double,System.Int32)"><summary>
            Evaluates the position of the Lower Bollinger Band for a given standard deviation level.
            </summary><remarks>
            Please note that by standard deviation level we not only refer to the number of standard
            deviations shifts away from the moving average at which the Lower Bollinger Band is drawn 
            but also the number of time series points which are used in the evaluation of the standard 
            deviation and the moving average.  
            </remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A series where the first term correspond the latest periods
            values and the previous element is the value of the element before that and so on... The length 
            of this series is equal to the number of periods used in the evaluation of the standard
            deviation and the moving average.</param><param name="standardDeviationLevel">The number of standard deviation which the lower band in shifted 
            from the moving average.</param><param name="lengthOfMA">The length of the moving average used within the evaluation of the Bollinger
            Bands. Note that this also corresponds to the length of the period over which the standard deviation 
            is evaluated.</param><exception cref="T:System.ArgumentException">Thrown when the  series in empty or the number of standard 
            deviations considered (i.e. the parameters standardDeviationLevel) is not positive number.
            </exception><returns>A series where the first term corresponds to the value of the Upper Bollinger Band for
            the latest periods, the second terms to the previous period and so on.</returns></member><member name="M:dotnetCHARTING.StatisticalEngine.LowerBollingerBands(dotnetCHARTING.Series,System.Double,System.Int32)"><summary>
            Evaluates the position of the Lower Bollinger Band for a given standard deviation level.
            </summary><remarks>
            Please note that by standard deviation level we not only refer to the number of standard
            deviations shifts away from the moving average at which the Lower Bollinger Band is drawn 
            but also the number of time series points which are used in the evaluation of the standard 
            deviation and the moving average.  
            </remarks><param name="s">A series where the first term correspond the latest periods
            values and the previous element is the value of the element before that and so on... The length 
            of this series is equal to the number of periods used in the evaluation of the standard
            deviation and the moving average.</param><param name="standardDeviationLevel">The number of standard deviation which the lower band in shifted 
            from the moving average.</param><param name="lengthOfMA">The length of the moving average used within the evaluation of the Bollinger
            Bands. Note that this also corresponds to the length of the period over which the standard deviation 
            is evaluated.</param><exception cref="T:System.ArgumentException">Thrown when the  series in empty or the number of standard 
            deviations considered (i.e. the parameters standardDeviationLevel) is not positive number.
            </exception><returns>A series where the first term corresponds to the value of the Upper Bollinger Band for
            the latest periods, the second terms to the previous period and so on.</returns></member><member name="M:dotnetCHARTING.StatisticalEngine.LowerBollingerBands(dotnetCHARTING.SeriesCollection,System.Double,System.Int32)"><summary>
            Evaluates the position of the Lower Bollinger Band for a given standard deviation level.
            </summary><remarks>
            Please note that by standard deviation level we not only refer to the number of standard
            deviations shifts away from the moving average at which the Lower Bollinger Band is drawn 
            but also the number of time series points which are used in the evaluation of the standard 
            deviation and the moving average.  
            </remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="standardDeviationLevel">The number of standard deviation which the lower band in shifted 
            from the moving average.</param><param name="lengthOfMA">The length of the moving average used within the evaluation of the Bollinger
            Bands. Note that this also corresponds to the length of the period over which the standard deviation 
            is evaluated.</param><exception cref="T:System.ArgumentException">Thrown when the  series in empty or the number of standard 
            deviations considered (i.e. the parameters standardDeviationLevel) is not positive number.
            </exception><returns>A series where the first term corresponds to the value of the Upper Bollinger Band for
            the latest periods, the second terms to the previous period and so on.</returns></member><member name="M:dotnetCHARTING.StatisticalEngine.UpperBollingerBands(System.String,dotnetCHARTING.Series,System.Double,System.Int32)"><summary>
            Evaluates the position of the Upper Bollinger Band for a given standard deviation level.
            </summary><remarks>
            Please note that by standard deviation level we not only refer to the number of standard
            deviations shifts away from the moving average at which the Higher Bollinger Band is drawn 
            but also the number of time series points which are used in the evaluation of the standard 
            deviation and the moving average.
            </remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">An series  where the first term correspond the latest periods
            value and the previous element is the value of the element before that and so on... The length 
            of this series is equal to the number of periods used in the evaluation of the standard
            deviation.</param><param name="standardDeviationLevel">The (positive) number of standard deviations which the lower 
            band in shifted from the moving average.</param><param name="lengthOfMA">The length of the moving average used within the evaluation of the Bollinger 
            Bands. Note that this also corresponds to the length of the period over which the standard deviation 
            is evaluated.</param><exception cref="T:System.ArgumentException">Throw if the series historicalPrices is empty or if the number 
            of standard deviations given (i.e. the parameter standardDeviationsLevel)is a negative number.
            </exception><returns>A series where the first term corresponds to the value of the Upper Bollinger
            Band for the latest periods, the second terms to the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.StatisticalEngine.UpperBollingerBands(dotnetCHARTING.Series,System.Double,System.Int32)"><summary>
            Evaluates the position of the Upper Bollinger Band for a given standard deviation level.
            </summary><remarks>
            Please note that by standard deviation level we not only refer to the number of standard
            deviations shifts away from the moving average at which the Higher Bollinger Band is drawn 
            but also the number of time series points which are used in the evaluation of the standard 
            deviation and the moving average.
            </remarks><param name="s">An series  where the first term correspond the latest periods
            value and the previous element is the value of the element before that and so on... The length 
            of this series is equal to the number of periods used in the evaluation of the standard
            deviation.</param><param name="standardDeviationLevel">The (positive) number of standard deviations which the lower 
            band in shifted from the moving average.</param><param name="lengthOfMA">The length of the moving average used within the evaluation of the Bollinger 
            Bands. Note that this also corresponds to the length of the period over which the standard deviation 
            is evaluated.</param><exception cref="T:System.ArgumentException">Throw if the series historicalPrices is empty or if the number 
            of standard deviations given (i.e. the parameter standardDeviationsLevel)is a negative number.
            </exception><returns>A series where the first term corresponds to the value of the Upper Bollinger
            Band for the latest periods, the second terms to the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.StatisticalEngine.UpperBollingerBands(dotnetCHARTING.SeriesCollection,System.Double,System.Int32)"><summary>
            Evaluates the position of the Upper Bollinger Band for a given standard deviation level.
            </summary><remarks>
            Please note that by standard deviation level we not only refer to the number of standard
            deviations shifts away from the moving average at which the Higher Bollinger Band is drawn 
            but also the number of time series points which are used in the evaluation of the standard 
            deviation and the moving average.
            </remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="standardDeviationLevel">The (positive) number of standard deviations which the lower 
            band in shifted from the moving average.</param><param name="lengthOfMA">The length of the moving average used within the evaluation of the Bollinger 
            Bands. Note that this also corresponds to the length of the period over which the standard deviation 
            is evaluated.</param><exception cref="T:System.ArgumentException">Throw if the series historicalPrices is empty or if the number 
            of standard deviations given (i.e. the parameter standardDeviationsLevel)is a negative number.
            </exception><returns>A series where the first term corresponds to the value of the Upper Bollinger
            Band for the latest periods, the second terms to the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.StatisticalEngine.BollingerBands(dotnetCHARTING.Series,System.Double,System.Int32)"><summary>
            Within this class we offer procedures which evaluate the upper and lower Bollinger Bands.
            </summary><remarks><h3>Further Details</h3><p>Bollinger Bands are a type of envelope that are plotted at standard
            deviation levels above and below the corresponding (simple) moving average. This
            produces an effect of having the bands widen during periods of higher
            volatility and contract during less volatile periods. Bollinger Bands
            indicate the relative supply and demand for a given asset. If the asset to
            move close to the top of the envelope then it indicates that there is
            strong demand for the asset, conversely if the asset hugs the bottom of
            the trading range then it indicates that there is oversupply of the asset.</p><p>Since the Bollinger Bands will nearly always be combined with other
            indicators when forming a trading system the number of periods used in the
            evaluation of the standard deviation of the stocks and the moving average
            will vary. For those without design restrictions a popular choice of
            the number of time periods is around 20-23.</p></remarks><param name="s">A statistical series.</param><param name="standardDeviationLevel">The (positive) number of standard deviations which the lower 
            band in shifted from the moving average.</param><param name="lengthOfMA">The length of the moving average used within the evaluation of the Bollinger 
            Bands. Note that this also corresponds to the length of the period over which the standard deviation 
            is evaluated.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.BollingerBands(dotnetCHARTING.SeriesCollection,System.Double,System.Int32)"><summary>
            Within this class we offer procedures which evaluate the upper and lower Bollinger Bands.
            </summary><remarks><h3>Further Details</h3><p>Bollinger Bands are a type of envelope that are plotted at standard
            deviation levels above and below the corresponding (simple) moving average. This
            produces an effect of having the bands widen during periods of higher
            volatility and contract during less volatile periods. Bollinger Bands
            indicate the relative supply and demand for a given asset. If the asset to
            move close to the top of the envelope then it indicates that there is
            strong demand for the asset, conversely if the asset hugs the bottom of
            the trading range then it indicates that there is oversupply of the asset.</p><p>Since the Bollinger Bands will nearly always be combined with other
            indicators when forming a trading system the number of periods used in the
            evaluation of the standard deviation of the stocks and the moving average
            will vary. For those without design restrictions a popular choice of
            the number of time periods is around 20-23.</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="standardDeviationLevel">The (positive) number of standard deviations which the lower 
            band in shifted from the moving average.</param><param name="lengthOfMA">The length of the moving average used within the evaluation of the Bollinger 
            Bands. Note that this also corresponds to the length of the period over which the standard deviation 
            is evaluated.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.CorrelationCoefDeterminantion(System.String,dotnetCHARTING.Series)"><summary>
            Calculates the coefficient of determination for the YValues of the series.
            </summary><remarks><h4>Explanation of the Coefficient of Determination</h4><p>The coefficient of determination is the amount of variation in the second
            variable (i.e. <c>Y</c>) which is explained by the regression line of the second
            variable <c>Y</c> on the first variable <c>X</c>
            (see <see cref="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateY(System.String,dotnetCHARTING.Series)"></see>), divided by the total amount
            of variation of the second variable (i.e. <c>Y</c>).</p></remarks><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><returns>The coefficient of determination of the series</returns></member><member name="M:dotnetCHARTING.StatisticalEngine.CorrelationCoefDeterminantion(dotnetCHARTING.Series)"><summary>
            Calculates the coefficient of determination for the YValues of the series.
            </summary><remarks><h4>Explanation of the Coefficient of Determination</h4><p>The coefficient of determination is the amount of variation in the second
            variable (i.e. <c>Y</c>) which is explained by the regression line of the second
            variable <c>Y</c> on the first variable <c>X</c>
            (see <see cref="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateY(System.String,dotnetCHARTING.Series)"></see>), divided by the total amount
            of variation of the second variable (i.e. <c>Y</c>).</p></remarks><param name="s">A statistical series.</param><returns>The coefficient of determination of the series</returns></member><member name="M:dotnetCHARTING.StatisticalEngine.CorrelationCoefDeterminantion(System.String,dotnetCHARTING.SeriesCollection)"><summary>
            Calculates the coefficient of determination for the YValues of the series.
            </summary><remarks><h4>Explanation of the Coefficient of Determination</h4><p>The coefficient of determination is the amount of variation in the second
            variable (i.e. <c>Y</c>) which is explained by the regression line of the second
            variable <c>Y</c> on the first variable <c>X</c>
            (see <see cref="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateY(System.String,dotnetCHARTING.Series)"></see>), divided by the total amount
            of variation of the second variable (i.e. <c>Y</c>).</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.CorrelationCoefDeterminantion(dotnetCHARTING.SeriesCollection)"><summary>
            Calculates the coefficient of determination for the YValues of the series.
            </summary><remarks><h4>Explanation of the Coefficient of Determination</h4><p>The coefficient of determination is the amount of variation in the second
            variable (i.e. <c>Y</c>) which is explained by the regression line of the second
            variable <c>Y</c> on the first variable <c>X</c>
            (see <see cref="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateY(System.String,dotnetCHARTING.Series)"></see>), divided by the total amount
            of variation of the second variable (i.e. <c>Y</c>).</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.KendallCorrelationCoef(System.String,dotnetCHARTING.Series)"><summary>
            Calculates Kendall's correlation coefficient for the YValues of the series.
            </summary><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.KendallCorrelationCoef(dotnetCHARTING.Series)"><summary>
            Calculates Kendall's correlation coefficient for the YValues of the series.
            </summary><param name="s">A statistical series.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.KendallCorrelationCoef(System.String,dotnetCHARTING.SeriesCollection)"><summary>
            Calculates Kendall's correlation coefficient for the YValues of the series.
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.KendallCorrelationCoef(dotnetCHARTING.SeriesCollection)"><summary>
            Calculates Kendall's correlation coefficient for the YValues of the series.
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.PearsonCorrelationCoef(System.String,dotnetCHARTING.Series)"><summary> Calculates Pearson's correlation coefficient for the YValues of the series.  
            </summary><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><returns>Pearson's correlation coefficient of the series </returns></member><member name="M:dotnetCHARTING.StatisticalEngine.PearsonCorrelationCoef(dotnetCHARTING.Series)"><summary> Calculates Pearson's correlation coefficient for the YValues of the series.  
            </summary><param name="s">A statistical series.</param><returns>Pearson's correlation coefficient of the series </returns></member><member name="M:dotnetCHARTING.StatisticalEngine.PearsonCorrelationCoef(System.String,dotnetCHARTING.SeriesCollection)"><summary> Calculates Pearson's correlation coefficient for the YValues of the series.  
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.PearsonCorrelationCoef(dotnetCHARTING.SeriesCollection)"><summary> Calculates Pearson's correlation coefficient for the YValues of the series.  
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.SpearmanRankCorrelationTest(System.String,dotnetCHARTING.Series)"><summary>
            Calculates Spearson's Rank correlation coefficient for the current data set.
            </summary><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.SpearmanRankCorrelationTest(dotnetCHARTING.Series)"><summary>
            Calculates Spearson's Rank correlation coefficient for the current data set.
            </summary><param name="s">A statistical series.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.SpearmanRankCorrelationTest(System.String,dotnetCHARTING.SeriesCollection)"><summary>
            Calculates Spearson's Rank correlation coefficient for the current data set.
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.SpearmanRankCorrelationTest(dotnetCHARTING.SeriesCollection)"><summary>
            Calculates Spearson's Rank correlation coefficient for the current data set.
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.EstimateX(System.String,dotnetCHARTING.Series,System.Double)"><summary>
            Estimates the value of the <code>X</code> variable when the <code>Y</code> variable is known
            using the regression line of <code>X</code> on <code>Y</code>, which can be evaluated using
            <see cref="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateX(System.String,dotnetCHARTING.Series)"></see>.
            </summary><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series containing the elements for which the linear regression line 
            is evaluated.</param><param name="estPoint"> the values of the <code>Y</code> coordinate for which the corresponding
            <code>X</code> coordinate in estimated in accordance with the linear regression line.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.EstimateX(dotnetCHARTING.Series,System.Double)"><summary>
            Estimates the value of the <code>X</code> variable when the <code>Y</code> variable is known
            using the regression line of <code>X</code> on <code>Y</code>, which can be evaluated using
            <see cref="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateX(System.String,dotnetCHARTING.Series)"></see>.
            </summary><param name="s">A statistical series containing the elements for which the linear regression line 
            is evaluated.</param><param name="estPoint"> the values of the <code>Y</code> coordinate for which the corresponding
            <code>X</code> coordinate in estimated in accordance with the linear regression line.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.EstimateX(System.String,dotnetCHARTING.SeriesCollection,System.Double)"><summary>
            Estimates the value of the <code>X</code> variable when the <code>Y</code> variable is known
            using the regression line of <code>X</code> on <code>Y</code>, which can be evaluated using
            <see cref="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateX(System.String,dotnetCHARTING.Series)"></see>.
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="estPoint"> the values of the <code>Y</code> coordinate for which the corresponding
            <code>X</code> coordinate in estimated in accordance with the linear regression line.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.EstimateX(dotnetCHARTING.SeriesCollection,System.Double)"><summary>
            Estimates the value of the <code>X</code> variable when the <code>Y</code> variable is known
            using the regression line of <code>X</code> on <code>Y</code>, which can be evaluated using
            <see cref="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateX(System.String,dotnetCHARTING.Series)"></see>.
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="estPoint"> the values of the <code>Y</code> coordinate for which the corresponding
            <code>X</code> coordinate in estimated in accordance with the linear regression line.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.EstimateY(System.String,dotnetCHARTING.Series,System.Double)"><summary>
            Estimates the value of the <code>Y</code> variable when the <code>X</code> variable is known
            using the regression line of <code>Y</code> on <code>X</code>, which can be evaluated using
            <see cref="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateY(System.String,dotnetCHARTING.Series)"></see>.
            </summary><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series containing the elements for which the linear regression line 
            is evaluated.</param><param name="estPoint"> the values of the <code>X</code> coordinate for which the corresponding
            <code>Y</code> coordinate in estimated in accordance with the linear regression line.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.EstimateY(dotnetCHARTING.Series,System.Double)"><summary>
            Estimates the value of the <code>Y</code> variable when the <code>X</code> variable is known
            using the regression line of <code>Y</code> on <code>X</code>, which can be evaluated using
            <see cref="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateY(System.String,dotnetCHARTING.Series)"></see>.
            </summary><param name="s">A statistical series containing the elements for which the linear regression line 
            is evaluated.</param><param name="estPoint"> the values of the <code>X</code> coordinate for which the corresponding
            <code>Y</code> coordinate in estimated in accordance with the linear regression line.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.EstimateY(System.String,dotnetCHARTING.SeriesCollection,System.Double)"><summary>
            Estimates the value of the <code>Y</code> variable when the <code>X</code> variable is known
            using the regression line of <code>Y</code> on <code>X</code>, which can be evaluated using
            <see cref="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateY(System.String,dotnetCHARTING.Series)"></see>.
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="estPoint"> the values of the <code>X</code> coordinate for which the corresponding
            <code>Y</code> coordinate in estimated in accordance with the linear regression line.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.EstimateY(dotnetCHARTING.SeriesCollection,System.Double)"><summary>
            Estimates the value of the <code>Y</code> variable when the <code>X</code> variable is known
            using the regression line of <code>Y</code> on <code>X</code>, which can be evaluated using
            <see cref="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateY(System.String,dotnetCHARTING.Series)"></see>.
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="estPoint"> the values of the <code>X</code> coordinate for which the corresponding
            <code>Y</code> coordinate in estimated in accordance with the linear regression line.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateY(System.String,dotnetCHARTING.Series)"><summary>
            Constructs the regression line of <c>Y</c> on <c>X</c> using the method of least squares.
            </summary><remarks>
            That is, the regression line using the least squares method is constructed when the
            second element of the pairs from which the data set of constructed is plot against the first
            elements of the pairs.</remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateX(System.String,dotnetCHARTING.Series)">Calculates the regression
            line of <c>X</c> on <c>Y</c>, using the method of least squares.
            </seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateY(dotnetCHARTING.Series)"><summary>
            Constructs the regression line of <c>Y</c> on <c>X</c> using the method of least squares.
            </summary><remarks>
            That is, the regression line using the least squares method is constructed when the
            second element of the pairs from which the data set of constructed is plot against the first
            elements of the pairs.  </remarks><param name="s">A statistical series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateX(dotnetCHARTING.Series)">Calculates the regression
            line of <c>X</c> on <c>Y</c>, using the method of least squares.
            </seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateY(dotnetCHARTING.SeriesCollection)"><summary>
            Constructs the regression line of <c>Y</c> on <c>X</c> using the method of least squares.
            </summary><remarks>
            That is, the regression line using the least squares method is constructed when the
            second element of the pairs from which the data set of constructed is plot against the first
            elements of the pairs.  </remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateX(dotnetCHARTING.SeriesCollection)">Calculates the regression
            line of <c>X</c> on <c>Y</c>, using the method of least squares.
            </seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateX(System.String,dotnetCHARTING.Series)"><summary>
            Constructs the regression line of <c>X</c> on <c>Y</c> using the method of least squares.
            </summary><remarks>
            That is, the regression line using the least squares method is constructed when the
            first element of the pairs from which the data set of constructed is plot against the second
            elements of the pairs.  
            </remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateY(System.String,dotnetCHARTING.Series)">Calculates the regression
            line of <c>Y</c> on <c>X</c>, using the method of least squares.</seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateX(dotnetCHARTING.Series)"><summary>
            Constructs the regression line of <c>X</c> on <c>Y</c> using the method of least squares.
            </summary><remarks>
            That is, the regression line using the least squares method is constructed when the
            first element of the pairs from which the data set of constructed is plot against the second
            elements of the pairs.  
            </remarks><param name="s">A statistical series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateY(dotnetCHARTING.Series)">Calculates the regression
            line of <c>Y</c> on <c>X</c>, using the method of least squares.</seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateX(dotnetCHARTING.SeriesCollection)"><summary>
            Constructs the regression line of <c>X</c> on <c>Y</c> using the method of least squares.
            </summary><remarks>
            That is, the regression line using the least squares method is constructed when the
            first element of the pairs from which the data set of constructed is plot against the second
            elements of the pairs.  
            </remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.StatisticalEngine.LeastSquaresEstimateY(dotnetCHARTING.SeriesCollection)">Calculates the regression
            line of <c>Y</c> on <c>X</c>, using the method of least squares.</seealso></member><member name="M:dotnetCHARTING.StatisticalEngine.Residuals(System.String,dotnetCHARTING.Series)"><summary>
            Determines the residual for the current statistical series in accordance with the regression line constructed 
            using LeastSquaresRegressionLineX. 
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.Residuals(dotnetCHARTING.Series)"><summary>
            Determines the residual for the current statistical series in accordance with the regression line constructed 
            using LeastSquaresRegressionLineX. 
            </summary><param name="s">A statistical series.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.Residuals(dotnetCHARTING.SeriesCollection)"><summary>
            Determines the residual for the current statistical series in accordance with the regression line constructed 
            using LeastSquaresRegressionLineX. 
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.ResidualsAverage(System.String,dotnetCHARTING.Series)"><summary>
            Determines the arithmetic average of the residuals for all pairs of points within the current 
            statistical series in accordance with the regression line constructed using LeastSquaresRegressionLineX.
            </summary><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.ResidualsAverage(dotnetCHARTING.Series)"><summary>
            Determines the arithmetic average of the residuals for all pairs of points within the current 
            statistical series in accordance with the regression line constructed using LeastSquaresRegressionLineX.
            </summary><param name="s">A statistical series.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.ResidualsAverage(System.String,dotnetCHARTING.SeriesCollection)"><summary>
            Determines the arithmetic average of the residuals for all pairs of points within the current 
            statistical series in accordance with the regression line constructed using LeastSquaresRegressionLineX.
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.ResidualsAverage(dotnetCHARTING.SeriesCollection)"><summary>
            Determines the arithmetic average of the residuals for all pairs of points within the current 
            statistical series in accordance with the regression line constructed using LeastSquaresRegressionLineX.
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.CFrequencyTableAOL(System.String,dotnetCHARTING.Series,System.Double[])"><summary></summary><remarks>
            The value of the cumulative frequency table
            values at a given point is the number of elements within the data set above the lowest
            value of that interval of the frequency table constructed in accordance with the open
            left boundary convention.
             
            <h4>Example</h4><p>Within this example we work through an illustration in which the cumulative frequency
            table from above using the open left boundary convention is evaluated.</p><p>Consider the set of boundaries <c>{ 1, 2, 3, 4, 5 }</c>, which divide the real
            line into six sub-intervals. Now if we use the open left boundary convention then
            the real line will be divided into the sub-intervals:<br></br><br></br>
            (-infinity, 1], (1,2], (2,3], (3,4], (4,5], (5, infinity)<br></br><br></br>
            Note that, each point on the real line can be assigned to one of these sub-intervals
            and therefore when assigning a data point to one of these intervals there will only
            be one sub-interval in which it belongs.</p><p>Therefore, if we consider the data set <c>{ 0.5, 1.4, 1.3, 2.0, 2.3, 4.5, 5.5}</c>,
            if the assign this data set in accordance with the above the conventions then we will
            have: using Open Left Boundary (OLB) convention:
            <ul><li> Within the interval <c>(-infinity, 1]</c>, we assign the data element <c>0.5</c>;
            and hence the frequency of this interval is <c>1</c>.
            </li><li> Within the interval <c>(1, 2]</c>, we assign the data element <c>1.4, 1.3, 2.0</c>;
            and hence the frequency of this interval (wrt OLB convention) is <c>3</c>.
            </li><li> Within the interval <c>(2, 3]</c>, we assign the data element <c>2.3</c>, and hence
            the frequency of this interval (wrt OLB convention) is <c>1</c>.
            </li><li> Within the interval <c>(3, 4]</c>, we assign no data elements, and hence the frequency of
            this interval (wrt OLB convention) is <c>0</c>.
            </li><li> Within the interval <c>(4, 5]</c>, we assign the data element <c>4.5</c>, and hence
            the frequency of this interval (wrt OLB convention) is <c>1</c>.
            </li><li> Within the interval <c>(5, infinity)</c>, we assign the data element <c>5.5</c>, and
            hence the frequency of this interval (wrt OLB convention) is <c>1</c>.
            </li></ul></p><p>Now in follows that the associated values of the cumulative frequency table are given by:
            <ul><li> Cumulative frequency table above <c>-infinity</c> is: <c>1 + 1 + 0 + 1 + 3 + 1 = 7</c></li><li> Cumulative frequency table above <c>1</c> is: <c>1 + 0 + 1 + 3 + 1 = 6</c></li><li> Cumulative frequency table above <c>2</c> is: <c>0 + 1 + 3 + 1 = 5</c></li><li> Cumulative frequency table above <c>3</c> is: <c>1 + 3 + 1 = 5</c></li><li> Cumulative frequency table above <c>4</c> is: <c>3 + 1 = 4</c></li><li> Cumulative frequency table above <c>5</c> is: <c>1</c></li></ul></p><p>Hence, for this case the series returned by this methods to represent the cumulative
            frequency table would be: <c>{7, 6, 5, 5, 4, 1}</c>.</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><param name="boundaries">A strictly increasing sequence of boundaries of the intervals over the
            real line in which the data sets point will be assigned.</param><exception>Thrown if data set or boundaries intervals are null.</exception></member><member name="M:dotnetCHARTING.StatisticalEngine.CFrequencyTableAOL(dotnetCHARTING.Series,System.Double[])"><summary>
            Calculates the cumulative frequency table from above for a discrete data set in accordance with the
            open left boundary (OLB) convention.
            </summary><remarks>
            The value of the cumulative frequency table
            values at a given point is the number of elements within the data set above the lowest
            value of that interval of the frequency table constructed in accordance with the open
            left boundary convention.
             
            <h4>Example</h4><p>Within this example we work through an illustration in which the cumulative frequency
            table from above using the open left boundary convention is evaluated.</p><p>Consider the set of boundaries <c>{ 1, 2, 3, 4, 5 }</c>, which divide the real
            line into six sub-intervals. Now if we use the open left boundary convention then
            the real line will be divided into the sub-intervals:<br></br><br></br>
            (-infinity, 1], (1,2], (2,3], (3,4], (4,5], (5, infinity)<br></br><br></br>
            Note that, each point on the real line can be assigned to one of these sub-intervals
            and therefore when assigning a data point to one of these intervals there will only
            be one sub-interval in which it belongs.</p><p>Therefore, if we consider the data set <c>{ 0.5, 1.4, 1.3, 2.0, 2.3, 4.5, 5.5}</c>,
            if the assign this data set in accordance with the above the conventions then we will
            have: using Open Left Boundary (OLB) convention:
            <ul><li> Within the interval <c>(-infinity, 1]</c>, we assign the data element <c>0.5</c>;
            and hence the frequency of this interval is <c>1</c>.
            </li><li> Within the interval <c>(1, 2]</c>, we assign the data element <c>1.4, 1.3, 2.0</c>;
            and hence the frequency of this interval (wrt OLB convention) is <c>3</c>.
            </li><li> Within the interval <c>(2, 3]</c>, we assign the data element <c>2.3</c>, and hence
            the frequency of this interval (wrt OLB convention) is <c>1</c>.
            </li><li> Within the interval <c>(3, 4]</c>, we assign no data elements, and hence the frequency of
            this interval (wrt OLB convention) is <c>0</c>.
            </li><li> Within the interval <c>(4, 5]</c>, we assign the data element <c>4.5</c>, and hence
            the frequency of this interval (wrt OLB convention) is <c>1</c>.
            </li><li> Within the interval <c>(5, infinity)</c>, we assign the data element <c>5.5</c>, and
            hence the frequency of this interval (wrt OLB convention) is <c>1</c>.
            </li></ul></p><p>Now in follows that the associated values of the cumulative frequency table are given by:
            <ul><li> Cumulative frequency table above <c>-infinity</c> is: <c>1 + 1 + 0 + 1 + 3 + 1 = 7</c></li><li> Cumulative frequency table above <c>1</c> is: <c>1 + 0 + 1 + 3 + 1 = 6</c></li><li> Cumulative frequency table above <c>2</c> is: <c>0 + 1 + 3 + 1 = 5</c></li><li> Cumulative frequency table above <c>3</c> is: <c>1 + 3 + 1 = 5</c></li><li> Cumulative frequency table above <c>4</c> is: <c>3 + 1 = 4</c></li><li> Cumulative frequency table above <c>5</c> is: <c>1</c></li></ul></p><p>Hence, for this case the series returned by this methods to represent the cumulative
            frequency table would be: <c>{7, 6, 5, 5, 4, 1}</c>.</p></remarks><param name="s">A statistical series.</param><param name="boundaries">A strictly increasing sequence of boundaries of the intervals over the
            real line in which the data sets point will be assigned.</param><exception cref="T:System.ArgumentException">Thrown if data set or boundaries intervals are null.</exception></member><member name="M:dotnetCHARTING.StatisticalEngine.CFrequencyTableAOL(dotnetCHARTING.SeriesCollection,System.Double[])"><summary>
            Calculates the cumulative frequency table from above for a discrete data set in accordance with the
            open left boundary (OLB) convention.
            </summary><remarks>
            The value of the cumulative frequency table
            values at a given point is the number of elements within the data set above the lowest
            value of that interval of the frequency table constructed in accordance with the open
            left boundary convention.
             
            <h4>Example</h4><p>Within this example we work through an illustration in which the cumulative frequency
            table from above using the open left boundary convention is evaluated.</p><p>Consider the set of boundaries <c>{ 1, 2, 3, 4, 5 }</c>, which divide the real
            line into six sub-intervals. Now if we use the open left boundary convention then
            the real line will be divided into the sub-intervals:<br></br><br></br>
            (-infinity, 1], (1,2], (2,3], (3,4], (4,5], (5, infinity)<br></br><br></br>
            Note that, each point on the real line can be assigned to one of these sub-intervals
            and therefore when assigning a data point to one of these intervals there will only
            be one sub-interval in which it belongs.</p><p>Therefore, if we consider the data set <c>{ 0.5, 1.4, 1.3, 2.0, 2.3, 4.5, 5.5}</c>,
            if the assign this data set in accordance with the above the conventions then we will
            have: using Open Left Boundary (OLB) convention:
            <ul><li> Within the interval <c>(-infinity, 1]</c>, we assign the data element <c>0.5</c>;
            and hence the frequency of this interval is <c>1</c>.
            </li><li> Within the interval <c>(1, 2]</c>, we assign the data element <c>1.4, 1.3, 2.0</c>;
            and hence the frequency of this interval (wrt OLB convention) is <c>3</c>.
            </li><li> Within the interval <c>(2, 3]</c>, we assign the data element <c>2.3</c>, and hence
            the frequency of this interval (wrt OLB convention) is <c>1</c>.
            </li><li> Within the interval <c>(3, 4]</c>, we assign no data elements, and hence the frequency of
            this interval (wrt OLB convention) is <c>0</c>.
            </li><li> Within the interval <c>(4, 5]</c>, we assign the data element <c>4.5</c>, and hence
            the frequency of this interval (wrt OLB convention) is <c>1</c>.
            </li><li> Within the interval <c>(5, infinity)</c>, we assign the data element <c>5.5</c>, and
            hence the frequency of this interval (wrt OLB convention) is <c>1</c>.
            </li></ul></p><p>Now in follows that the associated values of the cumulative frequency table are given by:
            <ul><li> Cumulative frequency table above <c>-infinity</c> is: <c>1 + 1 + 0 + 1 + 3 + 1 = 7</c></li><li> Cumulative frequency table above <c>1</c> is: <c>1 + 0 + 1 + 3 + 1 = 6</c></li><li> Cumulative frequency table above <c>2</c> is: <c>0 + 1 + 3 + 1 = 5</c></li><li> Cumulative frequency table above <c>3</c> is: <c>1 + 3 + 1 = 5</c></li><li> Cumulative frequency table above <c>4</c> is: <c>3 + 1 = 4</c></li><li> Cumulative frequency table above <c>5</c> is: <c>1</c></li></ul></p><p>Hence, for this case the series returned by this methods to represent the cumulative
            frequency table would be: <c>{7, 6, 5, 5, 4, 1}</c>.</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="boundaries">A strictly increasing sequence of boundaries of the intervals over the
            real line in which the data sets point will be assigned.</param><exception cref="T:System.ArgumentException">Thrown if data set or boundaries intervals are null.</exception></member><member name="M:dotnetCHARTING.StatisticalEngine.CFrequencyTableAOR(System.String,dotnetCHARTING.Series,System.Double[])"><summary>
            Calculates the cumulative frequency table from above for a discrete data set in accordance with the open
            right boundary (ORB) convention.
            </summary><remarks>
            The value of the cumulative frequency table values
            at a given point is the number of elements within the data set above the lowest value of
            that interval of the frequency table constructed in accordance with the open right boundary.
            
            <h4>Example</h4><p>Within this example we work through an illustration in which the cumulative frequency
            table from above using the open right boundary convention is evaluated.</p><p>Consider the set of boundaries <c>{ 1, 2, 3, 4, 5 }</c>, which divide the real
            line into six sub-intervals. Now if we use the open right boundary convention then
            the real line will be divided into the sub-intervals:<br></br><br></br>
            (-infinity, 1), [1,2), [2,3), [3,4), [4,5), [5, infinity)<br></br><br></br>
            Note that, each point on the real line can be assigned to one of these sub-intervals
            and therefore when assigning a data point to one of these intervals there will only
            be one sub-interval in which it belongs.</p><p>Therefore, if we consider the data set <c>{ 0.5, 1.4, 1.3, 2.0, 2.3, 4.5, 5.5}</c>,
            and if we assign this data set in accordance with the Open Right Boundary (ORB) convention
            then we will have:
            <ul><li> Within the interval <c>(-infinity, 1)</c>, we assign the data element <c>0.5</c>;
            and hence the frequency of this interval is <c>1</c>.
            </li><li> Within the interval <c>[1, 2)</c>, we assign the data element <c>1.4, 1.3</c>;
            and hence the frequency of this interval (wrt ORB convention) is <c>2</c>.
            </li><li> Within the interval <c>[2, 3)</c>, we assign the data element <c>2.0, 2.3</c>, and hence
            the frequency of this interval (wrt ORB convention) is <c>2</c>.
            </li><li> Within the interval <c>[3, 4)</c>, we assign no data elements, and hence the frequency of
            this interval (wrt ORB convention) is <c>0</c>.
            </li><li> Within the interval <c>[4, 5)</c>, we assign the data element <c>4.5</c>, and hence
            the frequency of this interval (wrt ORB convention) is <c>1</c>.
            </li><li> Within the interval <c>[5, infinity)</c>, we assign the data element <c>5.5</c>, and
            hence the frequency of this interval (wrt ORB convention) is <c>1</c>.
            </li></ul></p><p>Now in follows that the associated values of the cumulative frequency table are given by:
            <ul><li> Cumulative frequency table above <c>-infinity</c> is: <c>1 + 1 + 0 + 2 + 2 + 1 = 7</c></li><li> Cumulative frequency table above <c>1</c> is: <c>1 + 0 + 2 + 2 + 1 = 6</c></li><li> Cumulative frequency table above <c>2</c> is: <c>0 + 2 + 2 + 1 = 5</c></li><li> Cumulative frequency table above <c>3</c> is: <c>2 + 2 + 1 = 5</c></li><li> Cumulative frequency table above <c>4</c> is: <c>2 + 1 = 3</c></li><li> Cumulative frequency table above <c>5</c> is: <c>1</c></li></ul></p><p>Hence, for this case the series returned by this methods to represent the cumulative
            frequency table would be: <c>{7, 6, 5, 5, 3, 1}</c>.</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><param name="boundaries">A strictly increasing sequence of boundaries of the intervals over the
            real line in which the data sets point will be assigned.</param><exception cref="T:System.ArgumentException">Thrown if data set or boundaries intervals are null.</exception></member><member name="M:dotnetCHARTING.StatisticalEngine.CFrequencyTableAOR(dotnetCHARTING.Series,System.Double[])"><summary>
            Calculates the cumulative frequency table from above for a discrete data set in accordance with the open
            right boundary (ORB) convention.
            </summary><remarks>
            The value of the cumulative frequency table values
            at a given point is the number of elements within the data set above the lowest value of
            that interval of the frequency table constructed in accordance with the open right boundary.
            
            <h4>Example</h4><p>Within this example we work through an illustration in which the cumulative frequency
            table from above using the open right boundary convention is evaluated.</p><p>Consider the set of boundaries <c>{ 1, 2, 3, 4, 5 }</c>, which divide the real
            line into six sub-intervals. Now if we use the open right boundary convention then
            the real line will be divided into the sub-intervals:<br></br><br></br>
            (-infinity, 1), [1,2), [2,3), [3,4), [4,5), [5, infinity)<br></br><br></br>
            Note that, each point on the real line can be assigned to one of these sub-intervals
            and therefore when assigning a data point to one of these intervals there will only
            be one sub-interval in which it belongs.</p><p>Therefore, if we consider the data set <c>{ 0.5, 1.4, 1.3, 2.0, 2.3, 4.5, 5.5}</c>,
            and if we assign this data set in accordance with the Open Right Boundary (ORB) convention
            then we will have:
            <ul><li> Within the interval <c>(-infinity, 1)</c>, we assign the data element <c>0.5</c>;
            and hence the frequency of this interval is <c>1</c>.
            </li><li> Within the interval <c>[1, 2)</c>, we assign the data element <c>1.4, 1.3</c>;
            and hence the frequency of this interval (wrt ORB convention) is <c>2</c>.
            </li><li> Within the interval <c>[2, 3)</c>, we assign the data element <c>2.0, 2.3</c>, and hence
            the frequency of this interval (wrt ORB convention) is <c>2</c>.
            </li><li> Within the interval <c>[3, 4)</c>, we assign no data elements, and hence the frequency of
            this interval (wrt ORB convention) is <c>0</c>.
            </li><li> Within the interval <c>[4, 5)</c>, we assign the data element <c>4.5</c>, and hence
            the frequency of this interval (wrt ORB convention) is <c>1</c>.
            </li><li> Within the interval <c>[5, infinity)</c>, we assign the data element <c>5.5</c>, and
            hence the frequency of this interval (wrt ORB convention) is <c>1</c>.
            </li></ul></p><p>Now in follows that the associated values of the cumulative frequency table are given by:
            <ul><li> Cumulative frequency table above <c>-infinity</c> is: <c>1 + 1 + 0 + 2 + 2 + 1 = 7</c></li><li> Cumulative frequency table above <c>1</c> is: <c>1 + 0 + 2 + 2 + 1 = 6</c></li><li> Cumulative frequency table above <c>2</c> is: <c>0 + 2 + 2 + 1 = 5</c></li><li> Cumulative frequency table above <c>3</c> is: <c>2 + 2 + 1 = 5</c></li><li> Cumulative frequency table above <c>4</c> is: <c>2 + 1 = 3</c></li><li> Cumulative frequency table above <c>5</c> is: <c>1</c></li></ul></p><p>Hence, for this case the series returned by this methods to represent the cumulative
            frequency table would be: <c>{7, 6, 5, 5, 3, 1}</c>.</p></remarks><param name="s">A statistical series.</param><param name="boundaries">A strictly increasing sequence of boundaries of the intervals over the
            real line in which the data sets point will be assigned.</param><exception cref="T:System.ArgumentException">Thrown if the input data are not given.</exception></member><member name="M:dotnetCHARTING.StatisticalEngine.CFrequencyTableAOR(dotnetCHARTING.SeriesCollection,System.Double[])"><summary>
             Calculates the cumulative frequency table from above for a discrete data set in accordance with the open
             right boundary (ORB) convention.
             </summary><remarks>
             The value of the cumulative frequency table values
             at a given point is the number of elements within the data set above the lowest value of
             that interval of the frequency table constructed in accordance with the open right boundary.
            
             <h4>Example</h4><p>Within this example we work through an illustration in which the cumulative frequency
             table from above using the open right boundary convention is evaluated.</p><p>Consider the set of boundaries <c>{ 1, 2, 3, 4, 5 }</c>, which divide the real
             line into six sub-intervals. Now if we use the open right boundary convention then
             the real line will be divided into the sub-intervals:<br></br><br></br>
             (-infinity, 1), [1,2), [2,3), [3,4), [4,5), [5, infinity)<br></br><br></br>
             Note that, each point on the real line can be assigned to one of these sub-intervals
             and therefore when assigning a data point to one of these intervals there will only
             be one sub-interval in which it belongs.</p><p>Therefore, if we consider the data set <c>{ 0.5, 1.4, 1.3, 2.0, 2.3, 4.5, 5.5}</c>,
             and if we assign this data set in accordance with the Open Right Boundary (ORB) convention
             then we will have:
             <ul><li> Within the interval <c>(-infinity, 1)</c>, we assign the data element <c>0.5</c>;
             and hence the frequency of this interval is <c>1</c>.
             </li><li> Within the interval <c>[1, 2)</c>, we assign the data element <c>1.4, 1.3</c>;
             and hence the frequency of this interval (wrt ORB convention) is <c>2</c>.
             </li><li> Within the interval <c>[2, 3)</c>, we assign the data element <c>2.0, 2.3</c>, and hence
             the frequency of this interval (wrt ORB convention) is <c>2</c>.
             </li><li> Within the interval <c>[3, 4)</c>, we assign no data elements, and hence the frequency of
             this interval (wrt ORB convention) is <c>0</c>.
             </li><li> Within the interval <c>[4, 5)</c>, we assign the data element <c>4.5</c>, and hence
             the frequency of this interval (wrt ORB convention) is <c>1</c>.
             </li><li> Within the interval <c>[5, infinity)</c>, we assign the data element <c>5.5</c>, and
             hence the frequency of this interval (wrt ORB convention) is <c>1</c>.
             </li></ul></p><p>Now in follows that the associated values of the cumulative frequency table are given by:
             <ul><li> Cumulative frequency table above <c>-infinity</c> is: <c>1 + 1 + 0 + 2 + 2 + 1 = 7</c></li><li> Cumulative frequency table above <c>1</c> is: <c>1 + 0 + 2 + 2 + 1 = 6</c></li><li> Cumulative frequency table above <c>2</c> is: <c>0 + 2 + 2 + 1 = 5</c></li><li> Cumulative frequency table above <c>3</c> is: <c>2 + 2 + 1 = 5</c></li><li> Cumulative frequency table above <c>4</c> is: <c>2 + 1 = 3</c></li><li> Cumulative frequency table above <c>5</c> is: <c>1</c></li></ul></p><p>Hence, for this case the series returned by this methods to represent the cumulative
             frequency table would be: <c>{7, 6, 5, 5, 3, 1}</c>.</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
             you will need to pass a series collection containing this two series.</param><param name="boundaries">A strictly increasing sequence of boundaries of the intervals over the
             real line in which the data sets point will be assigned.</param><exception cref="T:System.ArgumentException">Thrown if the input data are not given.</exception></member><member name="M:dotnetCHARTING.StatisticalEngine.CFrequencyTableBOL(System.String,dotnetCHARTING.Series,System.Double[])"><summary>
            Calculates the cumulative frequency table from below for a discrete data set in accordance with the
            open left boundary (OLB) convention.
            </summary><remarks>
            The value of the cumulative frequency table
            values at a given point is the number of elements within the data set below the highest
            value of that interval of the frequency table constructed in accordance with the open left
            boundary convention.
            
            <h4>Example</h4><p>Within this example we work through an illustration in which the cumulative frequency
            table from below using the open left boundary convention is evaluated.</p><p>Consider the set of boundaries <c>{ 1, 2, 3, 4, 5 }</c>, which divide the real
            line into six sub-intervals. Now if we use the open left boundary convention then
            the real line will be divided into the sub-intervals:<br></br><br></br>
            (-infinity, 1], (1,2], (2,3], (3,4], (4,5], (5, infinity)<br></br><br></br>
            Note that, each point on the real line can be assigned to one of these sub-intervals
            and therefore when assigning a data point to one of these intervals there will only
            be one sub-interval in which it belongs.</p><p>Therefore, if we consider the data set <c>{ 0.5, 1.4, 1.3, 2.0, 2.3, 4.5, 5.5}</c>,
            if the assign this data set in accordance with the above the conventions then we will
            have: using Open Left Boundary (OLB) convention:
            <ul><li> Within the interval <c>(-infinity, 1]</c>, we assign the data element <c>0.5</c>;
            and hence the frequency of this interval is <c>1</c>.
            </li><li> Within the interval <c>(1, 2]</c>, we assign the data element <c>1.4, 1.3, 2.0</c>;
            and hence the frequency of this interval (wrt OLB convention) is <c>3</c>.
            </li><li> Within the interval <c>(2, 3]</c>, we assign the data element <c>2.3</c>, and hence
            the frequency of this interval (wrt OLB convention) is <c>1</c>.
            </li><li> Within the interval <c>(3, 4]</c>, we assign no data elements, and hence the frequency of
            this interval (wrt OLB convention) is <c>0</c>.
            </li><li> Within the interval <c>(4, 5]</c>, we assign the data element <c>4.5</c>, and hence
            the frequency of this interval (wrt OLB convention) is <c>1</c>.
            </li><li> Within the interval <c>(5, infinity)</c>, we assign the data element <c>5.5</c>, and
            hence the frequency of this interval (wrt OLB convention) is <c>1</c>.
            </li></ul></p><p>Now in follows that the associated values of the cumulative frequency table are given by:
            <ul><li> Cumulative frequency table up to <c>1</c> is: <c>1</c></li><li> Cumulative frequency table up to <c>2</c> is: <c>4</c></li><li> Cumulative frequency table up to <c>3</c> is: <c>5</c></li><li> Cumulative frequency table up to <c>4</c> is: <c>5</c></li><li> Cumulative frequency table up to <c>5</c> is: <c>6</c></li><li> Cumulative frequency table up to <c>5</c> is: <c>7</c></li></ul></p><p>Hence, for this case the series returned by this methods to represent the cumulative
            frequency table would be: <c>{1, 4, 5, 5, 6, 7}</c>.</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><param name="boundaries">A strictly increasing sequence of boundaries of the intervals over the
            real line in which the data sets point will be assigned.</param><exception cref="T:System.ArgumentException">Thrown if the input data are not given.</exception><exception cref="T:System.ArgumentException">Thrown if data set or the boundaries intervals are null.</exception></member><member name="M:dotnetCHARTING.StatisticalEngine.CFrequencyTableBOL(dotnetCHARTING.Series,System.Double[])"><summary>
            Calculates the cumulative frequency table from below for a discrete data set in accordance with the
            open left boundary (OLB) convention.
            </summary><remarks>
            The value of the cumulative frequency table
            values at a given point is the number of elements within the data set below the highest
            value of that interval of the frequency table constructed in accordance with the open left
            boundary convention.
            
            <h4>Example</h4><p>Within this example we work through an illustration in which the cumulative frequency
            table from below using the open left boundary convention is evaluated.</p><p>Consider the set of boundaries <c>{ 1, 2, 3, 4, 5 }</c>, which divide the real
            line into six sub-intervals. Now if we use the open left boundary convention then
            the real line will be divided into the sub-intervals:<br></br><br></br>
            (-infinity, 1], (1,2], (2,3], (3,4], (4,5], (5, infinity)<br></br><br></br>
            Note that, each point on the real line can be assigned to one of these sub-intervals
            and therefore when assigning a data point to one of these intervals there will only
            be one sub-interval in which it belongs.</p><p>Therefore, if we consider the data set <c>{ 0.5, 1.4, 1.3, 2.0, 2.3, 4.5, 5.5}</c>,
            if the assign this data set in accordance with the above the conventions then we will
            have: using Open Left Boundary (OLB) convention:
            <ul><li> Within the interval <c>(-infinity, 1]</c>, we assign the data element <c>0.5</c>;
            and hence the frequency of this interval is <c>1</c>.
            </li><li> Within the interval <c>(1, 2]</c>, we assign the data element <c>1.4, 1.3, 2.0</c>;
            and hence the frequency of this interval (wrt OLB convention) is <c>3</c>.
            </li><li> Within the interval <c>(2, 3]</c>, we assign the data element <c>2.3</c>, and hence
            the frequency of this interval (wrt OLB convention) is <c>1</c>.
            </li><li> Within the interval <c>(3, 4]</c>, we assign no data elements, and hence the frequency of
            this interval (wrt OLB convention) is <c>0</c>.
            </li><li> Within the interval <c>(4, 5]</c>, we assign the data element <c>4.5</c>, and hence
            the frequency of this interval (wrt OLB convention) is <c>1</c>.
            </li><li> Within the interval <c>(5, infinity)</c>, we assign the data element <c>5.5</c>, and
            hence the frequency of this interval (wrt OLB convention) is <c>1</c>.
            </li></ul></p><p>Now in follows that the associated values of the cumulative frequency table are given by:
            <ul><li> Cumulative frequency table up to <c>1</c> is: <c>1</c></li><li> Cumulative frequency table up to <c>2</c> is: <c>4</c></li><li> Cumulative frequency table up to <c>3</c> is: <c>5</c></li><li> Cumulative frequency table up to <c>4</c> is: <c>5</c></li><li> Cumulative frequency table up to <c>5</c> is: <c>6</c></li><li> Cumulative frequency table up to <c>5</c> is: <c>7</c></li></ul></p><p>Hence, for this case the series returned by this methods to represent the cumulative
            frequency table would be: <c>{1, 4, 5, 5, 6, 7}</c>.</p></remarks><param name="s">A statistical series.</param><param name="boundaries">A strictly increasing sequence of boundaries of the intervals over the
            real line in which the data sets point will be assigned.</param><exception cref="T:System.ArgumentException">Thrown if the input data are not given.</exception><exception cref="T:System.ArgumentException">Thrown if data set or the boundaries intervals are null.</exception></member><member name="M:dotnetCHARTING.StatisticalEngine.CFrequencyTableBOL(dotnetCHARTING.SeriesCollection,System.Double[])"><summary>
            Calculates the cumulative frequency table from below for a discrete data set in accordance with the
            open left boundary (OLB) convention.
            </summary><remarks>
            The value of the cumulative frequency table
            values at a given point is the number of elements within the data set below the highest
            value of that interval of the frequency table constructed in accordance with the open left
            boundary convention.
            
            <h4>Example</h4><p>Within this example we work through an illustration in which the cumulative frequency
            table from below using the open left boundary convention is evaluated.</p><p>Consider the set of boundaries <c>{ 1, 2, 3, 4, 5 }</c>, which divide the real
            line into six sub-intervals. Now if we use the open left boundary convention then
            the real line will be divided into the sub-intervals:<br></br><br></br>
            (-infinity, 1], (1,2], (2,3], (3,4], (4,5], (5, infinity)<br></br><br></br>
            Note that, each point on the real line can be assigned to one of these sub-intervals
            and therefore when assigning a data point to one of these intervals there will only
            be one sub-interval in which it belongs.</p><p>Therefore, if we consider the data set <c>{ 0.5, 1.4, 1.3, 2.0, 2.3, 4.5, 5.5}</c>,
            if the assign this data set in accordance with the above the conventions then we will
            have: using Open Left Boundary (OLB) convention:
            <ul><li> Within the interval <c>(-infinity, 1]</c>, we assign the data element <c>0.5</c>;
            and hence the frequency of this interval is <c>1</c>.
            </li><li> Within the interval <c>(1, 2]</c>, we assign the data element <c>1.4, 1.3, 2.0</c>;
            and hence the frequency of this interval (wrt OLB convention) is <c>3</c>.
            </li><li> Within the interval <c>(2, 3]</c>, we assign the data element <c>2.3</c>, and hence
            the frequency of this interval (wrt OLB convention) is <c>1</c>.
            </li><li> Within the interval <c>(3, 4]</c>, we assign no data elements, and hence the frequency of
            this interval (wrt OLB convention) is <c>0</c>.
            </li><li> Within the interval <c>(4, 5]</c>, we assign the data element <c>4.5</c>, and hence
            the frequency of this interval (wrt OLB convention) is <c>1</c>.
            </li><li> Within the interval <c>(5, infinity)</c>, we assign the data element <c>5.5</c>, and
            hence the frequency of this interval (wrt OLB convention) is <c>1</c>.
            </li></ul></p><p>Now in follows that the associated values of the cumulative frequency table are given by:
            <ul><li> Cumulative frequency table up to <c>1</c> is: <c>1</c></li><li> Cumulative frequency table up to <c>2</c> is: <c>4</c></li><li> Cumulative frequency table up to <c>3</c> is: <c>5</c></li><li> Cumulative frequency table up to <c>4</c> is: <c>5</c></li><li> Cumulative frequency table up to <c>5</c> is: <c>6</c></li><li> Cumulative frequency table up to <c>5</c> is: <c>7</c></li></ul></p><p>Hence, for this case the series returned by this methods to represent the cumulative
            frequency table would be: <c>{1, 4, 5, 5, 6, 7}</c>.</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="boundaries">A strictly increasing sequence of boundaries of the intervals over the
            real line in which the data sets point will be assigned.</param><exception cref="T:System.ArgumentException">Thrown if data set or the boundaries intervals 
            are null.</exception></member><member name="M:dotnetCHARTING.StatisticalEngine.CFrequencyTableBOR(System.String,dotnetCHARTING.Series,System.Double[])"><summary>
            Calculates the cumulative frequency table from below for a discrete data set in accordance with the
            open right boundary (ORB) convention.
            </summary><remarks>
            The value of the cumulative frequency table
            values at a given point is the number of elements within the data set below the highest
            value of that interval of the frequency table constructed in accordance with the open right
            boundary convention.
            
            <h4>Example</h4><p>Within this example we work through an illustration in which the cumulative frequency
            table from below using the open right boundary convention is evaluated.</p><p>Consider the set of boundaries <c>{ 1, 2, 3, 4, 5 }</c>, which divide the real
            line into six sub-intervals. Now if we use the open right boundary convention then the
            real line will be divided into the sub-intervals:<br></br><br></br>
            (-infinity, 1), [1, 2), [2, 3), [3, 4), [4, 5), [5, infinity)<br></br><br></br>
            Note that, each point on the real line can be assigned to one of these sub-intervals
            and therefore when assigning a data point to one of these intervals there will only
            be one sub-interval in which it belongs.</p><p>Therefore, if we consider the data set <c>{ 0.5, 1.4, 1.3, 2.0, 2.3, 4.5, 5.5}</c>,
            if the assign this data set in accordance with the above the conventions then we will
            have using Open Right Boundary (ORB) convention:
            <ul><li> Within the interval <c>(-infinity, 1]</c>, we assign the data element <c>0.5</c>;
            and hence the frequency of this interval is <c>1</c>.
            </li><li> Within the interval <c>[1, 2)</c>, we assign the data element <c>1.4, 1.3</c>;
            and hence the frequency of this interval (wrt ORB convention) is <c>2</c>.
            </li><li> Within the interval <c>[2, 3)</c>, we assign the data element <c>2.0, 2.3</c>;
            and hence the frequency of this interval (wrt ORB convention) is <c>2</c>.
            </li><li> Within the interval <c>[3, 4)</c>, we assign no data elements, and hence the frequency
            of this interval (wrt ORB convention) is <c>0</c>.
            </li><li> Within the interval <c>[4, 5)</c>, we assign the data element <c>4.5</c>,
            and hence the frequency of this interval (wrt ORB convention) is <c>1</c>.
            </li><li> Within the interval <c>[5, infinity)</c>, we assign the data element <c>5.5</c>,
            and hence the frequency of this interval (wrt ORB convention) is <c>1</c>.
            </li></ul></p><p>Now in follows that the associated values of the cumulative frequency table are given by:
            <ul><li> Cumulative frequency table up to <c>1</c> is: <c>1</c></li><li> Cumulative frequency table up to <c>2</c> is: <c>3</c></li><li> Cumulative frequency table up to <c>3</c> is: <c>5</c></li><li> Cumulative frequency table up to <c>4</c> is: <c>5</c></li><li> Cumulative frequency table up to <c>5</c> is: <c>6</c></li><li> Cumulative frequency table up to <c>5</c> is: <c>7</c></li></ul></p><p>Hence, for this case the series returned by this methods to represent the cumulative
            frequency table would be: <c>{1, 3, 5, 5, 6, 7}</c>.</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><param name="boundaries">A strictly increasing sequence of boundaries of the intervals over the
            real line in which the data sets point will be assigned.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.CFrequencyTableBOR(dotnetCHARTING.Series,System.Double[])"><summary>
            Calculates the cumulative frequency table from below for a discrete data set in accordance with the
            open right boundary (ORB) convention.
            </summary><remarks>
            The value of the cumulative frequency table
            values at a given point is the number of elements within the data set below the highest
            value of that interval of the frequency table constructed in accordance with the open right
            boundary convention.
            
            <h4>Example</h4><p>Within this example we work through an illustration in which the cumulative frequency
            table from below using the open right boundary convention is evaluated.</p><p>Consider the set of boundaries <c>{ 1, 2, 3, 4, 5 }</c>, which divide the real
            line into six sub-intervals. Now if we use the open right boundary convention then the
            real line will be divided into the sub-intervals:<br></br><br></br>
            (-infinity, 1), [1, 2), [2, 3), [3, 4), [4, 5), [5, infinity)<br></br><br></br>
            Note that, each point on the real line can be assigned to one of these sub-intervals
            and therefore when assigning a data point to one of these intervals there will only
            be one sub-interval in which it belongs.</p><p>Therefore, if we consider the data set <c>{ 0.5, 1.4, 1.3, 2.0, 2.3, 4.5, 5.5}</c>,
            if the assign this data set in accordance with the above the conventions then we will
            have using Open Right Boundary (ORB) convention:
            <ul><li> Within the interval <c>(-infinity, 1]</c>, we assign the data element <c>0.5</c>;
            and hence the frequency of this interval is <c>1</c>.
            </li><li> Within the interval <c>[1, 2)</c>, we assign the data element <c>1.4, 1.3</c>;
            and hence the frequency of this interval (wrt ORB convention) is <c>2</c>.
            </li><li> Within the interval <c>[2, 3)</c>, we assign the data element <c>2.0, 2.3</c>;
            and hence the frequency of this interval (wrt ORB convention) is <c>2</c>.
            </li><li> Within the interval <c>[3, 4)</c>, we assign no data elements, and hence the frequency
            of this interval (wrt ORB convention) is <c>0</c>.
            </li><li> Within the interval <c>[4, 5)</c>, we assign the data element <c>4.5</c>,
            and hence the frequency of this interval (wrt ORB convention) is <c>1</c>.
            </li><li> Within the interval <c>[5, infinity)</c>, we assign the data element <c>5.5</c>,
            and hence the frequency of this interval (wrt ORB convention) is <c>1</c>.
            </li></ul></p><p>Now in follows that the associated values of the cumulative frequency table are given by:
            <ul><li> Cumulative frequency table up to <c>1</c> is: <c>1</c></li><li> Cumulative frequency table up to <c>2</c> is: <c>3</c></li><li> Cumulative frequency table up to <c>3</c> is: <c>5</c></li><li> Cumulative frequency table up to <c>4</c> is: <c>5</c></li><li> Cumulative frequency table up to <c>5</c> is: <c>6</c></li><li> Cumulative frequency table up to <c>5</c> is: <c>7</c></li></ul></p><p>Hence, for this case the series returned by this methods to represent the cumulative
            frequency table would be: <c>{1, 3, 5, 5, 6, 7}</c>.</p></remarks><param name="s">A statistical series.</param><param name="boundaries">A strictly increasing sequence of boundaries of the intervals over the
            real line in which the data sets point will be assigned.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.CFrequencyTableBOR(dotnetCHARTING.SeriesCollection,System.Double[])"><summary>
            Calculates the cumulative frequency table from below for a discrete data set in accordance with the
            open right boundary (ORB) convention.
            </summary><remarks>
            The value of the cumulative frequency table
            values at a given point is the number of elements within the data set below the highest
            value of that interval of the frequency table constructed in accordance with the open right
            boundary convention.
            
            <h4>Example</h4><p>Within this example we work through an illustration in which the cumulative frequency
            table from below using the open right boundary convention is evaluated.</p><p>Consider the set of boundaries <c>{ 1, 2, 3, 4, 5 }</c>, which divide the real
            line into six sub-intervals. Now if we use the open right boundary convention then the
            real line will be divided into the sub-intervals:<br></br><br></br>
            (-infinity, 1), [1, 2), [2, 3), [3, 4), [4, 5), [5, infinity)<br></br><br></br>
            Note that, each point on the real line can be assigned to one of these sub-intervals
            and therefore when assigning a data point to one of these intervals there will only
            be one sub-interval in which it belongs.</p><p>Therefore, if we consider the data set <c>{ 0.5, 1.4, 1.3, 2.0, 2.3, 4.5, 5.5}</c>,
            if the assign this data set in accordance with the above the conventions then we will
            have using Open Right Boundary (ORB) convention:
            <ul><li> Within the interval <c>(-infinity, 1]</c>, we assign the data element <c>0.5</c>;
            and hence the frequency of this interval is <c>1</c>.
            </li><li> Within the interval <c>[1, 2)</c>, we assign the data element <c>1.4, 1.3</c>;
            and hence the frequency of this interval (wrt ORB convention) is <c>2</c>.
            </li><li> Within the interval <c>[2, 3)</c>, we assign the data element <c>2.0, 2.3</c>;
            and hence the frequency of this interval (wrt ORB convention) is <c>2</c>.
            </li><li> Within the interval <c>[3, 4)</c>, we assign no data elements, and hence the frequency
            of this interval (wrt ORB convention) is <c>0</c>.
            </li><li> Within the interval <c>[4, 5)</c>, we assign the data element <c>4.5</c>,
            and hence the frequency of this interval (wrt ORB convention) is <c>1</c>.
            </li><li> Within the interval <c>[5, infinity)</c>, we assign the data element <c>5.5</c>,
            and hence the frequency of this interval (wrt ORB convention) is <c>1</c>.
            </li></ul></p><p>Now in follows that the associated values of the cumulative frequency table are given by:
            <ul><li> Cumulative frequency table up to <c>1</c> is: <c>1</c></li><li> Cumulative frequency table up to <c>2</c> is: <c>3</c></li><li> Cumulative frequency table up to <c>3</c> is: <c>5</c></li><li> Cumulative frequency table up to <c>4</c> is: <c>5</c></li><li> Cumulative frequency table up to <c>5</c> is: <c>6</c></li><li> Cumulative frequency table up to <c>5</c> is: <c>7</c></li></ul></p><p>Hence, for this case the series returned by this methods to represent the cumulative
            frequency table would be: <c>{1, 3, 5, 5, 6, 7}</c>.</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="boundaries">A strictly increasing sequence of boundaries of the intervals over the
            real line in which the data sets point will be assigned.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.FrequencyTableOL(System.String,dotnetCHARTING.Series,System.Double[])"><summary>
            Calculates the frequency table with respect to the open left boundary convention for YValues of the series.
            </summary><remarks>
            Say for example the boundary points used are <c>{b_1, b_2, ..., b_n}</c>,
            now the first term of the array returned which represents the frequency table, is the
            number of elements from the data set within the interval <c>(-infinity, b_1)</c>,
            the second term of the array returned is the number of elements from the data set within
            the interval <c>[b_1, b_2)</c>, and so on...
             
            <h4>Example</h4><p>Consider the set of boundaries <c>{ 1, 2, 3, 4, 5 }</c>, which divide the real
            line into six sub-intervals. Now if we use the open left boundary convention then the
            real line will be divided into the sub-intervals:<br></br><br></br>
            (-infinity, 1], (1,2], (2,3], (3,4], (4,5], (5, infinity)<br></br><br></br>
            Note that, each point on the real line can be assigned to one of these sub-intervals
            and therefore when assigning a data point to one of these intervals there will only
            be one sub-interval in which it belongs.</p><p>Therefore, if we consider the data set <c>{ 0.5, 1.4, 1.3, 2.0, 2.3, 4.5, 5.5}</c>,
            if the assign this data set in accordance with the above the conventions then we will
            have: using Open Left Boundary (OLB) convention:
            <ul><li> Within the interval <c>(-infinity, 1]</c>, we assign the data element <c>0.5</c>;
            and hence the frequency of this interval is <c>1</c>.
            </li><li> Within the interval <c>(1, 2]</c>, we assign the data element <c>1.4, 1.3, 2.0</c>;
            and hence the frequency of this interval (wrt OLB convention) is <c>3</c>.
            </li><li> Within the interval <c>(2, 3]</c>, we assign the data element <c>2.3</c>, and hence
            the frequency of this interval (wrt OLB convention) is <c>1</c>.
            </li><li> Within the interval <c>(3, 4]</c>, we assign no data elements, and hence the frequency of
            this interval (wrt OLB convention) is <c>0</c>.
            </li><li> Within the interval <c>(4, 5]</c>, we assign the data element <c>4.5</c>, and hence
            the frequency of this interval (wrt OLB convention) is <c>1</c>.
            </li><li> Within the interval <c>(5, infinity)</c>, we assign the data element <c>5.5</c>, and
            hence the frequency of this interval (wrt OLB convention) is <c>1</c>.
            </li></ul></p><p>Hence, in this case the series returned corresponding to the frequency table will be
            <c>{1, 3, 1, 0, 1, 1}</c>.</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><param name="boundaries">A strictly increasing sequence of boundaries of the intervals over the
            real line in which the data sets point will be assigned.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.FrequencyTableOL(dotnetCHARTING.Series,System.Double[])"><summary>
            Calculates the frequency table with respect to the open left boundary convention for YValues of the series.
            </summary><remarks>
            Say for example the boundary points used are <c>{b_1, b_2, ..., b_n}</c>,
            now the first term of the array returned which represents the frequency table, is the
            number of elements from the data set within the interval <c>(-infinity, b_1)</c>,
            the second term of the array returned is the number of elements from the data set within
            the interval <c>[b_1, b_2)</c>, and so on...
             
            <h4>Example</h4><p>Consider the set of boundaries <c>{ 1, 2, 3, 4, 5 }</c>, which divide the real
            line into six sub-intervals. Now if we use the open left boundary convention then the
            real line will be divided into the sub-intervals:<br></br><br></br>
            (-infinity, 1], (1,2], (2,3], (3,4], (4,5], (5, infinity)<br></br><br></br>
            Note that, each point on the real line can be assigned to one of these sub-intervals
            and therefore when assigning a data point to one of these intervals there will only
            be one sub-interval in which it belongs.</p><p>Therefore, if we consider the data set <c>{ 0.5, 1.4, 1.3, 2.0, 2.3, 4.5, 5.5}</c>,
            if the assign this data set in accordance with the above the conventions then we will
            have: using Open Left Boundary (OLB) convention:
            <ul><li> Within the interval <c>(-infinity, 1]</c>, we assign the data element <c>0.5</c>;
            and hence the frequency of this interval is <c>1</c>.
            </li><li> Within the interval <c>(1, 2]</c>, we assign the data element <c>1.4, 1.3, 2.0</c>;
            and hence the frequency of this interval (wrt OLB convention) is <c>3</c>.
            </li><li> Within the interval <c>(2, 3]</c>, we assign the data element <c>2.3</c>, and hence
            the frequency of this interval (wrt OLB convention) is <c>1</c>.
            </li><li> Within the interval <c>(3, 4]</c>, we assign no data elements, and hence the frequency of
            this interval (wrt OLB convention) is <c>0</c>.
            </li><li> Within the interval <c>(4, 5]</c>, we assign the data element <c>4.5</c>, and hence
            the frequency of this interval (wrt OLB convention) is <c>1</c>.
            </li><li> Within the interval <c>(5, infinity)</c>, we assign the data element <c>5.5</c>, and
            hence the frequency of this interval (wrt OLB convention) is <c>1</c>.
            </li></ul></p><p>Hence, in this case the series returned corresponding to the frequency table will be
            <c>{1, 3, 1, 0, 1, 1}</c>.</p></remarks><param name="s">A statistical series.</param><param name="boundaries">A strictly increasing sequence of boundaries of the intervals over the
            real line in which the data sets point will be assigned.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.FrequencyTableOL(dotnetCHARTING.SeriesCollection,System.Double[])"><summary>
            Calculates the frequency table with respect to the open left boundary convention for YValues of the series.
            </summary><remarks>
            Say for example the boundary points used are <c>{b_1, b_2, ..., b_n}</c>,
            now the first term of the array returned which represents the frequency table, is the
            number of elements from the data set within the interval <c>(-infinity, b_1)</c>,
            the second term of the array returned is the number of elements from the data set within
            the interval <c>[b_1, b_2)</c>, and so on...
             
            <h4>Example</h4><p>Consider the set of boundaries <c>{ 1, 2, 3, 4, 5 }</c>, which divide the real
            line into six sub-intervals. Now if we use the open left boundary convention then the
            real line will be divided into the sub-intervals:<br></br><br></br>
            (-infinity, 1], (1,2], (2,3], (3,4], (4,5], (5, infinity)<br></br><br></br>
            Note that, each point on the real line can be assigned to one of these sub-intervals
            and therefore when assigning a data point to one of these intervals there will only
            be one sub-interval in which it belongs.</p><p>Therefore, if we consider the data set <c>{ 0.5, 1.4, 1.3, 2.0, 2.3, 4.5, 5.5}</c>,
            if the assign this data set in accordance with the above the conventions then we will
            have: using Open Left Boundary (OLB) convention:
            <ul><li> Within the interval <c>(-infinity, 1]</c>, we assign the data element <c>0.5</c>;
            and hence the frequency of this interval is <c>1</c>.
            </li><li> Within the interval <c>(1, 2]</c>, we assign the data element <c>1.4, 1.3, 2.0</c>;
            and hence the frequency of this interval (wrt OLB convention) is <c>3</c>.
            </li><li> Within the interval <c>(2, 3]</c>, we assign the data element <c>2.3</c>, and hence
            the frequency of this interval (wrt OLB convention) is <c>1</c>.
            </li><li> Within the interval <c>(3, 4]</c>, we assign no data elements, and hence the frequency of
            this interval (wrt OLB convention) is <c>0</c>.
            </li><li> Within the interval <c>(4, 5]</c>, we assign the data element <c>4.5</c>, and hence
            the frequency of this interval (wrt OLB convention) is <c>1</c>.
            </li><li> Within the interval <c>(5, infinity)</c>, we assign the data element <c>5.5</c>, and
            hence the frequency of this interval (wrt OLB convention) is <c>1</c>.
            </li></ul></p><p>Hence, in this case the series returned corresponding to the frequency table will be
            <c>{1, 3, 1, 0, 1, 1}</c>.</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="boundaries">A strictly increasing sequence of boundaries of the intervals over the
            real line in which the data sets point will be assigned.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.FrequencyTableOR(System.String,dotnetCHARTING.Series,System.Double[])"><summary>
            Calculates the frequency table with respect to the open right boundary convention for a discrete data set.
            </summary><remarks>
            Say for example the boundary points used are <c>{b_1, b_2, ..., b_n}</c>, now the
            first term of the array returned which represents the frequency table, is the number of elements
            from the data set within the interval <c>(-infinity, b_1)</c>, the second term of the array
            returned is the number of elements from the data set within the interval <c>[b_1, b_2)</c>,
            and so on...
            
            <h4>Example</h4><p>Consider the set of boundaries <c>{ 1, 2, 3, 4, 5 }</c>, which divide the real
            line into six sub-intervals. Now if we use the open right boundary convention then the
            real line will be divided into the sub-intervals:<br></br><br></br>
            (-infinity, 1), [1, 2), [2, 3), [3, 4), [4, 5), [5, infinity)<br></br><br></br>
            Note that, each point on the real line can be assigned to one of these sub-intervals
            and therefore when assigning a data point to one of these intervals there will only
            be one sub-interval in which it belongs.</p><p>Therefore, if we consider the data set <c>{ 0.5, 1.4, 1.3, 2.0, 2.3, 4.5, 5.5}</c>,
            if you assign this data set in accordance with the above the conventions then we will
            have using Open Right Boundary (ORB) convention:
            <ul><li> Within the interval <c>(-infinity, 1]</c>, we assign the data element <c>0.5</c>;
            and hence the frequency of this interval is <c>1</c>.
            </li><li> Within the interval <c>[1, 2)</c>, we assign the data element <c>1.4, 1.3</c>;
            and hence the frequency of this interval (wrt ORB convention) is <c>2</c>.
            </li><li> Within the interval <c>[2, 3)</c>, we assign the data element <c>2.0, 2.3</c>;
            and hence the frequency of this interval (wrt ORB convention) is <c>2</c>.
            </li><li> Within the interval <c>[3, 4)</c>, we assign no data elements, and hence the frequency
            of this interval (wrt ORB convention) is <c>0</c>.
            </li><li> Within the interval <c>[4, 5)</c>, we assign the data element <c>4.5</c>,
            and hence the frequency of this interval (wrt ORB convention) is <c>1</c>.
            </li><li> Within the interval <c>[5, infinity)</c>, we assign the data element <c>5.5</c>,
            and hence the frequency of this interval (wrt ORB convention) is <c>1</c>.
            </li></ul></p><p>Hence, in this case the series returned corresponding to the frequency table will be
            <c>{1, 2, 2, 0, 1, 1}</c>.</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><param name="boundaries">A strictly increasing sequence of boundaries of the intervals over the
            real line in which the data sets point will be assigned.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.FrequencyTableOR(dotnetCHARTING.Series,System.Double[])"><summary>
            Calculates the frequency table with respect to the open right boundary convention for a discrete data set.
            </summary><remarks>
            Say for example the boundary points used are <c>{b_1, b_2, ..., b_n}</c>, now the
            first term of the array returned which represents the frequency table, is the number of elements
            from the data set within the interval <c>(-infinity, b_1)</c>, the second term of the array
            returned is the number of elements from the data set within the interval <c>[b_1, b_2)</c>,
            and so on...
            
            <h4>Example</h4><p>Consider the set of boundaries <c>{ 1, 2, 3, 4, 5 }</c>, which divide the real
            line into six sub-intervals. Now if we use the open right boundary convention then the
            real line will be divided into the sub-intervals:<br></br><br></br>
            (-infinity, 1), [1, 2), [2, 3), [3, 4), [4, 5), [5, infinity)<br></br><br></br>
            Note that, each point on the real line can be assigned to one of these sub-intervals
            and therefore when assigning a data point to one of these intervals there will only
            be one sub-interval in which it belongs.</p><p>Therefore, if we consider the data set <c>{ 0.5, 1.4, 1.3, 2.0, 2.3, 4.5, 5.5}</c>,
            if you assign this data set in accordance with the above the conventions then we will
            have using Open Right Boundary (ORB) convention:
            <ul><li> Within the interval <c>(-infinity, 1]</c>, we assign the data element <c>0.5</c>;
            and hence the frequency of this interval is <c>1</c>.
            </li><li> Within the interval <c>[1, 2)</c>, we assign the data element <c>1.4, 1.3</c>;
            and hence the frequency of this interval (wrt ORB convention) is <c>2</c>.
            </li><li> Within the interval <c>[2, 3)</c>, we assign the data element <c>2.0, 2.3</c>;
            and hence the frequency of this interval (wrt ORB convention) is <c>2</c>.
            </li><li> Within the interval <c>[3, 4)</c>, we assign no data elements, and hence the frequency
            of this interval (wrt ORB convention) is <c>0</c>.
            </li><li> Within the interval <c>[4, 5)</c>, we assign the data element <c>4.5</c>,
            and hence the frequency of this interval (wrt ORB convention) is <c>1</c>.
            </li><li> Within the interval <c>[5, infinity)</c>, we assign the data element <c>5.5</c>,
            and hence the frequency of this interval (wrt ORB convention) is <c>1</c>.
            </li></ul></p><p>Hence, in this case the series returned corresponding to the frequency table will be
            <c>{1, 2, 2, 0, 1, 1}</c>.</p></remarks><param name="s">A statistical series.</param><param name="boundaries">A strictly increasing sequence of boundaries of the intervals over the
            real line in which the data sets point will be assigned.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.FrequencyTableOR(dotnetCHARTING.SeriesCollection,System.Double[])"><summary>
            Calculates the frequency table with respect to the open right boundary convention for a discrete data set.
            </summary><remarks>
            Say for example the boundary points used are <c>{b_1, b_2, ..., b_n}</c>, now the
            first term of the array returned which represents the frequency table, is the number of elements
            from the data set within the interval <c>(-infinity, b_1)</c>, the second term of the array
            returned is the number of elements from the data set within the interval <c>[b_1, b_2)</c>,
            and so on...
            
            <h4>Example</h4><p>Consider the set of boundaries <c>{ 1, 2, 3, 4, 5 }</c>, which divide the real
            line into six sub-intervals. Now if we use the open right boundary convention then the
            real line will be divided into the sub-intervals:<br></br><br></br>
            (-infinity, 1), [1, 2), [2, 3), [3, 4), [4, 5), [5, infinity)<br></br><br></br>
            Note that, each point on the real line can be assigned to one of these sub-intervals
            and therefore when assigning a data point to one of these intervals there will only
            be one sub-interval in which it belongs.</p><p>Therefore, if we consider the data set <c>{ 0.5, 1.4, 1.3, 2.0, 2.3, 4.5, 5.5}</c>,
            if you assign this data set in accordance with the above the conventions then we will
            have using Open Right Boundary (ORB) convention:
            <ul><li> Within the interval <c>(-infinity, 1]</c>, we assign the data element <c>0.5</c>;
            and hence the frequency of this interval is <c>1</c>.
            </li><li> Within the interval <c>[1, 2)</c>, we assign the data element <c>1.4, 1.3</c>;
            and hence the frequency of this interval (wrt ORB convention) is <c>2</c>.
            </li><li> Within the interval <c>[2, 3)</c>, we assign the data element <c>2.0, 2.3</c>;
            and hence the frequency of this interval (wrt ORB convention) is <c>2</c>.
            </li><li> Within the interval <c>[3, 4)</c>, we assign no data elements, and hence the frequency
            of this interval (wrt ORB convention) is <c>0</c>.
            </li><li> Within the interval <c>[4, 5)</c>, we assign the data element <c>4.5</c>,
            and hence the frequency of this interval (wrt ORB convention) is <c>1</c>.
            </li><li> Within the interval <c>[5, infinity)</c>, we assign the data element <c>5.5</c>,
            and hence the frequency of this interval (wrt ORB convention) is <c>1</c>.
            </li></ul></p><p>Hence, in this case the series returned corresponding to the frequency table will be
            <c>{1, 2, 2, 0, 1, 1}</c>.</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="boundaries">A strictly increasing sequence of boundaries of the intervals over the
            real line in which the data sets point will be assigned.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.RFrequencyTableOL(System.String,dotnetCHARTING.Series,System.Double[])"><summary> Calculates the relative frequency table for a
            discrete data set in accordance with the open left boundary
            (OLB) convention.  
            </summary><remarks> The relative frequency table
            normalized the data with regard to the size of the data set before evaluating
            the frequency table is exactly the same fashion as <see cref="T:dotnetCHARTING.AnalysisEngine.Implementation.StatisticalFrequencyTableOL"></see>.
            
            <h3>Further Explanation</h3><p>If we are comparing two or more data sets then the frequencies should be
            normalized to reflect the possible different sizes of the data sets themselves.
            To normalize a data set we much first divide the data set into a collection of
            classes into which the elements are assigned. Here we assign the data set in
            accordance with the open left boundary convention where the class frequencies
            are just the number of elements within each of the sub-intervals of the real
            line in accordance with the open left boundary convention (see example below).</p><p>To evaluate the relative frequency we apply the following formula to each
            class:<br></br><br></br>
            Relative frequency = (class frequency) / (total frequency)<br></br><br></br>
            where the class frequency is the number of data points within a given sub-interval
            of the real line, and the total frequency is the total number of elements within
            the data set considered.</p><h4>Example Illustration the Open Left Boundary Convention</h4><p>Consider the set of boundaries <c>{ b_1, b_2, b_3, b_4, b_5 }</c>, where
            <c>b_1 &lt; b_2 &lt; b_3 &lt; b_4 &lt; b_5</c>, which divide the real line into six
            sub-intervals. Now if we use the open left boundary convention then the real line
            will be divided into the sub-intervals:<br></br><br></br>
            (-infinity, b_1], (b_1,b_2], (b_2,b_3], (b_3,b_4], (b_4,b_5], (5, infinity)<br></br><br></br>
            Note that, each point on the real line can be assigned to one of these sub-intervals
            and therefore when assigning a data point to one of these intervals there will only
            be one sub-interval in which it belongs.</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><param name="boundaries">A strictly increasing sequence of boundaries of the intervals over the
            real line in which the data sets point will be assigned.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.RFrequencyTableOL(dotnetCHARTING.Series,System.Double[])"><summary> Calculates the relative frequency table for a
            discrete data set in accordance with the open left boundary
            (OLB) convention.  
            </summary><remarks> The relative frequency table
            normalized the data with regard to the size of the data set before evaluating
            the frequency table is exactly the same fashion as <see cref="T:dotnetCHARTING.AnalysisEngine.Implementation.StatisticalFrequencyTableOL"></see>.
            
            <h3>Further Explanation</h3><p>If we are comparing two or more data sets then the frequencies should be
            normalized to reflect the possible different sizes of the data sets themselves.
            To normalize a data set we much first divide the data set into a collection of
            classes into which the elements are assigned. Here we assign the data set in
            accordance with the open left boundary convention where the class frequencies
            are just the number of elements within each of the sub-intervals of the real
            line in accordance with the open left boundary convention (see example below).</p><p>To evaluate the relative frequency we apply the following formula to each
            class:<br></br><br></br>
            Relative frequency = (class frequency) / (total frequency)<br></br><br></br>
            where the class frequency is the number of data points within a given sub-interval
            of the real line, and the total frequency is the total number of elements within
            the data set considered.</p><h4>Example Illustration the Open Left Boundary Convention</h4><p>Consider the set of boundaries <c>{ b_1, b_2, b_3, b_4, b_5 }</c>, where
            <c>b_1 &lt; b_2 &lt; b_3 &lt; b_4 &lt; b_5</c>, which divide the real line into six
            sub-intervals. Now if we use the open left boundary convention then the real line
            will be divided into the sub-intervals:<br></br><br></br>
            (-infinity, b_1], (b_1,b_2], (b_2,b_3], (b_3,b_4], (b_4,b_5], (5, infinity)<br></br><br></br>
            Note that, each point on the real line can be assigned to one of these sub-intervals
            and therefore when assigning a data point to one of these intervals there will only
            be one sub-interval in which it belongs.</p></remarks><param name="s">A statistical series.</param><param name="boundaries">A strictly increasing sequence of boundaries of the intervals over the
            real line in which the data sets point will be assigned.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.RFrequencyTableOL(dotnetCHARTING.SeriesCollection,System.Double[])"><summary> Calculates the relative frequency table for a
            discrete data set in accordance with the open left boundary
            (OLB) convention.  
            </summary><remarks> The relative frequency table
            normalized the data with regard to the size of the data set before evaluating
            the frequency table is exactly the same fashion as <see cref="T:dotnetCHARTING.AnalysisEngine.Implementation.StatisticalFrequencyTableOL"></see>.
            
            <h3>Further Explanation</h3><p>If we are comparing two or more data sets then the frequencies should be
            normalized to reflect the possible different sizes of the data sets themselves.
            To normalize a data set we much first divide the data set into a collection of
            classes into which the elements are assigned. Here we assign the data set in
            accordance with the open left boundary convention where the class frequencies
            are just the number of elements within each of the sub-intervals of the real
            line in accordance with the open left boundary convention (see example below).</p><p>To evaluate the relative frequency we apply the following formula to each
            class:<br></br><br></br>
            Relative frequency = (class frequency) / (total frequency)<br></br><br></br>
            where the class frequency is the number of data points within a given sub-interval
            of the real line, and the total frequency is the total number of elements within
            the data set considered.</p><h4>Example Illustration the Open Left Boundary Convention</h4><p>Consider the set of boundaries <c>{ b_1, b_2, b_3, b_4, b_5 }</c>, where
            <c>b_1 &lt; b_2 &lt; b_3 &lt; b_4 &lt; b_5</c>, which divide the real line into six
            sub-intervals. Now if we use the open left boundary convention then the real line
            will be divided into the sub-intervals:<br></br><br></br>
            (-infinity, b_1], (b_1,b_2], (b_2,b_3], (b_3,b_4], (b_4,b_5], (5, infinity)<br></br><br></br>
            Note that, each point on the real line can be assigned to one of these sub-intervals
            and therefore when assigning a data point to one of these intervals there will only
            be one sub-interval in which it belongs.</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="boundaries">A strictly increasing sequence of boundaries of the intervals over the
            real line in which the data sets point will be assigned.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.RFrequencyTableOR(System.String,dotnetCHARTING.Series,System.Double[])"><summary>
            Calculates the relative frequency table for a discrete data set in accordance with the open right
            boundary (ORB) convention.
            </summary><remarks>
            The relative frequency table normalized
            the data with regard to the size of the data set before evaluating the frequency
            table is exactly the same fashion as <see cref="T:dotnetCHARTING.AnalysisEngine.Implementation.StatisticalFrequencyTableOL"></see>.
            
            <h3>Further Explanation</h3><p>If we are comparing two or more data sets then the frequencies should be
            normalized to reflect the possible different sizes of the data sets themselves.
            To normalize a data set we much first divide the data set into a collection of
            classes into which the elements are assigned. Here we assign the data set in
            accordance with the open right boundary convention where the class frequencies
            are just the number of elements within each of the sub-intervals of the real
            line in accordance with the open right boundary convention (see example below).</p><p>To evaluate the relative frequency we apply the following formula to each
            class:<br></br><br></br>
            Relative frequency = (class frequency) / (total frequency)<br></br><br></br>
            where the class frequency is the number of data points within a given sub-interval
            of the real line, and the total frequency is the total number of elements within
            the data set considered.</p><h4>Example Illustration the Open Right Boundary Convention</h4><p>Consider the set of boundaries <c>{ b_1, b_2, b_3, b_4, b_5 }</c>, where
            <c>b_1 &lt; b_2 &lt; b_3 &lt; b_4 &lt; b_5</c>, which divide the real line into six
            sub-intervals. Now if we use the open right boundary convention then the real line
            will be divided into the sub-intervals:<br></br><br></br>
            (-infinity, b_1), [b_1,b_2), [b_2,b_3), [b_3,b_4), [b_4,b_5), [b_5, infinity)<br></br><br></br>
            Note that, each point on the real line can be assigned to one of these sub-intervals
            and therefore when assigning a data point to one of these intervals there will only
            be one sub-interval in which it belongs.</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><param name="boundaries">A strictly increasing sequence of boundaries of the intervals over the
            real line in which the data sets point will be assigned.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.RFrequencyTableOR(dotnetCHARTING.Series,System.Double[])"><summary>
            Calculates the relative frequency table for a discrete data set in accordance with the open right
            boundary (ORB) convention.
            </summary><remarks>
            The relative frequency table normalized
            the data with regard to the size of the data set before evaluating the frequency
            table is exactly the same fashion as <see cref="T:dotnetCHARTING.AnalysisEngine.Implementation.StatisticalFrequencyTableOL"></see>.
            
            <h3>Further Explanation</h3><p>If we are comparing two or more data sets then the frequencies should be
            normalized to reflect the possible different sizes of the data sets themselves.
            To normalize a data set we much first divide the data set into a collection of
            classes into which the elements are assigned. Here we assign the data set in
            accordance with the open right boundary convention where the class frequencies
            are just the number of elements within each of the sub-intervals of the real
            line in accordance with the open right boundary convention (see example below).</p><p>To evaluate the relative frequency we apply the following formula to each
            class:<br></br><br></br>
            Relative frequency = (class frequency) / (total frequency)<br></br><br></br>
            where the class frequency is the number of data points within a given sub-interval
            of the real line, and the total frequency is the total number of elements within
            the data set considered.</p><h4>Example Illustration the Open Right Boundary Convention</h4><p>Consider the set of boundaries <c>{ b_1, b_2, b_3, b_4, b_5 }</c>, where
            <c>b_1 &lt; b_2 &lt; b_3 &lt; b_4 &lt; b_5</c>, which divide the real line into six
            sub-intervals. Now if we use the open right boundary convention then the real line
            will be divided into the sub-intervals:<br></br><br></br>
            (-infinity, b_1), [b_1,b_2), [b_2,b_3), [b_3,b_4), [b_4,b_5), [b_5, infinity)<br></br><br></br>
            Note that, each point on the real line can be assigned to one of these sub-intervals
            and therefore when assigning a data point to one of these intervals there will only
            be one sub-interval in which it belongs.</p></remarks><param name="s">A statistical series.</param><param name="boundaries">A strictly increasing sequence of boundaries of the intervals over the
            real line in which the data sets point will be assigned.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.RFrequencyTableOR(dotnetCHARTING.SeriesCollection,System.Double[])"><summary>
            Calculates the relative frequency table for a discrete data set in accordance with the open right
            boundary (ORB) convention.
            </summary><remarks>
            The relative frequency table normalized
            the data with regard to the size of the data set before evaluating the frequency
            table is exactly the same fashion as <see cref="T:dotnetCHARTING.AnalysisEngine.Implementation.StatisticalFrequencyTableOL"></see>.
            
            <h3>Further Explanation</h3><p>If we are comparing two or more data sets then the frequencies should be
            normalized to reflect the possible different sizes of the data sets themselves.
            To normalize a data set we much first divide the data set into a collection of
            classes into which the elements are assigned. Here we assign the data set in
            accordance with the open right boundary convention where the class frequencies
            are just the number of elements within each of the sub-intervals of the real
            line in accordance with the open right boundary convention (see example below).</p><p>To evaluate the relative frequency we apply the following formula to each
            class:<br></br><br></br>
            Relative frequency = (class frequency) / (total frequency)<br></br><br></br>
            where the class frequency is the number of data points within a given sub-interval
            of the real line, and the total frequency is the total number of elements within
            the data set considered.</p><h4>Example Illustration the Open Right Boundary Convention</h4><p>Consider the set of boundaries <c>{ b_1, b_2, b_3, b_4, b_5 }</c>, where
            <c>b_1 &lt; b_2 &lt; b_3 &lt; b_4 &lt; b_5</c>, which divide the real line into six
            sub-intervals. Now if we use the open right boundary convention then the real line
            will be divided into the sub-intervals:<br></br><br></br>
            (-infinity, b_1), [b_1,b_2), [b_2,b_3), [b_3,b_4), [b_4,b_5), [b_5, infinity)<br></br><br></br>
            Note that, each point on the real line can be assigned to one of these sub-intervals
            and therefore when assigning a data point to one of these intervals there will only
            be one sub-interval in which it belongs.</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="boundaries">A strictly increasing sequence of boundaries of the intervals over the
            real line in which the data sets point will be assigned.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.NormalDistribution(System.String,dotnetCHARTING.Series,System.Double)"><summary>
            Calculates the Normal Probability Density function for a given series.
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series containing the elements for which the normal probability
            distribution function is evaluated.</param><param name="variance">The standard deviation of the distribution.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.NormalDistribution(dotnetCHARTING.Series,System.Double)"><summary>
            Calculates the Normal Probability Density function for a given series.
            </summary><param name="s">A statistical series containing the elements for which the normal probability 
            distribution function is evaluated.</param><param name="variance">The standard deviation of the distribution.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.NormalDistribution(dotnetCHARTING.SeriesCollection,System.Double)"><summary>
            Calculates the Normal Probability Density function for a given collection of series.
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="variance">The standard deviation of the distribution.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.LognormalDistribution(System.String,dotnetCHARTING.Series,System.Double)"><summary>
            Calculates the Lognormal Probability Density function for a given series.
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series containing the elements for which the normal probability
            distribution function is evaluated.</param><param name="variance">The standard deviation of the distribution.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.LognormalDistribution(dotnetCHARTING.Series,System.Double)"><summary>
            Calculates the Lognormal Probability Density function for a given series.
            </summary><param name="s">A statistical series containing the elements for which the normal probability 
            distribution function is evaluated.</param><param name="variance">The standard deviation of the distribution.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.LognormalDistribution(dotnetCHARTING.SeriesCollection,System.Double)"><summary>
            Calculates the Lognormal Probability Density function for a given collection of series.
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="variance">The standard deviation of the distribution.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.ExponentialDistribution(System.String,dotnetCHARTING.Series,System.Double)"><summary>
            Calculates the Exponential Probability Density function for a given series.
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series containing the elements for which the normal probability
            distribution function is evaluated.</param><param name="lambda">The parameter value.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.ExponentialDistribution(dotnetCHARTING.Series,System.Double)"><summary>
            Calculates the Exponential Probability Density function for a given series.
            </summary><param name="s">A statistical series containing the elements for which the normal probability 
            distribution function is evaluated.</param><param name="lambda">The parameter value.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.ExponentialDistribution(dotnetCHARTING.SeriesCollection,System.Double)"><summary>
            Calculates the Exponential Probability Density function for a given collection of series.
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="lambda">The parameter value.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.ParetoDistribution(System.String,dotnetCHARTING.Series)"><summary>
            Calculates the Pareto Probability Density function for a given series.
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series containing the elements for which the normal probability
            distribution function is evaluated.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.ParetoDistribution(dotnetCHARTING.Series)"><summary>
            Calculates the Pareto Probability Density function for a given series.
            </summary><param name="s">A statistical series containing the elements for which the normal probability 
            distribution function is evaluated.</param></member><member name="M:dotnetCHARTING.StatisticalEngine.ParetoDistribution(dotnetCHARTING.SeriesCollection)"><summary>
            Calculates the Pareto Probability Density function for a given collection of series.
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param></member><member name="T:dotnetCHARTING.StatisticalEngine.Options"><summary>
            Defines a set of static options used with StatisticalEngine calculations.
            </summary></member><member name="M:dotnetCHARTING.StatisticalEngine.Options.Reset"><summary>
            Resets the options to default settings.
            </summary></member><member name="P:dotnetCHARTING.StatisticalEngine.Options.PopulateSubValues"><summary>
            Gets or sets a static value that determines whether elements derived from series will 
            contain values of the original elements as %dotnetCHARTING.SubValue% objects.
            </summary></member><member name="P:dotnetCHARTING.StatisticalEngine.Options.MatchColors"><summary>
            Gets or sets a value that indicates whether calculated elements will use the same colors that are 
            assigned to original series. Both, the original and derived data objects must be placed on the 
            same chart to enable this feature.
            </summary></member><member name="T:dotnetCHARTING.FinancialEngine"><summary>
            Provides a set of methods that perform financial analysis of series and series collections.
            </summary></member><member name="M:dotnetCHARTING.FinancialEngine.Mean(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"><summary>
            Calculates the arithmetic mean of the elements values of the series.
            </summary><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A financial series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see> . In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.GeometricMean(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">Evaluates the geometric mean of the series.</seealso></member><member name="M:dotnetCHARTING.FinancialEngine.Mean(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"><summary>
            Calculates the arithmetic mean of the elements values of the series.
            </summary><param name="s">A financial series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.GeometricMean(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">Evaluates the geometric mean of the series.</seealso></member><member name="M:dotnetCHARTING.FinancialEngine.Mean(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)"><summary>
            Calculates the arithmetic mean of the elements values of the series.
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.GeometricMean(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">Evaluates the geometric mean of the series.</seealso></member><member name="M:dotnetCHARTING.FinancialEngine.Mean(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)"><summary>
            Calculates the arithmetic mean of the elements values of the series.
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.GeometricMean(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">Evaluates the geometric mean of the series.</seealso></member><member name="M:dotnetCHARTING.FinancialEngine.GeometricMean(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"><summary>
            Calculates the geometric mean of the series's elements values.
            </summary><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A financial series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.Mean(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">Evaluates the arithmetic mean of the series.</seealso></member><member name="M:dotnetCHARTING.FinancialEngine.GeometricMean(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"><summary>
            Calculates the geometric mean of the series's elements values.
            </summary><param name="s">A financial series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.Mean(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">Evaluates the arithmetic mean of the series.</seealso></member><member name="M:dotnetCHARTING.FinancialEngine.GeometricMean(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)"><summary>
            Calculates the geometric mean of the series's elements values.
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.Mean(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">Evaluates the arithmetic mean of the series.</seealso></member><member name="M:dotnetCHARTING.FinancialEngine.GeometricMean(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)"><summary>
            Calculates the geometric mean of the series's elements values.
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.Mean(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">Evaluates the arithmetic mean of the series.</seealso></member><member name="M:dotnetCHARTING.FinancialEngine.StandardDeviation(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"><summary>
            Calculates the sample standard variance of the series's elements values.
            </summary><remarks><p><b>Remark:</b> The units of the Sample Standard Deviation will correspond to the units
            used by the observations (i.e. the units of the members of the data set). In many instances
            it is convenient that the units used for the observations corresponds to the units used
            for a measure of the sets deviations. This differs from the <see cref="M:dotnetCHARTING.FinancialEngine.Variance(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"></see> in which
            the deviation is measured in units which are the squares of the units of the observations.</p></remarks><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A financial series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.Variance(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">Another measure of the deviation of the elements of the data set
            considered.</seealso></member><member name="M:dotnetCHARTING.FinancialEngine.StandardDeviation(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"><summary>
            Calculates the sample standard variance of the series's elements values.
            </summary><remarks><p><b>Remark:</b> The units of the Sample Standard Deviation will correspond to the units
            used by the observations (i.e. the units of the members of the data set). In many instances
            it is convenient that the units used for the observations corresponds to the units used
            for a measure of the sets deviations. This differs from the <see cref="M:dotnetCHARTING.FinancialEngine.Variance(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"></see> in which
            the deviation is measured in units which are the squares of the units of the observations.</p></remarks><param name="s">A financial series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.Variance(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">Another measure of the deviation of the elements of the data set
            considered.
            </seealso></member><member name="M:dotnetCHARTING.FinancialEngine.StandardDeviation(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)"><summary>
            Calculates the sample standard variance of the series's elements values.
            </summary><remarks><p><b>Remark:</b> The units of the Sample Standard Deviation will correspond to the units
            used by the observations (i.e. the units of the members of the data set). In many instances
            it is convenient that the units used for the observations corresponds to the units used
            for a measure of the sets deviations. This differs from the <see cref="M:dotnetCHARTING.FinancialEngine.Variance(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)"></see> in which
            the deviation is measured in units which are the squares of the units of the observations.</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the FinancialEngine time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.Variance(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">Another measure of the deviation of the elements of the data set
            considered.
            </seealso></member><member name="M:dotnetCHARTING.FinancialEngine.StandardDeviation(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)"><summary>
            Calculates the sample standard variance of the series's elements values.
            </summary><remarks><p><b>Remark:</b> The units of the Sample Standard Deviation will correspond to the units
            used by the observations (i.e. the units of the members of the data set). In many instances
            it is convenient that the units used for the observations corresponds to the units used
            for a measure of the sets deviations. This differs from the <see cref="M:dotnetCHARTING.FinancialEngine.Variance(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)"></see> in which
            the deviation is measured in units which are the squares of the units of the observations.</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.Variance(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">Another measure of the deviation of the elements of the data set
            considered.
            </seealso></member><member name="M:dotnetCHARTING.FinancialEngine.MeanDeviation(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"><summary>
            Calculates the mean deviation of the series's element values.
            </summary><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A financial series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><remarks> The mean deviation is exactly what the name implies, that is, it is the
            arithmetic average of the differences from each of the elements of the series to the mean of the series.
            </remarks></member><member name="M:dotnetCHARTING.FinancialEngine.MeanDeviation(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"><summary>
            Calculates the mean deviation of the series's element values.
            </summary><param name="s">A financial series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><remarks> The mean deviation is exactly what the name implies, that is, it is the
            arithmetic average of the differences from each of the elements of the series to the mean of the series.
            </remarks></member><member name="M:dotnetCHARTING.FinancialEngine.MeanDeviation(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)"><summary>
            Calculates the mean deviation of the series's element values.
            </summary><remarks> The mean deviation is exactly what the name implies, that is, it is the
            arithmetic average of the differences from each of the elements of the series to the mean of the series.
            </remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param></member><member name="M:dotnetCHARTING.FinancialEngine.MeanDeviation(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)"><summary>
            Calculates the mean deviation of the series's element values.
            </summary><remarks> The mean deviation is exactly what the name implies, that is, it is the
            arithmetic average of the differences from each of the elements of the series to the mean of the series.
            </remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param></member><member name="M:dotnetCHARTING.FinancialEngine.Variance(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"><summary>
            Calculates the sample variance of the series's elements values.
            </summary><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A financial series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.StandardDeviation(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"></seealso></member><member name="M:dotnetCHARTING.FinancialEngine.Variance(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"><summary>
            Calculates the sample variance of the series's elements values.
            </summary><param name="s">A financial series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.StandardDeviation(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"></seealso></member><member name="M:dotnetCHARTING.FinancialEngine.Variance(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)"><summary>
            Calculates the sample variance of the series's elements values.
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.StandardDeviation(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)"></seealso></member><member name="M:dotnetCHARTING.FinancialEngine.Variance(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)"><summary>
            Calculates the sample variance of the series's elements values.
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.StandardDeviation(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)"></seealso></member><member name="M:dotnetCHARTING.FinancialEngine.Median(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"><summary>
            Calculates the mean deviation of the series's element YValues.
            </summary><remarks> The mean deviation is exactly what the name implies, that is, it is the
            arithmetic average of the differences from each of the elements of the series to the mean of the series.
            </remarks><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A financial series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.StandardDeviation(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">A measure of the deviation of the elements 
            of the data set considered.</seealso></member><member name="M:dotnetCHARTING.FinancialEngine.Median(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"><summary>
            Calculates the mean deviation of the series's element YValues.
            </summary><remarks> The mean deviation is exactly what the name implies, that is, it is the
            arithmetic average of the differences from each of the elements of the series to the mean of the series.
            </remarks><param name="s">A financial series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.StandardDeviation(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)">A measure of the deviation of the elements 
            of the data set considered.</seealso></member><member name="M:dotnetCHARTING.FinancialEngine.Median(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)"><summary>
            Calculates the mean deviation of the series's element YValues.
            </summary><remarks> The mean deviation is exactly what the name implies, that is, it is the
            arithmetic average of the differences from each of the elements of the series to the mean of the series.
            </remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.StandardDeviation(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">A measure of the deviation of the elements 
            of the data set considered.</seealso></member><member name="M:dotnetCHARTING.FinancialEngine.Median(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)"><summary>
            Calculates the mean deviation of the series's element YValues.
            </summary><remarks> The mean deviation is exactly what the name implies, that is, it is the
            arithmetic average of the differences from each of the elements of the series to the mean of the series.
            </remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.StandardDeviation(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)">A measure of the deviation of the elements 
            of the data set considered.</seealso></member><member name="M:dotnetCHARTING.FinancialEngine.Percentile25(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"><summary>
            Calculates the first percentile of the series.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="M:dotnetCHARTING.FinancialEngine.Median(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A financial series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param></member><member name="M:dotnetCHARTING.FinancialEngine.Percentile25(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"><summary>
            Calculates the first percentile of the series.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="M:dotnetCHARTING.FinancialEngine.Median(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="s">A financial series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param></member><member name="M:dotnetCHARTING.FinancialEngine.Percentile25(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)"><summary>
            Calculates the first percentile of the series.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="M:dotnetCHARTING.FinancialEngine.Median(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param></member><member name="M:dotnetCHARTING.FinancialEngine.Percentile25(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)"><summary>
            Calculates the first percentile of the series.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="M:dotnetCHARTING.FinancialEngine.Median(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param></member><member name="M:dotnetCHARTING.FinancialEngine.Percentile50(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"><summary>
            Calculates the second percentile of the series.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="M:dotnetCHARTING.FinancialEngine.Median(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A financial series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param></member><member name="M:dotnetCHARTING.FinancialEngine.Percentile50(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"><summary>
            Calculates the second percentile of the series.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="M:dotnetCHARTING.FinancialEngine.Median(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="s">A financial series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param></member><member name="M:dotnetCHARTING.FinancialEngine.Percentile50(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)"><summary>
            Calculates the second percentile of the series.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="M:dotnetCHARTING.FinancialEngine.Median(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param></member><member name="M:dotnetCHARTING.FinancialEngine.Percentile50(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)"><summary>
            Calculates the second percentile of the series.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="M:dotnetCHARTING.FinancialEngine.Median(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param></member><member name="M:dotnetCHARTING.FinancialEngine.Percentile75(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"><summary>
            Calculates the third percentile of the series.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="M:dotnetCHARTING.FinancialEngine.Median(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A financial series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param></member><member name="M:dotnetCHARTING.FinancialEngine.Percentile75(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"><summary>
            Calculates the third percentile of the series.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="M:dotnetCHARTING.FinancialEngine.Median(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="s">A FinancialEngine series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the FinancialEngine time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param></member><member name="M:dotnetCHARTING.FinancialEngine.Percentile75(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)"><summary>
            Calculates the third percentile of the series.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="M:dotnetCHARTING.FinancialEngine.Median(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param></member><member name="M:dotnetCHARTING.FinancialEngine.Percentile75(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)"><summary>
            Calculates the third percentile of the series.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="M:dotnetCHARTING.FinancialEngine.Median(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param></member><member name="M:dotnetCHARTING.FinancialEngine.Percentile(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)"><summary>
            Calculates the n-th percentile of the series.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="M:dotnetCHARTING.FinancialEngine.Median(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A financial series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="percentile">A value between 1 and 100 which reprezent the percentile of the series.</param></member><member name="M:dotnetCHARTING.FinancialEngine.Percentile(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)"><summary>
            Calculates the n-th percentile of the series.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="M:dotnetCHARTING.FinancialEngine.Median(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="s">A FinancialEngine series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the FinancialEngine time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="percentile">A value between 1 and 100 which reprezent the percentile of the series.</param></member><member name="M:dotnetCHARTING.FinancialEngine.Percentile(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue,System.Int32)"><summary>
            Calculates the n-th percentile of the series.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="M:dotnetCHARTING.FinancialEngine.Median(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="percentile">A value between 1 and 100 which reprezent the percentile of the series.</param></member><member name="M:dotnetCHARTING.FinancialEngine.Percentile(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue,System.Int32)"><summary>
            Calculates the n-th percentile of the series.
            </summary><remarks>
            Recall that the percentile is the value such that at least <c>interest</c>-percent of the data set items
            are less than or equal to this value, or equivalently if at least <c>(100-interest)</c>
            percent of the items are greater than or equal to this value.
            
            <p><b>Remarks:</b><ol><li> The <c>50</c>-th percentile is the measure of centrality of a data set known as the
            median. The median can also be evaluated using <see cref="M:dotnetCHARTING.FinancialEngine.Median(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"></see>.
            </li><li> The <c>25</c>-th, <c>50</c>-th, <c>75</c>-th percentiles are often
            referred to as the <c>1</c>-st, <c>2</c>-nd (median) and <c>3</c>-rd
            quartile respectively. The term quartile refers to the fact that these three values
            will roughly divide the data set considered into four equal parts.
            </li></ol></p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="percentile">A value between 1 and 100 which reprezent the percentile of the series.</param></member><member name="M:dotnetCHARTING.FinancialEngine.Range(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"><summary>
            Calculates the range of the series's elements values.
            </summary><remarks>
            The range is the difference of a discrete data set is the difference between the largest and smallest 
            members of the data set  considered.
            </remarks><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A financial series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param></member><member name="M:dotnetCHARTING.FinancialEngine.Range(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"><summary>
            Calculates the range of the series's elements values.
            </summary><remarks>
            The range is the difference of a discrete data set is the difference between the largest and smallest 
            members of the data set  considered.
            </remarks><param name="s">A financial series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param></member><member name="M:dotnetCHARTING.FinancialEngine.Range(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)"><summary>
            Calculates the range of the series's elements values.
            </summary><remarks>
            The range is the difference of a discrete data set is the difference between the largest and smallest 
            members of the data set  considered.
            </remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param></member><member name="M:dotnetCHARTING.FinancialEngine.Range(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)"><summary>
            Calculates the range of the series's elements values.
            </summary><remarks>
            The range is the difference of a discrete data set is the difference between the largest and smallest 
            members of the data set  considered.
            </remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param></member><member name="M:dotnetCHARTING.FinancialEngine.InterQuartileRange(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"><summary>
            Calculates the Inter-Quartile Range(IQR) of the currently registered data set.
            </summary><remarks>
            Recall that the IQR is the
            difference between the <c>1</c>-st quartile (i.e. <c>25</c>-th percentile) and the
            <c>2</c>-nd quartile (i.e. the <c>75</c>-th percentile).
            </remarks><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A financial series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param></member><member name="M:dotnetCHARTING.FinancialEngine.InterQuartileRange(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"><summary>
            Calculates the Inter-Quartile Range(IQR) of the currently registered data set.
            </summary><remarks>
            Recall that the IQR is the
            difference between the <c>1</c>-st quartile (i.e. <c>25</c>-th percentile) and the
            <c>2</c>-nd quartile (i.e. the <c>75</c>-th percentile).
            </remarks><param name="s">A financial series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param></member><member name="M:dotnetCHARTING.FinancialEngine.InterQuartileRange(System.String,dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)"><summary>
            Calculates the Inter-Quartile Range(IQR) of the currently registered data set.
            </summary><remarks>
            Recall that the IQR is the
            difference between the <c>1</c>-st quartile (i.e. <c>25</c>-th percentile) and the
            <c>2</c>-nd quartile (i.e. the <c>75</c>-th percentile).
            </remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param></member><member name="M:dotnetCHARTING.FinancialEngine.InterQuartileRange(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)"><summary>
            Calculates the Inter-Quartile Range(IQR) of the currently registered data set.
            </summary><remarks>
            Recall that the IQR is the
            difference between the <c>1</c>-st quartile (i.e. <c>25</c>-th percentile) and the
            <c>2</c>-nd quartile (i.e. the <c>75</c>-th percentile).
            </remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param></member><member name="M:dotnetCHARTING.FinancialEngine.SimpleMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)"><summary> Calculates the arithmetic(or simple) Moving Average(MA) of a given period for all possible 
            data points (i.e. periods) for which there is sufficient historical data provided.  
            </summary><remarks><h3>Illustration</h3><p>If we are considering a traded asset and the periods considered are days then by
            passing an array containing the closing daily prices of a given asset, and by choosing
            to use the 5-day moving average (i.e. passing a length of the MA of <c>5</c>),
            then this method will evaluate the Moving Average (MA) for all days for which the closing
            price on that day and the four previous days is known.</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A series where the first term is the most recent historical price, 
            the second term is the previous historical price and so on.
            </param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="lengthOfMA">The number of periods considered within the evaluation of the 
            moving average for each of the periods on which it can be evaluated.
            </param><exception cref="T:System.ArgumentException">Thrown if the  series is empty.
            </exception><returns>A series where the first term corresponds to the Moving Average on the last period and the 
            previous value is the value of the Moving average on the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.SimpleMovingAverage(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)"><summary> Calculates the arithmetic(or simple) Moving Average(MA) of a given period for all possible 
            data points (i.e. periods) for which there is sufficient historical data provided.  
            </summary><remarks><h3>Illustration</h3><p>If we are considering a traded asset and the periods considered are days then by
            passing an array containing the closing daily prices of a given asset, and by choosing
            to use the 5-day moving average (i.e. passing a length of the MA of <c>5</c>),
            then this method will evaluate the Moving Average (MA) for all days for which the closing
            price on that day and the four previous days is known.</p></remarks><param name="s">A series where the first term is the most recent historical price, 
            the second term is the previous historical price and so on.
            </param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="lengthOfMA">The number of periods considered within the evaluation of the 
            moving average for each of the periods on which it can be evaluated.
            </param><exception cref="T:System.ArgumentException">Thrown if the  series is empty.
            </exception><returns>A series where the first term corresponds to the Moving Average on the last period and the 
            previous value is the value of the Moving average on the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.SimpleMovingAverage(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue,System.Int32)"><summary> Calculates the arithmetic(or simple) Moving Average(MA) of a given period for all possible 
            data points (i.e. periods) for which there is sufficient historical data provided.  
            </summary><remarks><h3>Illustration</h3><p>If we are considering a traded asset and the periods considered are days then by
            passing an array containing the closing daily prices of a given asset, and by choosing
            to use the 5-day moving average (i.e. passing a length of the MA of <c>5</c>),
            then this method will evaluate the Moving Average (MA) for all days for which the closing
            price on that day and the four previous days is known.</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="lengthOfMA">The number of periods considered within the evaluation of the 
            moving average for each of the periods on which it can be evaluated.
            </param><exception cref="T:System.ArgumentException">Thrown if the  series is empty.
            </exception><returns>A series where the first term corresponds to the Moving Average on the last period and the 
            previous value is the value of the Moving average on the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.GeometricMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)"><summary> Calculates the Geometric Moving Average(GMA) for a given period for all possible 
            data points (i.e. periods) for which there is sufficient historical data provided.
            </summary><remarks><h3>Illustration</h3><p>If we are considering a traded asset and the periods considered are days then by passing
            an array containing the closing daily prices of a given asset, and by choosing to use the
            5-day Geometric Moving Average (i.e. passing the length of the GMA of <c>5</c>), then
            this method will evaluate the Geometric Moving Average (GMA) for all days for which the
            closing price on that day and the four previous days is known.</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A series containing the values of the time series being considered. Where the first 
            element gives the last historical value, the second term the previous periods value and so on.
            </param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="lengthOfMA">The number of periods considered within the evaluation of 
            the moving average of each of the periods on which it can be evaluated.
            </param><exception cref="T:System.ArgumentException">Thrown if the series is empty.
            </exception><returns>A series where the first term corresponds to the Moving Average on the
            last period and the previous value is the value of the Moving average on the previous 
            period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.GeometricMovingAverage(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)"><summary> Calculates the Geometric Moving Average(GMA) for a given period for all possible 
            data points (i.e. periods) for which there is sufficient historical data provided.
            </summary><remarks><h3>Illustration</h3><p>If we are considering a traded asset and the periods considered are days then by passing
            an array containing the closing daily prices of a given asset, and by choosing to use the
            5-day Geometric Moving Average (i.e. passing the length of the GMA of <c>5</c>), then
            this method will evaluate the Geometric Moving Average (GMA) for all days for which the
            closing price on that day and the four previous days is known.</p></remarks><param name="s">A series containing the values of the time series being considered. Where the first 
            element gives the last historical value, the second term the previous periods value and so on.
            </param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="lengthOfMA">The number of periods considered within the evaluation of 
            the moving average of each of the periods on which it can be evaluated.
            </param><exception cref="T:System.ArgumentException">Thrown if the series is empty.
            </exception><returns>A series where the first term corresponds to the Moving Average on the
            last period and the previous value is the value of the Moving average on the previous 
            period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.GeometricMovingAverage(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue,System.Int32)"><summary> Calculates the Geometric Moving Average(GMA) for a given period for all possible 
            data points (i.e. periods) for which there is sufficient historical data provided.
            </summary><remarks><h3>Illustration</h3><p>If we are considering a traded asset and the periods considered are days then by passing
            an array containing the closing daily prices of a given asset, and by choosing to use the
            5-day Geometric Moving Average (i.e. passing the length of the GMA of <c>5</c>), then
            this method will evaluate the Geometric Moving Average (GMA) for all days for which the
            closing price on that day and the four previous days is known.</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="lengthOfMA">The number of periods considered within the evaluation of 
            the moving average of each of the periods on which it can be evaluated.
            </param><exception cref="T:System.ArgumentException">Thrown if the series is empty.
            </exception><returns>A series where the first term corresponds to the Moving Average on the
            last period and the previous value is the value of the Moving average on the previous 
            period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.TriangularMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)"><summary> Evaluates the <c>x</c>-period Triangular Moving Average(TMA) where <c>x</c> corresponds to 
            the length of the time series array given as a parameter, for all periods for which sufficient data 
            is provided.  
            </summary><remarks><h3>Further Explanation</h3><p>The TMA is a special case of the <see cref="M:dotnetCHARTING.FinancialEngine.WeightedMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,dotnetCHARTING.Series,System.Int32)"><c>WeightedMovingAverage</c></see>,
            where the term triangular is motivated by the way in which the weights are chosen for the elements of the 
            time series array. For example, for a <c>7</c>-period TMA, that is when the time series has length <c>7</c>, 
            the corresponding weights of the time series elements are: <c>1</c>, <c>2</c>, <c>3</c>, <c>4</c>, <c>3</c>, 
            <c>2</c>, <c>1</c>. In the case of the <c>6</c> period TMA the weights would be <c>1</c>, <c>2</c>, <c>3</c>, 
            <c>3</c>, <c>2</c>, <c>1</c>.</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">An series  where the first term corresponds to value of the market variable
            (for example, closing price) in the last period, the second term corresponds to the value of the market 
            variable in the previous period and so on.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="lengthOfMA">The number of periods over which the moving average is evaluated for each period.
            </param><returns>A series where the first term is the value of the MA corresponding to the most recent period, 
            the second term is the value of the MA on the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.TriangularMovingAverage(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)"><summary> Evaluates the <c>x</c>-period Triangular Moving Average(TMA) where <c>x</c> corresponds to 
            the length of the time series array given as a parameter, for all periods for which sufficient data 
            is provided.  
            </summary><remarks><h3>Further Explanation</h3><p>The TMA is a special case of the <see cref="M:dotnetCHARTING.FinancialEngine.WeightedMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,dotnetCHARTING.Series,System.Int32)"><c>WeightedMovingAverage</c></see>,
            where the term triangular is motivated by the way in which the weights are chosen for the elements of the 
            time series array. For example, for a <c>7</c>-period TMA, that is when the time series has length <c>7</c>, 
            the corresponding weights of the time series elements are: <c>1</c>, <c>2</c>, <c>3</c>, <c>4</c>, <c>3</c>, 
            <c>2</c>, <c>1</c>. In the case of the <c>6</c> period TMA the weights would be <c>1</c>, <c>2</c>, <c>3</c>, 
            <c>3</c>, <c>2</c>, <c>1</c>.</p></remarks><param name="s">An series  where the first term corresponds to value of the market variable
            (for example, closing price) in the last period, the second term corresponds to the value of the market 
            variable in the previous period and so on.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the FinancialEngine time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="lengthOfMA">The number of periods over which the moving average is evaluated for each period.
            </param><returns>A series where the first term is the value of the MA corresponding to the most recent period, 
            the second term is the value of the MA on the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.TriangularMovingAverage(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue,System.Int32)"><summary> Evaluates the <c>x</c>-period Triangular Moving Average(TMA) where <c>x</c> corresponds to 
            the length of the time series array given as a parameter, for all periods for which sufficient data 
            is provided.  
            </summary><remarks><h3>Further Explanation</h3><p>The TMA is a special case of the <see cref="T:dotnetCHARTING.AnalysisEngine.Implementation.FinancialWeightedMovingAverage"><c>WeightedMovingAverage</c></see>,
            where the term triangular is motivated by the way in which the weights are chosen for the elements of the 
            time series array. For example, for a <c>7</c>-period TMA, that is when the time series has length <c>7</c>, 
            the corresponding weights of the time series elements are: <c>1</c>, <c>2</c>, <c>3</c>, <c>4</c>, <c>3</c>, 
            <c>2</c>, <c>1</c>. In the case of the <c>6</c> period TMA the weights would be <c>1</c>, <c>2</c>, <c>3</c>, 
            <c>3</c>, <c>2</c>, <c>1</c>.</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the FinancialEngine time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="lengthOfMA">The number of periods over which the moving average is evaluated for each period.
            </param><returns>A series where the first term is the value of the MA corresponding to the most recent period, 
            the second term is the value of the MA on the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.LinearMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)"><summary> Returns the value of the Linearly Weighted Moving Average(LWMA) for all periods for which 
            sufficient historical data is provided.  
            </summary><remarks> The Linearly Weighted Moving Average(LWMA) weights the time series by assigning a weight of 1, 
            to the oldest price and a weight of 2, to the second oldest price and so on... Until the weight of the most 
            recent value is assigned to be the parameter <c>lengthOfMA</c>, after which the LWMA is given by the sum 
            of the weighted prices divided by the sum of the weights. This indicator then shifts the window 
            (one place back) over which the MA is evaluated and the indicator is then re-evaluated.
            </remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A series where the first element is the price on the earliest period, the second
            element is the price on the next earliest period and on so.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the FinancialEngine time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="lengthOfMA">The number of periods over which the moving average is evaluated for each
            period.</param><exception cref="T:System.ArgumentException">Thrown if the series <c>priceSeries</c> is empty or if its length 
            is less than the <c>lengthofMA</c>.
            </exception><returns>A series where the first term is the LWMA of length <c>lengthOfMA</c> for the
            latest period, the second term is the LWMA of length <c>lengthOfMA</c> for the previous 
            period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.LinearMovingAverage(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)"><summary> Returns the value of the Linearly Weighted Moving Average(LWMA) for all periods for which 
            sufficient historical data is provided.  
            </summary><remarks> The Linearly Weighted Moving Average(LWMA) weights the time series by assigning a weight of 1, 
            to the oldest price and a weight of 2, to the second oldest price and so on... Until the weight of the most 
            recent value is assigned to be the parameter <c>lengthOfMA</c>, after which the LWMA is given by the sum 
            of the weighted prices divided by the sum of the weights. This indicator then shifts the window 
            (one place back) over which the MA is evaluated and the indicator is then re-evaluated.
            </remarks><param name="s">A series where the first element is the price on the earliest period, the second
            element is the price on the next earliest period and on so.</param><param name="lengthOfMA">The number of periods over which the moving average is evaluated for each
            period.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><exception cref="T:System.ArgumentException">Thrown if the series <c>priceSeries</c> is empty or if its length 
            is less than the <c>lengthofMA</c>.
            </exception><returns>A series where the first term is the LWMA of length <c>lengthOfMA</c> for the
            latest period, the second term is the LWMA of length <c>lengthOfMA</c> for the previous 
            period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.LinearMovingAverage(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue,System.Int32)"><summary> Returns the value of the Linearly Weighted Moving Average(LWMA) for all periods for which 
            sufficient historical data is provided.  
            </summary><remarks> The Linearly Weighted Moving Average(LWMA) weights the time series by assigning a weight of 1, 
            to the oldest price and a weight of 2, to the second oldest price and so on... Until the weight of the most 
            recent value is assigned to be the parameter <c>lengthOfMA</c>, after which the LWMA is given by the sum 
            of the weighted prices divided by the sum of the weights. This indicator then shifts the window 
            (one place back) over which the MA is evaluated and the indicator is then re-evaluated.
            </remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="lengthOfMA">The number of periods considered within the evaluation of the moving average 
            of each of the days on which it can be evaluated.</param><exception cref="T:System.ArgumentException">Thrown if the series <c>priceSeries</c> is empty or if its length 
            is less than the <c>lengthofMA</c>.
            </exception><returns>A series where the first term is the LWMA of length <c>lengthOfMA</c> for the
            latest period, the second term is the LWMA of length <c>lengthOfMA</c> for the previous 
            period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.ExponentiallyWeightedMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Double,System.Int32)"><summary> Evaluates the (<c>x</c>-day) Exponentially Weighted Moving Average(EWMA) of a time 
            series provided where <c>x</c> is the length of the time series array which is provided as a
            parameter, for all periods for which sufficient data is provided.  
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A series where the first value corresponds to the value of the asset in the
            <c>t</c>th period, and the second value corresponds to the value of the asset in the <c>t-1</c>-th 
            period and so on.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="smoothingFactor">The number between 0 and 1 which is known as a smoothing factor. 
            The closer the value is to zero the more influence more resent measurements
            will have on the EWMA.</param><param name="lengthOfMA">The number of periods over which the moving average is evaluated
            for each period.</param><exception cref="T:System.ArgumentException">Thrown if the Series is empty or if the value 
            given for the smoothing factor lies outside the closed range [0,1].</exception><returns>A series where the first term is the EWMA for the most recent period,
            the second term is the EWMA for the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.ExponentiallyWeightedMovingAverage(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Double,System.Int32)"><summary> Evaluates the (<c>x</c>-day) Exponentially Weighted Moving Average(EWMA) of a time 
            series provided where <c>x</c> is the length of the time series array which is provided as a
            parameter, for all periods for which sufficient data is provided.  
            </summary><param name="s">A series where the first value corresponds to the value of the asset in the
            <c>t</c>th period, and the second value corresponds to the value of the asset in the <c>t-1</c>-th 
            period and so on.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="smoothingFactor">The number between 0 and 1 which is known as a smoothing factor. 
            The closer the value is to zero the more influence more resent measurements
            will have on the EWMA.</param><param name="lengthOfMA">The number of periods over which the moving average is evaluated
            for each period.</param><exception cref="T:System.ArgumentException">Thrown if the Series is empty or if the value 
            given for the smoothing factor lies outside the closed range [0,1].</exception><returns>A series where the first term is the EWMA for the most recent period,
            the second term is the EWMA for the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.ExponentiallyWeightedMovingAverage(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue,System.Double,System.Int32)"><summary> Evaluates the (<c>x</c>-day) Exponentially Weighted Moving Average(EWMA) of a time 
            series provided where <c>x</c> is the length of the time series array which is provided as a
            parameter, for all periods for which sufficient data is provided.  
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="smoothingFactor">The number between 0 and 1 which is known as a smoothing factor. 
            The closer the value is to zero the more influence more resent measurements
            will have on the EWMA.</param><param name="lengthOfMA">The number of periods over which the moving average is evaluated
            for each period.</param><exception cref="T:System.ArgumentException">Thrown if the Series is empty or if the value 
            given for the smoothing factor lies outside the closed range [0,1].</exception><returns>A series where the first term is the EWMA for the most recent period,
            the second term is the EWMA for the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.MedianMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)"><summary> Returns the Median Moving Average of a given period of the data series provided for all 
            possible periods for the data given.  
            </summary><remarks> For example, if we are considering a trading asset and the periods considered are days 
            then by passing an series containing the closing daily prices of a given asset, and by choosing to 
            use the 5-day median moving average (i.e. passing a length of the MA of <c>5</c>), then we will 
            evaluate the Median Moving Average(GMA) for all days for which the closing price on that day and 
            the four previous days is known.
            
            <p><b>Remark:</b> This indicator is particularly appropriate for traded assets where
            the opening and closing prices are unreliable. Such an instance are FTSE stocks
            which in the first hour of trading experience relatively low volumes and the closing
            prices are settled through an auction process. Hence for the FTSE market the quoted market
            price at the beginning and end of the market may not be indicative of where a given
            stock is trading within a given period. In such markets it may be more appropriate
            to use the Median Moving Average which will smooth out the effect of uncharacteristic
            shifts at the ends of the trading day.</p></remarks><param name="highSeries">An array where the first element corresponds to the highest market price 
            during the last trading period, the second element corresponds to the highest market price in the
            previous period, and so on.</param><param name="highSeriesElementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="lowSeriesElementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="lowSeries">An array where the first element corresponds to the lowest market price
            during the last trading period, the second term corresponds to the lowest market price in the 
            previous period, and so on.</param><param name="lengthOfMA">The number of periods considered within the evaluation of the moving average 
            of each of the days on which it can be evaluated.</param><exception cref="T:System.ArgumentException">Thrown if the series historicalHigh and historicalLow are of 
            different lengths or if one of these arrays is empty.</exception><returns>A series where the first term is the value of the Median Moving Average
            for the most recent period, the second term is the value of the Median Moving Average 
            for the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.MedianMovingAverage(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)"><summary> Returns the Median Moving Average of a given period of the data series provided for all 
            possible periods for the data given.  
            </summary><remarks> For example, if we are considering a trading asset and the periods considered are days 
            then by passing an series containing the closing daily prices of a given asset, and by choosing to 
            use the 5-day median moving average (i.e. passing a length of the MA of <c>5</c>), then we will 
            evaluate the Median Moving Average(GMA) for all days for which the closing price on that day and 
            the four previous days is known.
            
            <p><b>Remark:</b> This indicator is particularly appropriate for traded assets where
            the opening and closing prices are unreliable. Such an instance are FTSE stocks
            which in the first hour of trading experience relatively low volumes and the closing
            prices are settled through an auction process. Hence for the FTSE market the quoted market
            price at the beginning and end of the market may not be indicative of where a given
            stock is trading within a given period. In such markets it may be more appropriate
            to use the Median Moving Average which will smooth out the effect of uncharacteristic
            shifts at the ends of the trading day.</p></remarks><param name="highSeries">An array where the first element corresponds to the highest market price 
            during the last trading period, the second element corresponds to the highest market price in the
            previous period, and so on.</param><param name="highSeriesElementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="lowSeries">An array where the first element corresponds to the lowest market price
            during the last trading period, the second term corresponds to the lowest market price in the 
            previous period, and so on.</param><param name="lowSeriesElementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="lengthOfMA">The number of periods considered within the evaluation of the moving average 
            of each of the days on which it can be evaluated.</param><exception cref="T:System.ArgumentException">Thrown if the series historicalHigh and historicalLow are of 
            different lengths or if one of these arrays is empty.</exception><returns>A series where the first term is the value of the Median Moving Average
            for the most recent period, the second term is the value of the Median Moving Average 
            for the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.MedianMovingAverage(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue,dotnetCHARTING.ElementValue,System.Int32)"><summary> Returns the Median Moving Average of a given period of the data series provided for all 
            possible periods for the data given.  
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="highSeriesElementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="lowSeriesElementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="lengthOfMA">The number of periods considered within the evaluation of the moving average 
            of each of the days on which it can be evaluated.</param></member><member name="M:dotnetCHARTING.FinancialEngine.WeightedMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,dotnetCHARTING.Series,System.Int32)"><summary> Evaluate the Weighted Moving Average(WMA) where the weights associated to all the elements of 
            the historical values are given and the WMA is evaluated for all periods for which there is sufficient 
            historical data.  
            </summary><remarks> That is, the weights are fixed for all given historical values and the window of length 
            <c>lengthOfMA</c> over which  the GMA is evaluated is shifted along the series.
            
            <h3>Application</h3><p>Generally speaking the WMA where the weights are all set and the window over which
            GMA is evaluated is shifted is used when you wish to give emphasis to particular dates.</p><p><b>Note:</b> The length of the <c>weights</c> array must equal or be greater
            than the length of the <c>historicalPrices</c> series. If it's greater than we
            ignore the supplementary values.</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">An series of historical values, where the first element corresponds to the market 
            on the last period, the second term to the value on previous period and so on.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="weightSeries">Array of doubles which assigns weights to the k-th previous historical values 
            for the given period on which the moving average is being evaluated.
            Here k is just the length of the weights array given. </param><param name="lengthOfMA">The number of periods over which the weighted moving average is evaluated.
            </param><exception cref="T:System.ArgumentException">Thrown if the length of the weights and series 
            differ or if either series is empty.
            </exception><returns>A series where the first term is the value of the moving average corresponding of the latest
            period, the second term is the value for the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.WeightedMovingAverage(dotnetCHARTING.Series,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)"><summary> Evaluate the Weighted Moving Average(WMA) where the weights associated to all the elements of 
            the historical values are given and the WMA is evaluated for all periods for which there is sufficient 
            historical data.  
            </summary><remarks> That is, the weights are fixed for all given historical values and the window of length 
            <c>lengthOfMA</c> over which  the GMA is evaluated is shifted along the series.
            
            <h3>Application</h3><p>Generally speaking the WMA where the weights are all set and the window over which
            GMA is evaluated is shifted is used when you wish to give emphasis to particular dates.</p><p><b>Note:</b> The length of the <c>weights</c> array must equal or be greater
            than the length of the <c>historicalPrices</c> series. If it's greater than we
            ignore the supplementary values.</p></remarks><param name="s">An series of historical values, where the first element corresponds to the market 
            on the last period, the second term to the value on previous period and so on.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="weightSeries">A series which assigns weights to the k-th previous historical values 
            for the given period on which the moving average is being evaluated.
            Here k is just the length of the weights array given. </param><param name="lengthOfMA">The number of periods over which the weighted moving average is evaluated.
            </param><exception cref="T:System.ArgumentException">Thrown if the length of the weights and series 
            differ or if either series is empty. </exception><returns>A series where the first term is the value of the moving average corresponding of the latest
            period, the second term is the value for the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.WeightedMovingAverage(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue,dotnetCHARTING.Series,System.Int32)"><summary> Evaluate the Weighted Moving Average(WMA) where the weights associated to all the elements of 
            the historical values are given and the WMA is evaluated for all periods for which there is sufficient 
            historical data.  
            </summary><remarks> That is, the weights are fixed for all given historical values and the window of length 
            <c>lengthOfMA</c> over which  the GMA is evaluated is shifted along the series.
            
            <h3>Application</h3><p>Generally speaking the WMA where the weights are all set and the window over which
            GMA is evaluated is shifted is used when you wish to give emphasis to particular dates.</p><p><b>Note:</b> The length of the <c>weights</c> array must equal or be greater
            than the length of the <c>historicalPrices</c> series. If it's greater than we
            ignore the supplementary values.</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="weightSeries">A series which assigns weights to the k-th previous historical values 
            for the given period on which the moving average is being evaluated.
            Here k is just the length of the weights array given. </param><param name="lengthOfMA">The number of periods over which the weighted moving average is evaluated.
            </param><exception cref="T:System.ArgumentException">Thrown if the length of the weights and series 
            differ or if either series is empty.
            </exception><returns>A series where the first term is the value of the moving average corresponding of the latest
            period, the second term is the value for the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.WeightedMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Double[])"><summary> Here we evaluate the Weighted Moving Average(WMA) where for each period for which the 
            WMA is evaluated the historical terms are weighted in accordance with the same set of weights.  
            </summary><remarks> I.e. The weights shift with the window of the historical values.
            
            <h3>Application</h3><p>Generally speaking the WMA is used in order to allow more weight to be
            assigned to more resent price dynamics. Here the length of the weights array
            is used as the length of the period over which the moving average is calculated.
            If you wish to control the number of periods used within the moving average
            then we refer you to <see cref="T:dotnetCHARTING.AnalysisEngine.Implementation.FinancialWeightedMovingAverage"><c>(historicalPrices,
            weights, lengthOfMovingAverage)</c></see>.
            </p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">An series of historical values, where the first element corresponds 
            to the market on the last period, the second term to the value on previous period and so on.
            </param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="weights">Array of doubles which assigns weights to the k-th previous historical values 
            for the given period on which the moving average is being evaluated.
            Here k is just the length of the weights array given.</param><exception cref="T:System.ArgumentException">Thrown if the length of the weights and series differ or 
            if either array is empty.</exception><returns>A series where the first term is the value of the moving average corresponding of
            the latest period, the second term is the value for the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.WeightedMovingAverage(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Double[])"><summary> Here we evaluate the Weighted Moving Average(WMA) where for each period for which the 
            WMA is evaluated the historical terms are weighted in accordance with the same set of weights.  
            </summary><remarks> I.e. The weights shift with the window of the historical values.
            
            <h3>Application</h3><p>Generally speaking the WMA is used in order to allow more weight to be
            assigned to more resent price dynamics. Here the length of the weights array
            is used as the length of the period over which the moving average is calculated.
            If you wish to control the number of periods used within the moving average
            then we refer you to <see cref="T:dotnetCHARTING.AnalysisEngine.Implementation.FinancialWeightedMovingAverage"></see></p></remarks><param name="s">An series of historical values, where the first element corresponds 
            to the market on the last period, the second term to the value on previous period and so on.
            </param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="weights">Array of doubles which assigns weights to the k-th previous historical values 
            for the given period on which the moving average is being evaluated.
            Here k is just the length of the weights array given.</param><exception cref="T:System.ArgumentException">Thrown if the length of the weights and series differ or 
            if either array is empty.</exception><returns>A series where the first term is the value of the moving average corresponding of
            the latest period, the second term is the value for the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.WeightedMovingAverage(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue,System.Double[])"><summary> Here we evaluate the Weighted Moving Average(WMA) where for each period for which the 
            WMA is evaluated the historical terms are weighted in accordance with the same set of weights.  
            </summary><remarks> I.e. The weights shift with the window of the historical values.
            
            <h3>Application</h3><p>Generally speaking the WMA is used in order to allow more weight to be
            assigned to more resent price dynamics. Here the length of the weights array
            is used as the length of the period over which the moving average is calculated.
            If you wish to control the number of periods used within the moving average
            then we refer you to <see cref="M:dotnetCHARTING.FinancialEngine.WeightedMovingAverage(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Double[])"></see></p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="weights">Array of doubles which assigns weights to the k-th previous historical values 
            for the given period on which the moving average is being evaluated.
            Here k is just the length of the weights array given.</param><exception cref="T:System.ArgumentException">Thrown if the length of the weights and series differ or 
            if either array is empty.</exception><returns>A series where the first term is the value of the moving average corresponding of
            the latest period, the second term is the value for the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.Kairi(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,dotnetCHARTING.Series)"><summary> Calculates the Kairi Indicator measure as a percentage of the price, the divergence between 
            the a moving average (generally the simple moving average) of the price and the price itself for each 
            period for which there is sufficient historical values.  
            </summary><remarks><p><b>Remark:</b> The Kairi Indicator is often used with conjunction with other
            moving averages within trading systems.</p><h3>Evaluation</h3><p>The formulae for the Kairi Indicator is as follows:<br></br><br></br>
            Kairi Indicator = (MA - price) / price<br></br><br></br>
            where MA is the moving average being considered and price is the present price
            of the underlying asset.</p><h3>Application</h3><p>The Kairi Indicator can be used in order to take advantage of an over extended
            trending market. For example, in an upwardly trending market when the price gets
            say more than 10% above the simple moving average, the asset could be sold and
            repurchased when the next hits the simple moving average again.</p><p>The Kairi Indicator could also be used in order to detect market tops and bottom.
            The idea being that market tops and bottoms often occur when the price is at an extreme
            value in relation to its moving average. That is, the Kairi Indicator should take an
            extreme value at market tops and bottoms.</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">An series where the first term corresponds to the present price of the underlying 
            asset for the most recent period, the second term corresponds to the present price of the underlying 
            asset for the previous period and so on.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="movingAverageSeries">An series where the first term corresponds to the most recent value 
            of the moving average (generally the simple moving average) of the underlying asset,
            the second term to the previous value and so on.
            </param><returns>An series where the first term returns the Kairi indicator expressed as decimal format 
            (i.e. 0.01 = 1 percent) for the most recent period, the second term returns  the Kairi indicator 
            for the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.Kairi(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,dotnetCHARTING.Series)"><summary> Calculates the Kairi Indicator measure as a percentage of the price, the divergence between 
            the a moving average (generally the simple moving average) of the price and the price itself for each 
            period for which there is sufficient historical values.  
            </summary><remarks><p><b>Remark:</b> The Kairi Indicator is often used with conjunction with other
            moving averages within trading systems.</p><h3>Evaluation</h3><p>The formulae for the Kairi Indicator is as follows:<br></br><br></br>
            Kairi Indicator = (MA - price) / price<br></br><br></br>
            where MA is the moving average being considered and price is the present price
            of the underlying asset.</p><h3>Application</h3><p>The Kairi Indicator can be used in order to take advantage of an over extended
            trending market. For example, in an upwardly trending market when the price gets
            say more than 10% above the simple moving average, the asset could be sold and
            repurchased when the next hits the simple moving average again.</p><p>The Kairi Indicator could also be used in order to detect market tops and bottom.
            The idea being that market tops and bottoms often occur when the price is at an extreme
            value in relation to its moving average. That is, the Kairi Indicator should take an
            extreme value at market tops and bottoms.</p></remarks><param name="movingAverageSeries">An series where the first term corresponds to the most recent value 
            of the moving average (generally the simple moving average) of the underlying asset,
            the second term to the previous value and so on.
            </param><param name="s">An series where the first term corresponds to the present price of the underlying 
            asset for the most recent period, the second term corresponds to the present price of the underlying 
            asset for the previous period and so on.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><returns>An series where the first term returns the Kairi indicator expressed as decimal format 
            (i.e. 0.01 = 1 percent) for the most recent period, the second term returns  the Kairi indicator 
            for the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.Kairi(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,dotnetCHARTING.SeriesCollection)"><summary> Calculates the Kairi Indicator measure as a percentage of the price, the divergence between 
            the a moving average (generally the simple moving average) of the price and the price itself for each 
            period for which there is sufficient historical values.  
            </summary><remarks><p><b>Remark:</b> The Kairi Indicator is often used with conjunction with other
            moving averages within trading systems.</p><h3>Evaluation</h3><p>The formulae for the Kairi Indicator is as follows:<br></br><br></br>
            Kairi Indicator = (MA - price) / price<br></br><br></br>
            where MA is the moving average being considered and price is the present price
            of the underlying asset.</p><h3>Application</h3><p>The Kairi Indicator can be used in order to take advantage of an over extended
            trending market. For example, in an upwardly trending market when the price gets
            say more than 10% above the simple moving average, the asset could be sold and
            repurchased when the next hits the simple moving average again.</p><p>The Kairi Indicator could also be used in order to detect market tops and bottom.
            The idea being that market tops and bottoms often occur when the price is at an extreme
            value in relation to its moving average. That is, the Kairi Indicator should take an
            extreme value at market tops and bottoms.</p></remarks><param name="s">An series where the first term corresponds to the present price of the underlying 
            asset for the most recent period, the second term corresponds to the present price of the underlying 
            asset for the previous period and so on.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="movingAverages">An series where the first term corresponds to the most recent value 
            of the moving average (generally the simple moving average) of the underlying asset,
            the second term to the previous value and so on.
            </param><returns>An series where the first term returns the Kairi indicator expressed as decimal format 
            (i.e. 0.01 = 1 percent) for the most recent period, the second term returns  the Kairi indicator 
            for the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.ZScore(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"><summary> Evaluates the z-score (often referred to as the standardized value) of an element 
            series's element values.
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A financial series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><remarks> The z-score denotes the number of standard deviations of a given element
             of the data set is from the mean of the data set.
            </remarks></member><member name="M:dotnetCHARTING.FinancialEngine.ZScore(dotnetCHARTING.Series,dotnetCHARTING.ElementValue)"><summary> Evaluates the z-score (often referred to as the standardized value) of an element 
            series's element values.
            </summary><param name="s">A financial series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><remarks> The z-score denotes the number of standard deviations of a given element
             of the data set is from the mean of the data set.
            </remarks></member><member name="M:dotnetCHARTING.FinancialEngine.ZScore(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue)"><summary> Evaluates the z-score (often referred to as the standardized value) of an element 
            series's element values.
            </summary><remarks> The z-score denotes the number of standard deviations of a given element
             of the data set is from the mean of the data set.
            </remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param></member><member name="M:dotnetCHARTING.FinancialEngine.LowerBollingerBands(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Double,System.Int32)"><summary>
            Evaluates the position of the Lower Bollinger Band for a given standard deviation level.
            </summary><remarks>
            Please note that by standard deviation level we not only refer to the number of standard
            deviations shifts away from the moving average at which the Lower Bollinger Band is drawn 
            but also the number of time series points which are used in the evaluation of the standard 
            deviation and the moving average.  
            </remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A series where the first term correspond the latest periods
            price and the previous element is the value of the element before that and so on... The length 
            of this series is equal to the number of periods used in the evaluation of the standard
            deviation and the moving average.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="standardDeviationLevel">The number of standard deviation which the lower band in shifted 
            from the moving average.</param><param name="lengthOfMA">The length of the moving average used within the evaluation of the Bollinger
            Bands. Note that this also corresponds to the length of the period over which the standard deviation 
            is evaluated.</param><exception cref="T:System.ArgumentException">Thrown when the  series in empty or the number of standard 
            deviations considered (i.e. the parameters standardDeviationLevel) is not positive number.
            </exception><returns>A series where the first term corresponds to the value of the Upper Bollinger Band for
            the latest periods, the second terms to the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.LowerBollingerBands(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Double,System.Int32)"><summary>
            Evaluates the position of the Lower Bollinger Band for a given standard deviation level.
            </summary><remarks>
            Please note that by standard deviation level we not only refer to the number of standard
            deviations shifts away from the moving average at which the Lower Bollinger Band is drawn 
            but also the number of time series points which are used in the evaluation of the standard 
            deviation and the moving average.  
            </remarks><param name="s">A series where the first term correspond the latest periods
            price and the previous element is the value of the element before that and so on... The length 
            of this series is equal to the number of periods used in the evaluation of the standard
            deviation and the moving average.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="standardDeviationLevel">The number of standard deviation which the lower band in shifted 
            from the moving average.</param><param name="lengthOfMA">The length of the moving average used within the evaluation of the Bollinger
            Bands. Note that this also corresponds to the length of the period over which the standard deviation 
            is evaluated.</param><exception cref="T:System.ArgumentException">Thrown when the  series in empty or the number of standard 
            deviations considered (i.e. the parameters standardDeviationLevel) is not positive number.
            </exception><returns>A series where the first term corresponds to the value of the Upper Bollinger Band for
            the latest periods, the second terms to the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.LowerBollingerBands(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue,System.Double,System.Int32)"><summary>
            Evaluates the position of the Lower Bollinger Band for a given standard deviation level.
            </summary><remarks>
            Please note that by standard deviation level we not only refer to the number of standard
            deviations shifts away from the moving average at which the Lower Bollinger Band is drawn 
            but also the number of time series points which are used in the evaluation of the standard 
            deviation and the moving average.  
            </remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="standardDeviationLevel">The number of standard deviation which the lower band in shifted 
            from the moving average.</param><param name="lengthOfMA">The length of the moving average used within the evaluation of the Bollinger
            Bands. Note that this also corresponds to the length of the period over which the standard deviation 
            is evaluated.</param><exception cref="T:System.ArgumentException">Thrown when the  series in empty or the number of standard 
            deviations considered (i.e. the parameters standardDeviationLevel) is not positive number.
            </exception><returns>A series where the first term corresponds to the value of the Upper Bollinger Band for
            the latest periods, the second terms to the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.UpperBollingerBands(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Double,System.Int32)"><summary>
            Evaluates the position of the Upper Bollinger Band for a given standard deviation level.
            </summary><remarks>
            Please note that by standard deviation level we not only refer to the number of standard
            deviations shifts away from the moving average at which the Higher Bollinger Band is drawn 
            but also the number of time series points which are used in the evaluation of the standard 
            deviation and the moving average.
            </remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">An series  where the first term correspond the latest periods
            price and the previous element is the value of the element before that and so on... The length 
            of this series is equal to the number of periods used in the evaluation of the standard
            deviation.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="standardDeviationLevel">The (positive) number of standard deviations which the lower 
            band in shifted from the moving average.</param><param name="lengthOfMA">The length of the moving average used within the evaluation of the Bollinger 
            Bands. Note that this also corresponds to the length of the period over which the standard deviation 
            is evaluated.</param><exception cref="T:System.ArgumentException">Throw if the series historicalPrices is empty or if the number 
            of standard deviations given (i.e. the parameter standardDeviationsLevel)is a negative number.
            </exception><returns>A series where the first term corresponds to the value of the Upper Bollinger
            Band for the latest periods, the second terms to the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.UpperBollingerBands(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Double,System.Int32)"><summary>
            Evaluates the position of the Upper Bollinger Band for a given standard deviation level.
            </summary><remarks>
            Please note that by standard deviation level we not only refer to the number of standard
            deviations shifts away from the moving average at which the Higher Bollinger Band is drawn 
            but also the number of time series points which are used in the evaluation of the standard 
            deviation and the moving average.
            </remarks><param name="s">An series  where the first term correspond the latest periods
            price and the previous element is the value of the element before that and so on... The length 
            of this series is equal to the number of periods used in the evaluation of the standard
            deviation.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="standardDeviationLevel">The (positive) number of standard deviations which the lower 
            band in shifted from the moving average.</param><param name="lengthOfMA">The length of the moving average used within the evaluation of the Bollinger 
            Bands. Note that this also corresponds to the length of the period over which the standard deviation 
            is evaluated.</param><exception cref="T:System.ArgumentException">Throw if the series historicalPrices is empty or if the number 
            of standard deviations given (i.e. the parameter standardDeviationsLevel)is a negative number.
            </exception><returns>A series where the first term corresponds to the value of the Upper Bollinger
            Band for the latest periods, the second terms to the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.UpperBollingerBands(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue,System.Double,System.Int32)"><summary>
            Evaluates the position of the Upper Bollinger Band for a given standard deviation level.
            </summary><remarks>
            Please note that by standard deviation level we not only refer to the number of standard
            deviations shifts away from the moving average at which the Higher Bollinger Band is drawn 
            but also the number of time series points which are used in the evaluation of the standard 
            deviation and the moving average.
            </remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="standardDeviationLevel">The (positive) number of standard deviations which the lower 
            band in shifted from the moving average.</param><param name="lengthOfMA">The length of the moving average used within the evaluation of the Bollinger 
            Bands. Note that this also corresponds to the length of the period over which the standard deviation 
            is evaluated.</param><exception cref="T:System.ArgumentException">Throw if the series historicalPrices is empty or if the number 
            of standard deviations given (i.e. the parameter standardDeviationsLevel)is a negative number.
            </exception><returns>A series where the first term corresponds to the value of the Upper Bollinger
            Band for the latest periods, the second terms to the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.BollingerBands(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Double,System.Int32)"><summary>
            Within this class we offer procedures which evaluate the upper and lower Bollinger Bands.
            </summary><remarks><h3>Further Details</h3><p>Bollinger Bands are a type of envelope that are plotted at standard
            deviation levels above and below the corresponding (simple) moving average. This
            produces an effect of having the bands widen during periods of higher
            volatility and contract during less volatile periods. Bollinger Bands
            indicate the relative supply and demand for a given asset. If the asset to
            move close to the top of the envelope then it indicates that there is
            strong demand for the asset, conversely if the asset hugs the bottom of
            the trading range then it indicates that there is oversupply of the asset.</p><p>Since the Bollinger Bands will nearly always be combined with other
            indicators when forming a trading system the number of periods used in the
            evaluation of the standard deviation of the stocks and the moving average
            will vary. For those without design restrictions a popular choice of
            the number of time periods is around 20-23.</p></remarks><param name="s">A financial series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="standardDeviationLevel">The (positive) number of standard deviations which the lower band
            in shifted from the moving average.</param><param name="lengthOfMA">The length of the moving average used within the evaluation of the Bollinger 
            Bands. Note that this also corresponds to the length of the period over which the standard deviation 
            is evaluated.</param></member><member name="M:dotnetCHARTING.FinancialEngine.BollingerBands(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue,System.Double,System.Int32)"><summary>
            Within this class we offer procedures which evaluate the upper and lower Bollinger Bands.
            </summary><remarks><h3>Further Details</h3><p>Bollinger Bands are a type of envelope that are plotted at standard
            deviation levels above and below the corresponding (simple) moving average. This
            produces an effect of having the bands widen during periods of higher
            volatility and contract during less volatile periods. Bollinger Bands
            indicate the relative supply and demand for a given asset. If the asset to
            move close to the top of the envelope then it indicates that there is
            strong demand for the asset, conversely if the asset hugs the bottom of
            the trading range then it indicates that there is oversupply of the asset.</p><p>Since the Bollinger Bands will nearly always be combined with other
            indicators when forming a trading system the number of periods used in the
            evaluation of the standard deviation of the stocks and the moving average
            will vary. For those without design restrictions a popular choice of
            the number of time periods is around 20-23.</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="standardDeviationLevel">The (positive) number of standard deviations which the lower band
            in shifted from the moving average.</param><param name="lengthOfMA">The length of the moving average used within the evaluation of the Bollinger 
            Bands. Note that this also corresponds to the length of the period over which the standard deviation 
            is evaluated.</param></member><member name="M:dotnetCHARTING.FinancialEngine.AcumulateDistributeOverPeriod(System.String,dotnetCHARTING.Series,System.Int32)"><summary>
            Evaluates the accumulation/distribution indicator for each of the (sub)collection of periods of 
            a given length.
            </summary><remarks><p>The accumulation/distribution indicator illustrates the degree to which an asset is being 
            accumulated or distributed by the market over each of these collection of periods.  The
            indicator uses the closing price's proximity to the high or low over the period to determine 
            if accumulation or reduction is taking place in the market. The proximity measure if then
            multiplied by the volume over the period in order to give more weight to moves with correspondingly
            higher volume.
            </p><h3>Interpretation</h3><p>A divergence between the price action and the AccumulationDistribution indicator can signal
            that a trend is nearing completion, a trends continuation and break-outs from trading ranges.
            The actual value of this indicator is of no significance, what is significant is its change
            in value relative to the previous periods which can warn of a possible break-out during a
            trading range (falling/rising indicator), the continuation of a trend (higher highs in uptrend,
            or lower lows in downtrend) or a change/completion of a trend (divergence between the price
            action and the direction of the indicator).</p><h3>Example</h3><p>Say for example we know that:
            <ol><li><c>Highs = {3, 4, 3, 4, 5}</c> (i.e. 3 is the latest high)</li><li><c>Lows = {2, 1, 2, 1, 3}</c> (i.e. 2 is the latest low)</li><li><c>Volume = {300, 290, 295, 285, 290}</c> (i.e. 300 is the volume in the latest period.</li></ol></p><p>Now if the <c>lengthOfPeriod</c> considered is 4, then this method will return an array
            of length two where the first term is the accumulation\distribution indicator (evaluated using
            AccumulationDistribution(string, Series)) when:
            <ol><li><c>Highs = {3, 4, 3, 4}</c> (i.e. above highs with last element removed)</li><li><c>Lows = {2, 1, 2, 1}</c> (i.e. above highs with last element removed)</li><li><c>Volume = {300, 290, 295, 285}</c> (i.e. above highs with last element removed)</li></ol>
            and the second term is the accumulation/distribution indicator when:
            <ol><li><c>Highs = {4, 3, 4, 5}</c> (i.e. the window moves one position back)</li><li><c>Lows = {1, 2, 1, 3}</c> (i.e. the window moves one position back)</li><li><c>Volume = {290, 295, 285, 290}</c> (i.e. the window moves one position back)</li></ol></p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A series where the first term is the most recent period, the second term
             is the previous period and so on.
            </param><param name="lengthOfPeriod">An integer which represents the number of periods within each of
            the (sub)collection of periods over which the indicator is evaluated.
            </param></member><member name="M:dotnetCHARTING.FinancialEngine.AcumulateDistributeOverPeriod(dotnetCHARTING.Series,System.Int32)"><summary>
            Evaluates the accumulation/distribution indicator for each of the (sub)collection of periods of 
            a given length.
            </summary><remarks><p>The accumulation/distribution indicator illustrates the degree to which an asset is being 
            accumulated or distributed by the market over each of these collection of periods.  The
            indicator uses the closing price's proximity to the high or low over the period to determine 
            if accumulation or reduction is taking place in the market. The proximity measure if then
            multiplied by the volume over the period in order to give more weight to moves with correspondingly
            higher volume.
            </p><h3>Interpretation</h3><p>A divergence between the price action and the AccumulationDistribution indicator can signal
            that a trend is nearing completion, a trends continuation and break-outs from trading ranges.
            The actual value of this indicator is of no significance, what is significant is its change
            in value relative to the previous periods which can warn of a possible break-out during a
            trading range (falling/rising indicator), the continuation of a trend (higher highs in uptrend,
            or lower lows in downtrend) or a change/completion of a trend (divergence between the price
            action and the direction of the indicator).</p><h3>Example</h3><p>Say for example we know that:
            <ol><li><c>Highs = {3, 4, 3, 4, 5}</c> (i.e. 3 is the latest high)</li><li><c>Lows = {2, 1, 2, 1, 3}</c> (i.e. 2 is the latest low)</li><li><c>Volume = {300, 290, 295, 285, 290}</c> (i.e. 300 is the volume in the latest period.</li></ol></p><p>Now if the <c>lengthOfPeriod</c> considered is 4, then this method will return an array
            of length two where the first term is the accumulation\distribution indicator (evaluated using
            AccumulationDistribution) when:
            <ol><li><c>Highs = {3, 4, 3, 4}</c> (i.e. above highs with last element removed)</li><li><c>Lows = {2, 1, 2, 1}</c> (i.e. above highs with last element removed)</li><li><c>Volume = {300, 290, 295, 285}</c> (i.e. above highs with last element removed)</li></ol>
            and the second term is the accumulation/distribution indicator when:
            <ol><li><c>Highs = {4, 3, 4, 5}</c> (i.e. the window moves one position back)</li><li><c>Lows = {1, 2, 1, 3}</c> (i.e. the window moves one position back)</li><li><c>Volume = {290, 295, 285, 290}</c> (i.e. the window moves one position back)</li></ol></p></remarks><param name="s">A series where the first term is the most recent period, the second term
             is the previous period and so on.
            </param><param name="lengthOfPeriod">An integer which represents the number of periods within each of
            the (sub)collection of periods over which the indicator is evaluated.
            </param></member><member name="M:dotnetCHARTING.FinancialEngine.AcumulateDistributeOverPeriod(dotnetCHARTING.SeriesCollection,System.Int32)"><summary>
            Evaluates the accumulation/distribution indicator for each of the (sub)collection of periods of 
            a given length.
            </summary><remarks><p>The accumulation/distribution indicator illustrates the degree to which an asset is being 
            accumulated or distributed by the market over each of these collection of periods.  The
            indicator uses the closing price's proximity to the high or low over the period to determine 
            if accumulation or reduction is taking place in the market. The proximity measure if then
            multiplied by the volume over the period in order to give more weight to moves with correspondingly
            higher volume.
            </p><h3>Interpretation</h3><p>A divergence between the price action and the AccumulationDistribution indicator can signal
            that a trend is nearing completion, a trends continuation and break-outs from trading ranges.
            The actual value of this indicator is of no significance, what is significant is its change
            in value relative to the previous periods which can warn of a possible break-out during a
            trading range (falling/rising indicator), the continuation of a trend (higher highs in uptrend,
            or lower lows in downtrend) or a change/completion of a trend (divergence between the price
            action and the direction of the indicator).</p><h3>Example</h3><p>Say for example we know that:
            <ol><li><c>Highs = {3, 4, 3, 4, 5}</c> (i.e. 3 is the latest high)</li><li><c>Lows = {2, 1, 2, 1, 3}</c> (i.e. 2 is the latest low)</li><li><c>Volume = {300, 290, 295, 285, 290}</c> (i.e. 300 is the volume in the latest period.</li></ol></p><p>Now if the <c>lengthOfPeriod</c> considered is 4, then this method will return an array
            of length two where the first term is the accumulation\distribution indicator (evaluated using
            <c>AccumulationDistribution</c>) when:
            <ol><li><c>Highs = {3, 4, 3, 4}</c> (i.e. above highs with last element removed)</li><li><c>Lows = {2, 1, 2, 1}</c> (i.e. above highs with last element removed)</li><li><c>Volume = {300, 290, 295, 285}</c> (i.e. above highs with last element removed)</li></ol>
            and the second term is the accumulation/distribution indicator when:
            <ol><li><c>Highs = {4, 3, 4, 5}</c> (i.e. the window moves one position back)</li><li><c>Lows = {1, 2, 1, 3}</c> (i.e. the window moves one position back)</li><li><c>Volume = {290, 295, 285, 290}</c> (i.e. the window moves one position back)</li></ol></p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="lengthOfPeriod">An integer which represents the number of periods within each of
            the (sub)collection of periods over which the indicator is evaluated.
            </param></member><member name="M:dotnetCHARTING.FinancialEngine.ChaikinOscillator(System.String,dotnetCHARTING.Series,System.Double)"><summary> This method implements the Chaikin Oscillator (also known as the Chaikin A/D Oscillator) and
            evaluates this indicator for the latest and all previous periods for which there exists sufficient data.
            </summary><remarks> The Chaikin Oscillator presents the information contained within the A/D indicator in the 
            convenient form of an oscillator. That is, the Chaikin Oscillator is simply the Moving Average Convergence
            Divergence indicator (MACD) applied to the Accumulation/Distribution Line.
            
            <h3>Interpretation</h3><p>A sell signal is when price action develops a higher high into overbought zones and
            the Chaikin Oscillator diverges with a lower high and begins to fall. Conversely, a
            buy signal is generated when price action develops a lower low into oversold zones
            and the oscillator diverges with a higher low and begins to rise. The Chaikin Oscillator
            can also be used to time entry to existing trends by either buying the dip (when the
            oscillator turns down) or selling the rally (when the oscillator turns up).</p><h3>Evaluation</h3><p>The Chaiken Oscillator for a given period is given by:<br></br><br></br>
            EMA_3(Accumulate/Distribution) - EMA_10(Accumulate/Distribution),<br></br><br></br></p><p>where EMA_3 and EMA_10 is the exponential moving average over 3 and 10 days
            respectively; and Accumulate/Distribution is the corresponding indicator over
            those 3 or 10 days respectively.</p><h3>Illustration</h3><p>If we are provided within the high, low and volume over the last 15 periods, then
            we will be able to evaluate the Chaikin Oscillator on the previous 5 trading days.
            Since the evaluation of the oscillator on a given period requires knowledge of the
            10 previous periods data.</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A financial series.</param><param name="smoothingFactor">The number between 0 and 1. The lower the number the more sensitive
             the indicator is.
            </param><returns>A series where the first term is the value of the oscillator using the last 10 days
            data, the previous term is the value of the oscillator on the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.ChaikinOscillator(dotnetCHARTING.Series,System.Double)"><summary> This method implements the Chaikin Oscillator (also known as the Chaikin A/D Oscillator) and
            evaluates this indicator for the latest and all previous periods for which there exists sufficient data.
            </summary><remarks> The Chaikin Oscillator presents the information contained within the A/D indicator in the 
            convenient form of an oscillator. That is, the Chaikin Oscillator is simply the Moving Average Convergence
            Divergence indicator (MACD) applied to the Accumulation/Distribution Line.
            
            <h3>Interpretation</h3><p>A sell signal is when price action develops a higher high into overbought zones and
            the Chaikin Oscillator diverges with a lower high and begins to fall. Conversely, a
            buy signal is generated when price action develops a lower low into oversold zones
            and the oscillator diverges with a higher low and begins to rise. The Chaikin Oscillator
            can also be used to time entry to existing trends by either buying the dip (when the
            oscillator turns down) or selling the rally (when the oscillator turns up).</p><h3>Evaluation</h3><p>The Chaiken Oscillator for a given period is given by:<br></br><br></br>
            EMA_3(Accumulate/Distribution) - EMA_10(Accumulate/Distribution),<br></br><br></br></p><p>where EMA_3 and EMA_10 is the exponential moving average over 3 and 10 days
            respectively; and Accumulate/Distribution is the corresponding indicator over
            those 3 or 10 days respectively.</p><h3>Illustration</h3><p>If we are provided within the high, low and volume over the last 15 periods, then
            we will be able to evaluate the Chaikin Oscillator on the previous 5 trading days.
            Since the evaluation of the oscillator on a given period requires knowledge of the
            10 previous periods data.</p></remarks><param name="s">A financial series.</param><param name="smoothingFactor">The number between 0 and 1. The lower the number the more sensitive
             the indicator is.
            </param><returns>A series where the first term is the value of the oscillator using the last 10 days
            data, the previous term is the value of the oscillator on the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.ChaikinOscillator(dotnetCHARTING.SeriesCollection,System.Int32)"><summary> This method implements the Chaikin Oscillator (also known as the Chaikin A/D Oscillator) and
            evaluates this indicator for the latest and all previous periods for which there exists sufficient data.
            </summary><remarks> The Chaikin Oscillator presents the information contained within the A/D indicator in the 
            convenient form of an oscillator. That is, the Chaikin Oscillator is simply the Moving Average Convergence
            Divergence indicator (MACD) applied to the Accumulation/Distribution Line.
            
            <h3>Interpretation</h3><p>A sell signal is when price action develops a higher high into overbought zones and
            the Chaikin Oscillator diverges with a lower high and begins to fall. Conversely, a
            buy signal is generated when price action develops a lower low into oversold zones
            and the oscillator diverges with a higher low and begins to rise. The Chaikin Oscillator
            can also be used to time entry to existing trends by either buying the dip (when the
            oscillator turns down) or selling the rally (when the oscillator turns up).</p><h3>Evaluation</h3><p>The Chaiken Oscillator for a given period is given by:<br></br><br></br>
            EMA_3(Accumulate/Distribution) - EMA_10(Accumulate/Distribution),<br></br><br></br></p><p>where EMA_3 and EMA_10 is the exponential moving average over 3 and 10 days
            respectively; and Accumulate/Distribution is the corresponding indicator over
            those 3 or 10 days respectively.</p><h3>Illustration</h3><p>If we are provided within the high, low and volume over the last 15 periods, then
            we will be able to evaluate the Chaikin Oscillator on the previous 5 trading days.
            Since the evaluation of the oscillator on a given period requires knowledge of the
            10 previous periods data.</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="smoothingFactor">The number between 0 and 1. The lower the number the more sensitive
             the indicator is.
            </param><returns>A series where the first term is the value of the oscillator using the last 10 days
            data, the previous term is the value of the oscillator on the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.ChaikinMoneyFlowOverPeriod(System.String,dotnetCHARTING.Series,System.Int32)"><summary> Iteratively evaluate the Chaikin Money Flow (CMF)indicator over all (sub)collections of
            periods of a given length for all periods for which data is provided.  
            </summary><remarks> In particular, this method returns an array where the 1st term of the CMF indicator 
            for the latest period, the second term of the CMF in the previous period and so on. Please note
            that the CMF will be evaluated for all periods for which there is sufficient data (see example 
            below for more details).
            
            <p><b>Remark:</b> The form in which the Chaikin Money Flow (CMF) in provided here is
            particularly suitable when wishing to integrated this functionality within a Client side
            GUI Charting Application.</p><h3>Details of Chaikin Money Flow (CMF)</h3><p>Chaikin Money Flow (CMF) is a volume weighted average of Accumulation/Distribution over
            a specified period, which is usually taken to be 21 days. The CMF offers a volume weighted
            indicator on the following two principles:
            <ul><li> The nearer the close is to the high the more accumulation is taking place.</li><li> The nearer the close is to the low the more distribution is taking place.</li></ul></p><h3>Evaluation</h3><p>The CMF indicator is evaluated for the following steps:
            <ul><li> Evaluate the Volume Weighted Accumulation/Distribution over each of the days within the
            period considered for the calculation. The Volume Weighted Accumulation/Distribution on each
            day is given by:<br></br><br></br>
            (((Close - Low)-(High - Close))/(High - Low)) * Volume</li><li> Sum the Volume Weighted Accumulation/Distribution over the period and the divide the
            result by the sum of the volume over the period.</li></ul></p><h3>Example of Application</h3><p>Within this example we illustrate the way this method works when we consider a given 10
            period in which the length of period over which the CHM is evaluated is 4. In this case
            the result will be an array of 7 elements as follows:
            <ul><li> result[0]: CMF calculated over the last four periods</li><li> result[1]: CMF calculated over previous four periods</li><li> ... </li><li> result[7]: CMF calculated using the periods between the earliest period and the fourth from
            earliest period.</li></ul></p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A financial series.</param><param name="lengthOfPeriod">An integer which represents the number of periods over which the
            indicator is calculated.
            </param></member><member name="M:dotnetCHARTING.FinancialEngine.ChaikinMoneyFlowOverPeriod(dotnetCHARTING.Series,System.Int32)"><summary> Iteratively evaluate the Chaikin Money Flow (CMF)indicator over all (sub)collections of
            periods of a given length for all periods for which data is provided.  
            </summary><remarks> In particular, this method returns an array where the 1st term of the CMF indicator 
            for the latest period, the second term of the CMF in the previous period and so on. Please note
            that the CMF will be evaluated for all periods for which there is sufficient data (see example 
            below for more details).
            
            <p><b>Remark:</b> The form in which the Chaikin Money Flow (CMF) in provided here is
            particularly suitable when wishing to integrated this functionality within a Client side
            GUI Charting Application.</p><h3>Details of Chaikin Money Flow (CMF)</h3><p>Chaikin Money Flow (CMF) is a volume weighted average of Accumulation/Distribution over
            a specified period, which is usually taken to be 21 days. The CMF offers a volume weighted
            indicator on the following two principles:
            <ul><li> The nearer the close is to the high the more accumulation is taking place.</li><li> The nearer the close is to the low the more distribution is taking place.</li></ul></p><h3>Evaluation</h3><p>The CMF indicator is evaluated for the following steps:
            <ul><li> Evaluate the Volume Weighted Accumulation/Distribution over each of the days within the
            period considered for the calculation. The Volume Weighted Accumulation/Distribution on each
            day is given by:<br></br><br></br>
            (((Close - Low)-(High - Close))/(High - Low)) * Volume</li><li> Sum the Volume Weighted Accumulation/Distribution over the period and the divide the
            result by the sum of the volume over the period.</li></ul></p><h3>Example of Application</h3><p>Within this example we illustrate the way this method works when we consider a given 10
            period in which the length of period over which the CHM is evaluated is 4. In this case
            the result will be an array of 7 elements as follows:
            <ul><li> result[0]: CMF calculated over the last four periods</li><li> result[1]: CMF calculated over previous four periods</li><li> ... </li><li> result[7]: CMF calculated using the periods between the earliest period and the fourth from
            earliest period.</li></ul></p></remarks><param name="s">A financial series.</param><param name="lengthOfPeriod">An integer which represents the number of periods over which the
            indicator is calculated.
            </param></member><member name="M:dotnetCHARTING.FinancialEngine.ChaikinMoneyFlowOverPeriod(dotnetCHARTING.SeriesCollection,System.Int32)"><summary> Iteratively evaluate the Chaikin Money Flow (CMF)indicator over all (sub)collections of
            periods of a given length for all periods for which data is provided.  
            </summary><remarks> In particular, this method returns an array where the 1st term of the CMF indicator 
            for the latest period, the second term of the CMF in the previous period and so on. Please note
            that the CMF will be evaluated for all periods for which there is sufficient data (see example 
            below for more details).
            
            <p><b>Remark:</b> The form in which the Chaikin Money Flow (CMF) in provided here is
            particularly suitable when wishing to integrated this functionality within a Client side
            GUI Charting Application.</p><h3>Details of Chaikin Money Flow (CMF)</h3><p>Chaikin Money Flow (CMF) is a volume weighted average of Accumulation/Distribution over
            a specified period, which is usually taken to be 21 days. The CMF offers a volume weighted
            indicator on the following two principles:
            <ul><li> The nearer the close is to the high the more accumulation is taking place.</li><li> The nearer the close is to the low the more distribution is taking place.</li></ul></p><h3>Evaluation</h3><p>The CMF indicator is evaluated for the following steps:
            <ul><li> Evaluate the Volume Weighted Accumulation/Distribution over each of the days within the
            period considered for the calculation. The Volume Weighted Accumulation/Distribution on each
            day is given by:<br></br><br></br>
            (((Close - Low)-(High - Close))/(High - Low)) * Volume</li><li> Sum the Volume Weighted Accumulation/Distribution over the period and the divide the
            result by the sum of the volume over the period.</li></ul></p><h3>Example of Application</h3><p>Within this example we illustrate the way this method works when we consider a given 10
            period in which the length of period over which the CHM is evaluated is 4. In this case
            the result will be an array of 7 elements as follows:
            <ul><li> result[0]: CMF calculated over the last four periods</li><li> result[1]: CMF calculated over previous four periods</li><li> ... </li><li> result[7]: CMF calculated using the periods between the earliest period and the fourth from
            earliest period.</li></ul></p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="lengthOfPeriod">An integer which represents the number of periods over which the
            indicator is calculated.
            </param></member><member name="M:dotnetCHARTING.FinancialEngine.ChaikinVolatility(System.String,dotnetCHARTING.Series,System.Int32,System.Int32)"><summary>
            Chaikin's Volatility indicator compares the spread between a security's high and low prices.
            </summary><remarks>
            It quantifies volatility as a widening of the range between the high and the low price.
            
            <h3>Indicator Formula</h3><p>The formula for this indicator is:</p><ol><li>chaikinVolatility = ((H-LAverage - H-LAverage_n_periods_ago)/H-LAverage_n_periods_ago)*100</li></ol></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A financial series.</param><param name="lengthOfMA">The number of periods considered within the evaluation of the moving average for each of the periods on which it can be evaluated.</param><param name="noOfPeriods">An integer which represents the number of previous time periods used over which the comparing moving average is taken.</param><exception cref="T:System.ArgumentException">Thrown if either parameter is strictly negative or arrays closes or volumes are empty.</exception></member><member name="M:dotnetCHARTING.FinancialEngine.ChaikinVolatility(dotnetCHARTING.Series,System.Int32,System.Int32)"><summary>
            Chaikin's Volatility indicator compares the spread between a security's high and low prices.
            </summary><remarks>
            It quantifies volatility as a widening of the range between the high and the low price.
            
            <h3>Indicator Formula</h3><p>The formula for this indicator is:</p><ol><li>chaikinVolatility = ((H-LAverage - H-LAverage_n_periods_ago)/H-LAverage_n_periods_ago)*100</li></ol></remarks><param name="s">A financial series.</param><param name="lengthOfMA">The number of periods considered within the evaluation of the moving average for each of the periods on which it can be evaluated.</param><param name="noOfPeriods">An integer which represents the number of previous time periods used over which the comparing moving average is taken.</param><exception cref="T:System.ArgumentException">Thrown if either parameter is strictly negative or arrays closes or volumes are empty.</exception></member><member name="M:dotnetCHARTING.FinancialEngine.ChaikinVolatility(dotnetCHARTING.SeriesCollection,System.Int32,System.Int32)"><summary>
            Chaikin's Volatility indicator compares the spread between a security's high and low prices.
            </summary><remarks>
            It quantifies volatility as a widening of the range between the high and the low price.
            
            <h3>Indicator Formula</h3><p>The formula for this indicator is:</p><ol><li>chaikinVolatility = ((H-LAverage - H-LAverage_n_periods_ago)/H-LAverage_n_periods_ago)*100</li></ol></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="lengthOfMA">The number of periods considered within the evaluation of the moving average for each of the periods on which it can be evaluated.</param><param name="noOfPeriods">An integer which represents the number of previous time periods used over which the comparing moving average is taken.</param><exception cref="T:System.ArgumentException">Thrown if either parameter is strictly negative or arrays closes or volumes are empty.</exception></member><member name="M:dotnetCHARTING.FinancialEngine.MedianPrice(System.String,dotnetCHARTING.Series)"><summary>
            Evaluates the Median Price of an asset for a given trading period.
            </summary><remarks>
            The Median price is just the midpoint of the trading periods range, where the period considered 
            is generally  a day, however the Median price is equally applicable to other time spans and hence the
            period considered could be (for example) a month or year.
            </remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">The financial series under consideration.</param></member><member name="M:dotnetCHARTING.FinancialEngine.MedianPrice(dotnetCHARTING.Series)"><summary>
            Evaluates the Median Price of an asset for a given trading period.
            </summary><remarks>
            The Median price is just the midpoint of the trading periods range, where the period considered 
            is generally  a day, however the Median price is equally applicable to other time spans and hence the
            period considered could be (for example) a month or year.
            </remarks><param name="s">The financial series under consideration.</param></member><member name="M:dotnetCHARTING.FinancialEngine.MedianPrice(dotnetCHARTING.SeriesCollection)"><summary>
            Evaluates the Median Price of an asset for a given trading period.
            </summary><remarks>
            The Median price is just the midpoint of the trading periods range, where the period considered 
            is generally  a day, however the Median price is equally applicable to other time spans and hence the
            period considered could be (for example) a month or year.
            </remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param></member><member name="M:dotnetCHARTING.FinancialEngine.TypicalPrice(System.String,dotnetCHARTING.Series)"><summary>
            Evaluates the Typical Price of an asset within a given trading period.
            </summary><remarks>
            The typical price is just the arithmetic average of the high, low and closing
            price for the trading period considered. Generally speaking the period considered
            will be a single trading day, however the typical price is equally applicable to
            other time spans and hence the period considered could be (for example) a month
            or year.
            <h3>Applications</h3><p>The Typical Price is often used in place of the closing price in the development
            of trading systems in which either another intra-day system is used from the intra-period
            timing of trades, or when the trading party is given discretion on intra-period trading
            decisions.</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">The financial series.</param></member><member name="M:dotnetCHARTING.FinancialEngine.TypicalPrice(dotnetCHARTING.Series)"><summary>
            Evaluates the Typical Price of an asset within a given trading period.
            </summary><remarks>
            The typical price is just the arithmetic average of the high, low and closing
            price for the trading period considered. Generally speaking the period considered
            will be a single trading day, however the typical price is equally applicable to
            other time spans and hence the period considered could be (for example) a month
            or year.
            <h3>Applications</h3><p>The Typical Price is often used in place of the closing price in the development
            of trading systems in which either another intra-day system is used from the intra-period
            timing of trades, or when the trading party is given discretion on intra-period trading
            decisions.</p></remarks><param name="s">The financial series.</param></member><member name="M:dotnetCHARTING.FinancialEngine.TypicalPrice(dotnetCHARTING.SeriesCollection)"><summary>
            Evaluates the Typical Price of an asset within a given trading period.
            </summary><remarks>
            The typical price is just the arithmetic average of the high, low and closing
            price for the trading period considered. Generally speaking the period considered
            will be a single trading day, however the typical price is equally applicable to
            other time spans and hence the period considered could be (for example) a month
            or year.
            <h3>Applications</h3><p>The Typical Price is often used in place of the closing price in the development
            of trading systems in which either another intra-day system is used from the intra-period
            timing of trades, or when the trading party is given discretion on intra-period trading
            decisions.</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param></member><member name="M:dotnetCHARTING.FinancialEngine.AveragePrice(System.String,dotnetCHARTING.Series)"><summary>
            Evaluates the Average Price for each periods of a collection of periods.
            </summary><remarks>
            The Average price is just the average of the High, Low, Open and Close of each of the trading 
            periods ranges, where the period considered will generally a day, however the Average price is equally
             applicable to other time spans and hence the period considered could be (for example) a month or year.
            </remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A financial series, where the first element is the traded price on the most recent period,
            the second element is the traded price of the previous periods and so on, for the asset under 
            consideration.</param><exception cref="T:System.ArgumentException">Thrown if the <c>High</c>, <c>Low</c>, <c>Open</c>, 
            <c>Close</c> are strictly negative.</exception><returns>A series where the first element is the Average Price of the asset on the most recent 
            period considered, the second term is the Average Price on the period before that and so on.</returns></member><member name="M:dotnetCHARTING.FinancialEngine.AveragePrice(dotnetCHARTING.Series)"><summary>
            Evaluates the Average Price for each periods of a collection of periods.
            </summary><remarks>
            The Average price is just the average of the High, Low, Open and Close of each of the trading 
            periods ranges, where the period considered will generally a day, however the Average price is equally
             applicable to other time spans and hence the period considered could be (for example) a month or year.
            </remarks><param name="s">A financial series where the first element is the traded price on the most recent period,
            the second element is the traded price of the previous periods and so on, for the asset under 
            consideration.</param><exception cref="T:System.ArgumentException">Thrown if the <c>High</c>, <c>Low</c>, <c>Open</c>, 
            <c>Close</c> are strictly negative.</exception><returns>A series where the first element is the Average Price of the asset on the most recent 
            period considered, the second term is the Average Price on the period before that and so on.</returns></member><member name="M:dotnetCHARTING.FinancialEngine.AveragePrice(dotnetCHARTING.SeriesCollection)"><summary>
            Evaluates the Average Price for each periods of a collection of periods.
            </summary><remarks>
            The Average price is just the average of the High, Low, Open and Close of each of the trading 
            periods ranges, where the period considered will generally a day, however the Average price is equally
             applicable to other time spans and hence the period considered could be (for example) a month or year.
            </remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param></member><member name="M:dotnetCHARTING.FinancialEngine.PriceActionIndicator(System.String,dotnetCHARTING.Series)"><summary>
            Evaluates the Price Action Indicator (PAIN) of an asset for a given trading period.
            </summary><remarks><h3>Evaluation</h3><p>The PAIN indicator is evaluated by the following formula:
            <br></br><c>PAIN = ((Close-Open)+(Close-High)+(Close-Low))/2</c><br></br> where:
            <ol><li>(Close-Open) defines Intra-Day Momentum</li><li>(Close-Low) defines Late Selling Pressure (LSP)</li><li>(Close-High) defines Late Buying Pressure (LBP)</li></ol><c>Close</c> is the period closing price, <c>Open</c> is the period opening
            price, <c>High</c> is the highest traded price during the period and <c>Low</c>
            is the lowest traded price during the period.</p><h3>Interpretation</h3><p>When the close is near the low, the assets's price is under selling pressure.
            If the close is near the high the asset's price is  price is under buying pressure</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A financial series where the first element is the traded price on the most recent period,
            the second element is the traded price of the previous periods and so on, for the asset under 
            consideration.</param><exception cref="T:System.ArgumentException">Thrown if the <c>High</c>, <c>Low</c>, <c>Open</c>, 
            <c>Close</c> are strictly negative.</exception><returns>A series where the first element is the PAIN of the asset on the most recent period considered,
            the second term is the PAIN on the period before that and so on.</returns></member><member name="M:dotnetCHARTING.FinancialEngine.PriceActionIndicator(dotnetCHARTING.Series)"><summary>
            Evaluates the Price Action Indicator (PAIN) of an asset for a given trading period.
            </summary><remarks><h3>Evaluation</h3><p>The PAIN indicator is evaluated by the following formula:
            <br></br><c>PAIN = ((Close-Open)+(Close-High)+(Close-Low))/2</c><br></br> where:
            <ol><li>(Close-Open) defines Intra-Day Momentum</li><li>(Close-Low) defines Late Selling Pressure (LSP)</li><li>(Close-High) defines Late Buying Pressure (LBP)</li></ol><c>Close</c> is the period closing price, <c>Open</c> is the period opening
            price, <c>High</c> is the highest traded price during the period and <c>Low</c>
            is the lowest traded price during the period.</p><h3>Interpretation</h3><p>When the close is near the low, the assets's price is under selling pressure.
            If the close is near the high the asset's price is  price is under buying pressure</p></remarks><exception cref="T:System.ArgumentException">Thrown if the <c>High</c>, <c>Low</c>, <c>Open</c>, 
            <c>Close</c> are strictly negative.</exception><param name="s">A financial series, where the first element is the traded price on the most recent period,
            the second element is the traded price of the previous periods and so on, for the asset under 
            consideration.</param><returns>A series where the first element is the PAIN of the asset on the most recent period considered,
            the second term is the PAIN on the period before that and so on.</returns></member><member name="M:dotnetCHARTING.FinancialEngine.PriceActionIndicator(dotnetCHARTING.SeriesCollection)"><summary>
            Evaluates the Price Action Indicator (PAIN) of an asset for a given trading period.
            </summary><remarks><h3>Evaluation</h3><p>The PAIN indicator is evaluated by the following formula:
            <br></br><c>PAIN = ((Close-Open)+(Close-High)+(Close-Low))/2</c><br></br> where:
            <ol><li>(Close-Open) defines Intra-Day Momentum</li><li>(Close-Low) defines Late Selling Pressure (LSP)</li><li>(Close-High) defines Late Buying Pressure (LBP)</li></ol><c>Close</c> is the period closing price, <c>Open</c> is the period opening
            price, <c>High</c> is the highest traded price during the period and <c>Low</c>
            is the lowest traded price during the period.</p><h3>Interpretation</h3><p>When the close is near the low, the assets's price is under selling pressure.
            If the close is near the high the asset's price is  price is under buying pressure</p></remarks><exception cref="T:System.ArgumentException">Thrown if the <c>High</c>, <c>Low</c>, <c>Open</c>, 
            <c>Close</c> are strictly negative.</exception><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param></member><member name="M:dotnetCHARTING.FinancialEngine.FiniteImpulseResponse(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Double[])"><summary>
            Calculates a Finite Impulse Response Filter.
            </summary><remarks>
            This is a type of smoothing filter that assigns different weights
            to prices from the past.
            
            <h3>Evaluation</h3><p>The FIR indicator is evaluated by the following formula:
            <br></br><c> FIR = ((historicalValues[i]*weights[0]) + historicalValues[i-1]*wights[1] + ...)/(Sum of weights)</c><br></br></p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">The financial series where the first element is the traded price on the most recent period,
            the second element is the traded price of the previous periods and so on, for the asset under 
            consideration.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="weights">A double array which represent the different weights associated with 
            the given prices.</param><exception cref="T:System.ArgumentException">Thrown if the length of the given series, s, 
            is less than the length of weights double array or if any elements of the s is strictly negative.</exception><returns>A series where the first element is the FIR of the asset on the most recent period considered,
            the second term is the FIR on the period before that and so on.</returns></member><member name="M:dotnetCHARTING.FinancialEngine.FiniteImpulseResponse(dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Double[])"><summary>
            Calculates a Finite Impulse Response Filter.
            </summary><remarks>
            This is a type of smoothing filter that assigns different weights
            to prices from the past.
            
            <h3>Evaluation</h3><p>The FIR indicator is evaluated by the following formula:
            <br></br><c> FIR = ((historicalValues[i]*weights[0]) + historicalValues[i-1]*wights[1] + ...)/(Sum of weights)</c><br></br></p></remarks><param name="s">The financial series where the first element is the traded price on the most recent period,
            the second element is the traded price of the previous periods and so on, for the asset under 
            consideration.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="weights">A double array which represent the different weights associated with 
            the given prices.</param><exception cref="T:System.ArgumentException">Thrown if the length of the given series, s, 
            is less than the length of weights double array or if any elements of the s is strictly negative.</exception><returns>A series where the first element is the FIR of the asset on the most recent period considered,
            the second term is the FIR on the period before that and so on.</returns></member><member name="M:dotnetCHARTING.FinancialEngine.FiniteImpulseResponse(dotnetCHARTING.SeriesCollection,dotnetCHARTING.ElementValue,System.Double[])"><summary>
            Calculates a Finite Impulse Response Filter.
            </summary><remarks>
            This is a type of smoothing filter that assigns different weights
            to prices from the past.
            
            <h3>Evaluation</h3><p>The FIR indicator is evaluated by the following formula:
            <br></br><c> FIR = ((historicalValues[i]*weights[0]) + historicalValues[i-1]*wights[1] + ...)/(Sum of weights)</c><br></br></p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="elementValue">Specifies the particular element value (for example  High, Low, Close or Open of
            the financial time series) which will be considered within this indicator evaluation. In particular, 
            if you wish to use the element value high then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">High</see>. In a similarly fashion if you wish to
            use the low, close or open, then you should pass the parameter
            <see cref="T:dotnetCHARTING.ElementValue">Low</see>, <see cref="T:dotnetCHARTING.ElementValue">Close</see>,
            <see cref="T:dotnetCHARTING.ElementValue">Open</see>, respectively.</param><param name="weights">A double array which represent the different weights associated with 
            the given prices.</param><exception cref="T:System.ArgumentException">Thrown if the length of the given series, s, 
            is less than the length of weights double array or if any elements of the s is strictly negative.</exception></member><member name="M:dotnetCHARTING.FinancialEngine.MarketFacilitationIndex(System.String,dotnetCHARTING.Series)"><summary>
            Market Facilitation Index was developed by Dr. Bill Williams and take into consideration the
            price and volume.
            </summary><remarks><h3>Evaluation</h3><p>The formula for the calculation of MFI is:
            <br></br><c>MFI = (high - low)/volume</c><br></br>
            where <c>high</c> is the highest traded price during the period, <c>low</c>
            is the lowest traded price during the period and, <c>volume</c> is the overall
            volume traded on that period.</p><h3>Interpretation</h3><p>There are four types of trading sessions called:
            <ol><li>Fakes - volume is low but MFI is rising</li><li>Fades - both volume and MFI is down (the price might move in the opposite direction)</li><li>Squats - the volume is up, MFI is down</li><li>Greens - when the MFI and volume are up which represent a strong signal to follow the trendline</li></ol></p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">The financial series where the first element is the traded price on the most recent period,
            the second element is the traded price of the previous periods and so on, for the asset under 
            consideration.</param></member><member name="M:dotnetCHARTING.FinancialEngine.MarketFacilitationIndex(dotnetCHARTING.Series)"><summary>
            Market Facilitation Index was developed by Dr. Bill Williams and take into consideration the
             price and volume.
            </summary><remarks><h3>Evaluation</h3><p>The formula for the calculation of MFI is:
            <br></br><c>MFI = (high - low)/volume</c><br></br>
            where <c>high</c> is the highest traded price during the period, <c>low</c>
            is the lowest traded price during the period and, <c>volume</c> is the overall
            volume traded on that period.</p><h3>Interpretation</h3><p>There are four types of trading sessions called:
            <ol><li>Fakes - volume is low but MFI is rising</li><li>Fades - both volume and MFI is down (the price might move in the opposite direction)</li><li>Squats - the volume is up, MFI is down</li><li>Greens - when the MFI and volume are up which represent a strong signal to follow the trendline</li></ol></p></remarks><param name="s">The financial series where the first element is the traded price on the most recent period,
            the second element is the traded price of the previous periods and so on, for the asset under 
            consideration.</param></member><member name="M:dotnetCHARTING.FinancialEngine.MarketFacilitationIndex(dotnetCHARTING.SeriesCollection)"><summary>
            Market Facilitation Index was developed by Dr. Bill Williams and take into consideration the
             price and volume.
            </summary><remarks><h3>Evaluation</h3><p>The formula for the calculation of MFI is:
            <br></br><c>MFI = (high - low)/volume</c><br></br>
            where <c>high</c> is the highest traded price during the period, <c>low</c>
            is the lowest traded price during the period and, <c>volume</c> is the overall
            volume traded on that period.</p><h3>Interpretation</h3><p>There are four types of trading sessions called:
            <ol><li>Fakes - volume is low but MFI is rising</li><li>Fades - both volume and MFI is down (the price might move in the opposite direction)</li><li>Squats - the volume is up, MFI is down</li><li>Greens - when the MFI and volume are up which represent a strong signal to follow the trendline</li></ol></p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param></member><member name="M:dotnetCHARTING.FinancialEngine.AroonUp(System.String,dotnetCHARTING.Series)"><summary>
            Evaluates the Aroon Up indicator which measures the relative time since the last highest high.
            </summary><remarks>
            The indicator will return a value between 0 and 100, where a higher
            value indicates that the highest high was achieved more recently. Persistent
            values between 70 and 100 are said to indicate strength in the asset and in
            conjunction with a low range (i.e. 0-30) in the Aroon Down indicator,
            indicates an upward trend.
            
            <h3>Evaluation of the Aroon Up Indicator</h3><p>The Aroon Up indicator is given by:<br></br><br></br>
            100(n - (number of days since last highest high over n days))/n<br></br><br></br>
            where n is the number of days being considered (a reasonable
            default value for n is 14).</p></remarks><param name="s">A series of the trading highs over the last n-periods where the k-th 
            terms of the array if the trading high on the k-th previous period.</param><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.AroonUpOverPeriod(System.String,dotnetCHARTING.Series,System.Int32)">This indicator is a generalization of AroonUp indicator 
            and calculates the values of the Aroon Up indicator over all sub-periods of a given length
            for all possible periods for which sufficient historical data is provided.
            </seealso></member><member name="M:dotnetCHARTING.FinancialEngine.AroonUp(dotnetCHARTING.Series)"><summary>
            Evaluates the Aroon Up indicator which measures the relative time since the last highest high.
            </summary><remarks>
            The indicator will return a value between 0 and 100, where a higher
            value indicates that the highest high was achieved more recently. Persistent
            values between 70 and 100 are said to indicate strength in the asset and in
            conjunction with a low range (i.e. 0-30) in the Aroon Down indicator,
            indicates an upward trend.
            
            <h3>Evaluation of the Aroon Up Indicator</h3><p>The Aroon Up indicator is given by:<br></br><br></br>
            100(n - (number of days since last highest high over n days))/n<br></br><br></br>
            where n is the number of days being considered (a reasonable
            default value for n is 14).</p></remarks><param name="s">A series of the trading highs over the last n-periods where the k-th 
            terms of the array if the trading high on the k-th previous period.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.AroonUpOverPeriod(System.String,dotnetCHARTING.Series,System.Int32)">This indicator is a generalization of AroonUp indicator 
            and calculates the values of the Aroon Up indicator over all sub-periods of a given length
            for all possible periods for which sufficient historical data is provided.
            </seealso></member><member name="M:dotnetCHARTING.FinancialEngine.AroonUp(System.String,dotnetCHARTING.SeriesCollection)"><summary>
            Evaluates the Aroon Up indicator which measures the relative time since the last highest high.
            </summary><remarks>
            The indicator will return a value between 0 and 100, where a higher
            value indicates that the highest high was achieved more recently. Persistent
            values between 70 and 100 are said to indicate strength in the asset and in
            conjunction with a low range (i.e. 0-30) in the Aroon Down indicator,
            indicates an upward trend.
            
            <h3>Evaluation of the Aroon Up Indicator</h3><p>The Aroon Up indicator is given by:<br></br><br></br>
            100(n - (number of days since last highest high over n days))/n<br></br><br></br>
            where n is the number of days being considered (a reasonable
            default value for n is 14).</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.AroonUpOverPeriod(System.String,dotnetCHARTING.Series,System.Int32)">This indicator is a generalization of AroonUp indicator 
            and calculates the values of the Aroon Up indicator over all sub-periods of a given length
            for all possible periods for which sufficient historical data is provided.
            </seealso></member><member name="M:dotnetCHARTING.FinancialEngine.AroonUp(dotnetCHARTING.SeriesCollection)"><summary>
            Evaluates the Aroon Up indicator which measures the relative time since the last highest high.
            </summary><remarks>
            The indicator will return a value between 0 and 100, where a higher
            value indicates that the highest high was achieved more recently. Persistent
            values between 70 and 100 are said to indicate strength in the asset and in
            conjunction with a low range (i.e. 0-30) in the Aroon Down indicator,
            indicates an upward trend.
            
            <h3>Evaluation of the Aroon Up Indicator</h3><p>The Aroon Up indicator is given by:<br></br><br></br>
            100(n - (number of days since last highest high over n days))/n<br></br><br></br>
            where n is the number of days being considered (a reasonable
            default value for n is 14).</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.AroonUpOverPeriod(System.String,dotnetCHARTING.Series,System.Int32)">This indicator is a generalization of AroonUp indicator 
            and calculates the values of the Aroon Up indicator over all sub-periods of a given length
            for all possible periods for which sufficient historical data is provided.
            </seealso></member><member name="M:dotnetCHARTING.FinancialEngine.AroonUpOverPeriod(System.String,dotnetCHARTING.Series,System.Int32)"><summary> Evaluates the Aroon Up indicator which measures the relative time since the last highest high 
            for all periods for which sufficient data is provided.
            </summary><remarks> This indicator for each period will return a value between 0 and 100, where a higher
            value indicates that the highest high was achieved more recently. Persistent values between 70 
            and 100 are said to indicate strength in the asset and in conjunction with a low range(i.e. 0-30) 
            of the Aroon Down indicator, indicates an upward trend.
            
            <h3>Evaluation of the Aroon Up Indicator</h3><p>The Aroon Up indicator for each period is given by:<br></br><br></br>
            100(n - (number of days since last highest high over n days))/n<br></br><br></br>
            where n is the number of days being considered (a reasonable default value for n is 14).</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">An financial series of the trading highs over the last n-periods where the k-th term of
            the array if the trading high on the k-th previous period.</param><param name="lengthOfPeriod">An integer which represents the length of the period over which the indicator
            will be iteratively evaluated.</param><returns>Returnsa series where the first term is the values of the Aroon Up indicator
            over the earliest set of consecutive periods and the second term is the value of the next set 
            of the periods (i.e. the windows is moving one place along), and so on.
            </returns><seealso cref="M:dotnetCHARTING.FinancialEngine.AroonUp(System.String,dotnetCHARTING.Series)">This indicator is a special case of AroonUpOverPeriod indicator and calculates 
            the Aroon Up indicator for a single period.
            </seealso></member><member name="M:dotnetCHARTING.FinancialEngine.AroonUpOverPeriod(dotnetCHARTING.Series,System.Int32)"><summary> Evaluates the Aroon Up indicator which measures the relative time since the last highest high 
            for all periods for which sufficient data is provided.
            </summary><remarks> This indicator for each period will return a value between 0 and 100, where a higher
            value indicates that the highest high was achieved more recently. Persistent values between 70 
            and 100 are said to indicate strength in the asset and in conjunction with a low range(i.e. 0-30) 
            of the Aroon Down indicator, indicates an upward trend.
            
            <h3>Evaluation of the Aroon Up Indicator</h3><p>The Aroon Up indicator for each period is given by:<br></br><br></br>
            100(n - (number of days since last highest high over n days))/n<br></br><br></br>
            where n is the number of days being considered (a reasonable default value for n is 14).</p></remarks><param name="s">An financial series of the trading highs over the last n-periods where the k-th term of
            the array if the trading high on the k-th previous period.</param><param name="lengthOfPeriod">An integer which represents the length of the period over which the indicator
            will be iteratively evaluated.</param><returns>Returnsa series where the first term is the values of the Aroon Up indicator
            over the earliest set of consecutive periods and the second term is the value of the next set 
            of the periods (i.e. the windows is moving one place along), and so on.
            </returns><seealso cref="M:dotnetCHARTING.FinancialEngine.AroonUp(System.String,dotnetCHARTING.Series)">This indicator is a special case of AroonUpOverPeriod indicator and calculates 
            the Aroon Up indicator for a single period.
            </seealso></member><member name="M:dotnetCHARTING.FinancialEngine.AroonUpOverPeriod(dotnetCHARTING.SeriesCollection,System.Int32)"><summary> Evaluates the Aroon Up indicator which measures the relative time since the last highest high 
            for all periods for which sufficient data is provided.
            </summary><remarks> This indicator for each period will return a value between 0 and 100, where a higher
            value indicates that the highest high was achieved more recently. Persistent values between 70 
            and 100 are said to indicate strength in the asset and in conjunction with a low range(i.e. 0-30) 
            of the Aroon Down indicator, indicates an upward trend.
            
            <h3>Evaluation of the Aroon Up Indicator</h3><p>The Aroon Up indicator for each period is given by:<br></br><br></br>
            100(n - (number of days since last highest high over n days))/n<br></br><br></br>
            where n is the number of days being considered (a reasonable default value for n is 14).</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="lengthOfPeriod">An integer which represents the length of the period over which the indicator
            will be iteratively evaluated.</param><returns>Returnsa series where the first term is the values of the Aroon Up indicator
            over the earliest set of consecutive periods and the second term is the value of the next set 
            of the periods (i.e. the windows is moving one place along), and so on.
            </returns><seealso cref="M:dotnetCHARTING.FinancialEngine.AroonUp(System.String,dotnetCHARTING.Series)">This indicator is a special case of AroonUpOverPeriod indicator and calculates 
            the Aroon Up indicator for a single period.
            </seealso></member><member name="M:dotnetCHARTING.FinancialEngine.AroonDown(System.String,dotnetCHARTING.Series)"><summary> Calculates the Aroon Down indicator which measures the relative time since the last 
            lowest low for all periods for which sufficient data is provided.  
            </summary><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A financial series.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.AroonDownOverPeriod(System.String,dotnetCHARTING.Series,System.Int32)">This indicator is a generalization of AroonDown indicator 
            and calculates the values of the Aroon Down indicator over all sub-periods of a given length
            for all possible periods for which sufficient historical data is provided.
            </seealso></member><member name="M:dotnetCHARTING.FinancialEngine.AroonDown(dotnetCHARTING.Series)"><summary> Calculates the Aroon Down indicator which measures the relative time since the last 
            lowest low for all periods for which sufficient data is provided.  
            </summary><param name="s">A financial series.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.AroonDownOverPeriod(System.String,dotnetCHARTING.Series,System.Int32)">This indicator is a generalization of AroonDown indicator 
            and calculates the values of the Aroon Down indicator over all sub-periods of a given length
            for all possible periods for which sufficient historical data is provided.
            </seealso></member><member name="M:dotnetCHARTING.FinancialEngine.AroonDown(System.String,dotnetCHARTING.SeriesCollection)"><summary> Calculates the Aroon Down indicator which measures the relative time since the last 
            lowest low for all periods for which sufficient data is provided.  
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.AroonDownOverPeriod(System.String,dotnetCHARTING.Series,System.Int32)">This indicator is a generalization of AroonDown indicator 
            and calculates the values of the Aroon Down indicator over all sub-periods of a given length
            for all possible periods for which sufficient historical data is provided.
            </seealso></member><member name="M:dotnetCHARTING.FinancialEngine.AroonDown(dotnetCHARTING.SeriesCollection)"><summary> Calculates the Aroon Down indicator which measures the relative time since the last 
            lowest low for all periods for which sufficient data is provided.  
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.AroonDownOverPeriod(System.String,dotnetCHARTING.Series,System.Int32)">This indicator is a generalization of AroonDown indicator 
            and calculates the values of the Aroon Down indicator over all sub-periods of a given length
            for all possible periods for which sufficient historical data is provided.
            </seealso></member><member name="M:dotnetCHARTING.FinancialEngine.AroonDownOverPeriod(System.String,dotnetCHARTING.Series,System.Int32)"><summary> Calculates the Aroon Down indicator which measures the relative time since the last 
            lowest low for all periods for which sufficient data is provided.  
            </summary><remarks> The indicator for each period will return a value between 0 and 100, where a higher 
            value indicates that the lowest low was achieved more recently. Persistent values between 70 
            and 100 are said to indicate weakness in the asset and in conjunction with a low range (i.e. 0-30) 
            in the Aroon Up  indicator, indicates an downward trend.
            
            <h3>Evaluation of the Aroon Down Indicator</h3><p>The Aroon Down indicator for each period is given by:<br></br><br></br>
            100(n - (number of days since last highest high over n days))/n<br></br><br></br>
            where n is the number of days being considered (a reasonable default value for n is 14).</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A financial series where the first term is the traded high of the asset within the most 
            recent trading period, the second term is the traded high of the asset within the previous
            period and so on.</param><param name="lengthOfPeriod">An integer which represents the length of the period over which
            the indicator will be iteratively evaluated.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.AroonDown(System.String,dotnetCHARTING.Series)">This indicator is a special case of FinancialAroonDownOverPeriod 
            indicator and calculates the Aroon Down indicator for a single period.
            </seealso></member><member name="M:dotnetCHARTING.FinancialEngine.AroonDownOverPeriod(dotnetCHARTING.Series,System.Int32)"><summary> Calculates the Aroon Down indicator which measures the relative time since the last 
            lowest low for all periods for which sufficient data is provided.  
            </summary><remarks> The indicator for each period will return a value between 0 and 100, where a higher 
            value indicates that the lowest low was achieved more recently. Persistent values between 70 
            and 100 are said to indicate weakness in the asset and in conjunction with a low range (i.e. 0-30) 
            in the Aroon Up  indicator, indicates an downward trend.
            
            <h3>Evaluation of the Aroon Down Indicator</h3><p>The Aroon Down indicator for each period is given by:<br></br><br></br>
            100(n - (number of days since last highest high over n days))/n<br></br><br></br>
            where n is the number of days being considered (a reasonable default value for n is 14).</p></remarks><param name="s">A financial series where the first term is the traded high of the asset within the most 
            recent trading period, the second term is the traded high of the asset within the previous
            period and so on.</param><param name="lengthOfPeriod">An integer which represents the length of the period over which
            the indicator will be iteratively evaluated.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.AroonDown(System.String,dotnetCHARTING.Series)">This indicator is a special case of FinancialAroonDownOverPeriod 
            indicator and calculates the Aroon Down indicator for a single period.
            </seealso></member><member name="M:dotnetCHARTING.FinancialEngine.AroonDownOverPeriod(dotnetCHARTING.SeriesCollection,System.Int32)"><summary> Calculates the Aroon Down indicator which measures the relative time since the last 
            lowest low for all periods for which sufficient data is provided.  
            </summary><remarks> The indicator for each period will return a value between 0 and 100, where a higher 
            value indicates that the lowest low was achieved more recently. Persistent values between 70 
            and 100 are said to indicate weakness in the asset and in conjunction with a low range (i.e. 0-30) 
            in the Aroon Up  indicator, indicates an downward trend.
            
            <h3>Evaluation of the Aroon Down Indicator</h3><p>The Aroon Down indicator for each period is given by:<br></br><br></br>
            100(n - (number of days since last highest high over n days))/n<br></br><br></br>
            where n is the number of days being considered (a reasonable default value for n is 14).</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="lengthOfPeriod">An integer which represents the length of the period over which
            the indicator will be iteratively evaluated.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.AroonDown(System.String,dotnetCHARTING.Series)">This indicator is a special case of FinancialAroonDownOverPeriod 
            indicator and calculates the Aroon Down indicator for a single period.
            </seealso></member><member name="M:dotnetCHARTING.FinancialEngine.AroonOscillator(System.String,dotnetCHARTING.Series)"><summary>
            Evaluates the Aroon Oscillator over the a given period.
            </summary><remarks><h3>Evaluation of the Aroon Oscillator</h3><p>The Aroon Oscillator over each period is evaluated using the following formulae:<br></br><br></br>
            Aroon Oscillator = (Aroon Up Indicator) - (Aroon Down Indicator).<br></br><br></br></p></remarks><param name="elementName">The name of the element which will be displayed on the chart, i.e. its label.</param><param name="s">A series where the first term is the traded low of the asset within the most recent 
            trading period, the second term is the traded low of the asset within the previous period and so on.
            </param><seealso cref="M:dotnetCHARTING.FinancialEngine.AroonOscillatorOverPeriod(System.String,dotnetCHARTING.Series,System.Int32)"> calculates the values of the 
            Aroon Oscillator indicator over all sub-periods of a given length.
            </seealso></member><member name="M:dotnetCHARTING.FinancialEngine.AroonOscillator(dotnetCHARTING.Series)"><summary>
            Evaluates the Aroon Oscillator over the a given period.
            </summary><remarks><h3>Evaluation of the Aroon Oscillator</h3><p>The Aroon Oscillator over each period is evaluated using the following formulae:<br></br><br></br>
            Aroon Oscillator = (Aroon Up Indicator) - (Aroon Down Indicator).<br></br><br></br></p></remarks><param name="s">A series where the first term is the traded low of the asset within the most recent 
            trading period, the second term is the traded low of the asset within the previous period and so on.
            </param><seealso cref="M:dotnetCHARTING.FinancialEngine.AroonOscillatorOverPeriod(System.String,dotnetCHARTING.Series,System.Int32)"> calculates the values of the 
            Aroon Oscillator indicator over all sub-periods of a given length.
            </seealso></member><member name="M:dotnetCHARTING.FinancialEngine.AroonOscillator(System.String,dotnetCHARTING.SeriesCollection)"><summary>
            Evaluates the Aroon Oscillator over the a given period.
            </summary><remarks><h3>Evaluation of the Aroon Oscillator</h3><p>The Aroon Oscillator over each period is evaluated using the following formulae:<br></br><br></br>
            Aroon Oscillator = (Aroon Up Indicator) - (Aroon Down Indicator).<br></br><br></br></p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.AroonOscillatorOverPeriod(System.String,dotnetCHARTING.Series,System.Int32)"> calculates the values of the 
            Aroon Oscillator indicator over all sub-periods of a given length.
            </seealso></member><member name="M:dotnetCHARTING.FinancialEngine.AroonOscillator(dotnetCHARTING.SeriesCollection)"><summary>
            Evaluates the Aroon Oscillator over the a given period.
            </summary><remarks><h3>Evaluation of the Aroon Oscillator</h3><p>The Aroon Oscillator over each period is evaluated using the following formulae:<br></br><br></br>
            Aroon Oscillator = (Aroon Up Indicator) - (Aroon Down Indicator).<br></br><br></br></p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><seealso cref="M:dotnetCHARTING.FinancialEngine.AroonOscillatorOverPeriod(System.String,dotnetCHARTING.Series,System.Int32)"> calculates the values of the 
            Aroon Oscillator indicator over all sub-periods of a given length.
            </seealso></member><member name="M:dotnetCHARTING.FinancialEngine.AroonOscillatorOverPeriod(System.String,dotnetCHARTING.Series,System.Int32)"><summary>
            Evaluates the Aroon Oscillator over all periods where sufficient historical data is provided.
            </summary><remarks><h3>Evaluation of the Aroon Oscillator</h3><p>The Aroon Oscillator over each period is evaluated using the following formulae:<br></br><br></br>
            Aroon Oscillator = (Aroon Up Indicator) - (Aroon Down Indicator)<br></br><br></br>
            where 'Aroon Up Indicator' and `Aroon Down Indicator' are evaluated using.</p><p>The Aroon Up indicator is given by:<br></br><br></br>
            100(n - (number of days since last highest high over n days))/n<br></br><br></br>
            where n is the number of days being considered (a reasonable default value for n is 14).</p><p>The Aroon Down indicator is given by:<br></br><br></br>
            100(n - (number of days since last highest high over n days))/n<br></br><br></br>
            where n is the number of days being considered (a reasonable default value for n is 14).</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A series where the first term is the traded high of the asset within the most
            recent trading period, the second term is the traded high of the asset within the previous period 
            and so on.</param><param name="lengthOfPeriod">An integer which represents the length of the period over which the 
            indicator will be iteratively evaluated.</param><returns> A series where the first term is the value of the Aroon Oscillator for the most recent
            period, the second term is the value of the Aroon Oscillator for the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.AroonOscillatorOverPeriod(dotnetCHARTING.Series,System.Int32)"><summary>
            Evaluates the Aroon Oscillator over all periods where sufficient historical data is provided.
            </summary><remarks><h3>Evaluation of the Aroon Oscillator</h3><p>The Aroon Oscillator over each period is evaluated using the following formulae:<br></br><br></br>
            Aroon Oscillator = (Aroon Up Indicator) - (Aroon Down Indicator)<br></br><br></br>
            where 'Aroon Up Indicator' and `Aroon Down Indicator' are evaluated using.</p><p>The Aroon Up indicator is given by:<br></br><br></br>
            100(n - (number of days since last highest high over n days))/n<br></br><br></br>
            where n is the number of days being considered (a reasonable default value for n is 14).</p><p>The Aroon Down indicator is given by:<br></br><br></br>
            100(n - (number of days since last highest high over n days))/n<br></br><br></br>
            where n is the number of days being considered (a reasonable default value for n is 14).</p></remarks><param name="s">A series where the first term is the traded high of the asset within the most
            recent trading period, the second term is the traded high of the asset within the previous period 
            and so on.</param><param name="lengthOfPeriod">An integer which represents the length of the period over which the 
            indicator will be iteratively evaluated.</param><returns> A series where the first term is the value of the Aroon Oscillator for the most recent
            period, the second term is the value of the Aroon Oscillator for the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.AroonOscillatorOverPeriod(dotnetCHARTING.SeriesCollection,System.Int32)"><summary>
            Evaluates the Aroon Oscillator over all periods where sufficient historical data is provided.
            </summary><remarks><h3>Evaluation of the Aroon Oscillator</h3><p>The Aroon Oscillator over each period is evaluated using the following formulae:<br></br><br></br>
            Aroon Oscillator = (Aroon Up Indicator) - (Aroon Down Indicator)<br></br><br></br>
            where 'Aroon Up Indicator' and `Aroon Down Indicator' are evaluated using.</p><p>The Aroon Up indicator is given by:<br></br><br></br>
            100(n - (number of days since last highest high over n days))/n<br></br><br></br>
            where n is the number of days being considered (a reasonable default value for n is 14).</p><p>The Aroon Down indicator is given by:<br></br><br></br>
            100(n - (number of days since last highest high over n days))/n<br></br><br></br>
            where n is the number of days being considered (a reasonable default value for n is 14).</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="lengthOfPeriod">An integer which represents the length of the period over which the 
            indicator will be iteratively evaluated.</param><returns> A series where the first term is the value of the Aroon Oscillator for the most recent
            period, the second term is the value of the Aroon Oscillator for the previous period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.BalanceOfPowerOverPeriod(System.String,dotnetCHARTING.Series)"><summary> Evaluates the Balance of Power (BOP) indicator, created by Igor Livshin; which captures 
            the struggle between the Bulls and Bears over a number of trading days.
            </summary><remarks> An array is returned where the first term corresponds to the BOP of the last trading day, 
            the second term gives the BOP on the previous trading day and so on.
            
            <h3>Interpretation</h3><p>The BOP indicator for each trading day lies within the range <c>[-1,1]</c>.
            When the BOP indicator is towards the high if its range it will signifies that the
            Bulls are in control, conversely when the indicator is towards the lows of its range
            it signifies that the bear are in control. If the indicator move from a high positive
            range to a lower positive range it signifies that the buying pressure is decreasing.
            Conversely, if the indicator move from a low negative range to a higher negative range
            it signifies that the selling pressure is decreasing.</p><h3>Evaluation</h3><p>The BOP indicator for each trading days is evaluated by the following formulae:<br></br><br></br><c>BOP = (Close - Open)/(High - Low)</c><br></br><br></br>
            where <c>close</c> is the days closing price, <c>open</c> is the days opening
            price, <c>high</c> is the highest traded price during the day and <c>low</c>
            is the lowest traded price during the day.</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A series where the first element is the high in the last trading period, the second
            term is the high in the previous period and so on.</param><exception cref="T:System.ArgumentException">Thrown if any elements from the  highs, lows, closes or 
            opens are strictly negative.</exception><returns>A series is returned where the first term corresponds to the BOP of the last trading day, 
            the second term gives the BOP on the previous trading day and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.BalanceOfPowerOverPeriod(dotnetCHARTING.Series)"><summary> Evaluates the Balance of Power (BOP) indicator, created by Igor Livshin; which captures 
            the struggle between the Bulls and Bears over a number of trading days.
            </summary><remarks> An array is returned where the first term corresponds to the BOP of the last trading day, 
            the second term gives the BOP on the previous trading day and so on.
            
            <h3>Interpretation</h3><p>The BOP indicator for each trading day lies within the range <c>[-1,1]</c>.
            When the BOP indicator is towards the high if its range it will signifies that the
            Bulls are in control, conversely when the indicator is towards the lows of its range
            it signifies that the bear are in control. If the indicator move from a high positive
            range to a lower positive range it signifies that the buying pressure is decreasing.
            Conversely, if the indicator move from a low negative range to a higher negative range
            it signifies that the selling pressure is decreasing.</p><h3>Evaluation</h3><p>The BOP indicator for each trading days is evaluated by the following formulae:<br></br><br></br><c>BOP = (Close - Open)/(High - Low)</c><br></br><br></br>
            where <c>close</c> is the days closing price, <c>open</c> is the days opening
            price, <c>high</c> is the highest traded price during the day and <c>low</c>
            is the lowest traded price during the day.</p></remarks><param name="s">A series where the first element is the high in the last trading period, the second
            term is the high in the previous period and so on.</param><exception cref="T:System.ArgumentException">Thrown if any elements from the  highs, lows, closes or 
            opens are strictly negative.</exception><returns>A series is returned where the first term corresponds to the BOP of the last trading day, 
            the second term gives the BOP on the previous trading day and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.BalanceOfPowerOverPeriod(dotnetCHARTING.SeriesCollection)"><summary> Evaluates the Balance of Power (BOP) indicator, created by Igor Livshin; which captures 
            the struggle between the Bulls and Bears over a number of trading days.
            </summary><remarks> An array is returned where the first term corresponds to the BOP of the last trading day, 
            the second term gives the BOP on the previous trading day and so on.
            
            <h3>Interpretation</h3><p>The BOP indicator for each trading day lies within the range <c>[-1,1]</c>.
            When the BOP indicator is towards the high if its range it will signifies that the
            Bulls are in control, conversely when the indicator is towards the lows of its range
            it signifies that the bear are in control. If the indicator move from a high positive
            range to a lower positive range it signifies that the buying pressure is decreasing.
            Conversely, if the indicator move from a low negative range to a higher negative range
            it signifies that the selling pressure is decreasing.</p><h3>Evaluation</h3><p>The BOP indicator for each trading days is evaluated by the following formulae:<br></br><br></br><c>BOP = (Close - Open)/(High - Low)</c><br></br><br></br>
            where <c>close</c> is the days closing price, <c>open</c> is the days opening
            price, <c>high</c> is the highest traded price during the day and <c>low</c>
            is the lowest traded price during the day.</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><exception cref="T:System.ArgumentException">Thrown if any elements from the  highs, lows, closes or 
            opens are strictly negative.</exception><returns>A series is returned where the first term corresponds to the BOP of the last trading day, 
            the second term gives the BOP on the previous trading day and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.CommodityChannelIdxOverPeriod(System.String,dotnetCHARTING.Series,System.Int32)"><summary> This indicator is a generalization of the <c>CommodityChannelIndex</c> indicator and 
            calculates the values of the commodityChannelIndex indicator over all sub-periods of a
            given length.  
            </summary><remarks>
            The CCI measures the variation of a security's price from its statistical
            mean. High values show that prices are unusually high compared to
            average prices whereas low values indicate that prices are unusually
            low. The CCI can be used effectively on any type of security, but
            clearly it is most applicable where the security has should a strong
            degree on mean reversion.
            
            <p>Lambert originally commended that the CCI was designed to capture
            the trade cycle (i.e. low-to-low or high-to-high) turns in commodity
            markets. The system assumes that commodities move in cycles
            and uses 1/3 of the cycle period for the evaluation of the CCI. We allow
            the uses to specify the length of the calculation period used but we advise
            that you take the calculation cycle to be approximately one third of
            your estimate for the length of the trade cycle.</p><p><b>Calculation Period:</b> the number of days used in the evaluation of the CCI.
            In Donald Lambert's original system this was taken to be one third of the estimate
            length of the trade cycle.</p><p><b>Remark:</b> Within the evaluation procedure (step 2), we multiply the
            result by the constant 0.015. The constant was originally used in Lambert's
            system and has been found to ensure that around 70-80 percent of all the
            values given by the CCI lie the range [-100,+100]. Hence, the constant
            is just used to calibrate the indicator with respect to the range
            [-100, +100].</p><p><b>Interpretation</b><br></br>
            Significant signals are generated when either the CCI starts to diverge
            from the price action which will signify a correlation in the price,
            or when the CCI extended (typically above 100 or below -100) which
            indicates oversold or over brought conditions.</p><p>Further details concerning the CCI can be found in an article by
            Donald Lambert that appeared in the October 1980 issue of Commodities
            (now known as Futures) Magazine.</p><p><b>Evaluation Procedure</b><br></br>
            We summaries our basic evaluation procedure by the following three steps:
            <nl><li> First evaluate the simple moving average (SMA) of the Typical Price Indicator
            (see Filters) over the calculation period.</li><li> Evaluate the SMA over the calculation period of the absolute value on each
            on the calculation period days between the Typical Price on that day and the
            SMA found in step 1 above, and multiply the result by 0.015.</li><li> Divide todays typical price minus the SMA of the typical price found in
            step 1, by the result given by step 2.</li></nl></p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A series where the first element is the high in the last trading period, the 
            second term is the high in the previous period and so on.</param><param name="lengthOfPeriod">An integer which represents the length of the period over 
            which the indicator will be iteratively evaluated.</param><exception cref="T:System.ArgumentException">Thrown if any elements from the  highs, 
            lows or closes are strictly negative, or if the length of the arrays is not equal or the 
            lengthOfPeriod is grater than the length of the array high.</exception></member><member name="M:dotnetCHARTING.FinancialEngine.CommodityChannelIdxOverPeriod(dotnetCHARTING.Series,System.Int32)"><summary> This indicator is a generalization of the <c>CommodityChannelIndex</c> indicator and 
            calculates the values of the commodityChannelIndex indicator over all sub-periods of a
            given length.  
            </summary><remarks>
            The CCI measures the variation of a security's price from its statistical
            mean. High values show that prices are unusually high compared to
            average prices whereas low values indicate that prices are unusually
            low. The CCI can be used effectively on any type of security, but
            clearly it is most applicable where the security has should a strong
            degree on mean reversion.
            
            <p>Lambert originally commended that the CCI was designed to capture
            the trade cycle (i.e. low-to-low or high-to-high) turns in commodity
            markets. The system assumes that commodities move in cycles
            and uses 1/3 of the cycle period for the evaluation of the CCI. We allow
            the uses to specify the length of the calculation period used but we advise
            that you take the calculation cycle to be approximately one third of
            your estimate for the length of the trade cycle.</p><p><b>Calculation Period:</b> the number of days used in the evaluation of the CCI.
            In Donald Lambert's original system this was taken to be one third of the estimate
            length of the trade cycle.</p><p><b>Remark:</b> Within the evaluation procedure (step 2), we multiply the
            result by the constant 0.015. The constant was originally used in Lambert's
            system and has been found to ensure that around 70-80 percent of all the
            values given by the CCI lie the range [-100,+100]. Hence, the constant
            is just used to calibrate the indicator with respect to the range
            [-100, +100].</p><p><b>Interpretation</b><br></br>
            Significant signals are generated when either the CCI starts to diverge
            from the price action which will signify a correlation in the price,
            or when the CCI extended (typically above 100 or below -100) which
            indicates oversold or over brought conditions.</p><p>Further details concerning the CCI can be found in an article by
            Donald Lambert that appeared in the October 1980 issue of Commodities
            (now known as Futures) Magazine.</p><p><b>Evaluation Procedure</b><br></br>
            We summaries our basic evaluation procedure by the following three steps:
            <nl><li> First evaluate the simple moving average (SMA) of the Typical Price Indicator
            (see Filters) over the calculation period.</li><li> Evaluate the SMA over the calculation period of the absolute value on each
            on the calculation period days between the Typical Price on that day and the
            SMA found in step 1 above, and multiply the result by 0.015.</li><li> Divide todays typical price minus the SMA of the typical price found in
            step 1, by the result given by step 2.</li></nl></p></remarks><param name="s">A series where the first element is the high in the last trading period, the 
            second term is the high in the previous period and so on.</param><param name="lengthOfPeriod">An integer which represents the length of the period over 
            which the indicator will be iteratively evaluated.</param><exception cref="T:System.ArgumentException">Thrown if any elements from the  highs, 
            lows or closes are strictly negative, or if the length of the arrays is not equal or the 
            lengthOfPeriod is grater than the length of the array high.</exception></member><member name="M:dotnetCHARTING.FinancialEngine.CommodityChannelIdxOverPeriod(dotnetCHARTING.SeriesCollection,System.Int32)"><summary> This indicator is a generalization of the <c>CommodityChannelIndex</c> indicator and 
            calculates the values of the commodityChannelIndex indicator over all sub-periods of a
            given length.  
            </summary><remarks>
            The CCI measures the variation of a security's price from its statistical
            mean. High values show that prices are unusually high compared to
            average prices whereas low values indicate that prices are unusually
            low. The CCI can be used effectively on any type of security, but
            clearly it is most applicable where the security has should a strong
            degree on mean reversion.
            
            <p>Lambert originally commended that the CCI was designed to capture
            the trade cycle (i.e. low-to-low or high-to-high) turns in commodity
            markets. The system assumes that commodities move in cycles
            and uses 1/3 of the cycle period for the evaluation of the CCI. We allow
            the uses to specify the length of the calculation period used but we advise
            that you take the calculation cycle to be approximately one third of
            your estimate for the length of the trade cycle.</p><p><b>Calculation Period:</b> the number of days used in the evaluation of the CCI.
            In Donald Lambert's original system this was taken to be one third of the estimate
            length of the trade cycle.</p><p><b>Remark:</b> Within the evaluation procedure (step 2), we multiply the
            result by the constant 0.015. The constant was originally used in Lambert's
            system and has been found to ensure that around 70-80 percent of all the
            values given by the CCI lie the range [-100,+100]. Hence, the constant
            is just used to calibrate the indicator with respect to the range
            [-100, +100].</p><p><b>Interpretation</b><br></br>
            Significant signals are generated when either the CCI starts to diverge
            from the price action which will signify a correlation in the price,
            or when the CCI extended (typically above 100 or below -100) which
            indicates oversold or over brought conditions.</p><p>Further details concerning the CCI can be found in an article by
            Donald Lambert that appeared in the October 1980 issue of Commodities
            (now known as Futures) Magazine.</p><p><b>Evaluation Procedure</b><br></br>
            We summaries our basic evaluation procedure by the following three steps:
            <nl><li> First evaluate the simple moving average (SMA) of the Typical Price Indicator
            (see Filters) over the calculation period.</li><li> Evaluate the SMA over the calculation period of the absolute value on each
            on the calculation period days between the Typical Price on that day and the
            SMA found in step 1 above, and multiply the result by 0.015.</li><li> Divide todays typical price minus the SMA of the typical price found in
            step 1, by the result given by step 2.</li></nl></p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="lengthOfPeriod">An integer which represents the length of the period over 
            which the indicator will be iteratively evaluated.</param><exception cref="T:System.ArgumentException">Thrown if any elements from the  highs, 
            lows or closes are strictly negative, or if the length of the arrays is not equal or the 
            lengthOfPeriod is grater than the length of the array high.</exception></member><member name="M:dotnetCHARTING.FinancialEngine.MoneyFlowIdxOverPeriod(System.String,dotnetCHARTING.Series,System.Int32)"><summary> Evaluates the Money Flow Index (MFI) which measures the strength of money flowing 
            in and out of a security over all periods for which sufficient data is provided.  
            </summary><remarks> The MFI is related to the Directional Movement Indicator of Wellas Wilder, but the 
            MFI system also takes into account the volume as well as the price action.
            
            <h3>Interpretation</h3><p>Divergence of the indicator within a continuing trend indicates that a
            reversal is imminent. The MFI also is a good means to signal market tops
            and bottoms. A reasonable rule is a market top is given more significance
            when the MFI is above <c>80</c> and a market bottom is given more
            significance when the MFI is below <c>20</c>.</p><h3>Evaluation</h3><p>The Money Flow Index (MFI) is evaluated over a given user defined
            number of trading periods. The evaluation of the MFI follows the
            below steps:
            <nl><li> Evaluates the Money Flow on each day. The Money Flow is the
            product of the Typical Value Indicator (see Filters) for that day
            and the volume.</li><li> Each day is either classified as either a Positive Money Flow day,
            Negative Money Flow day or no Flow day. If the typical price increases
            then the day is a said to be a Positive Money Day, if it decreasing then
            it is said to be a negative money day and if it stays then same then
            it is said the be a no flow day.</li><li> The Positive Money and Negative Money Flow's are calculated by
            summing the Money Flow over the Positive Money Flow Days or the Negative
            Money Flow days respectively.</li><li> The Money Flow Index (MFI) is evaluated by dividing the Positive
            Money Flow by the Negative Money Flow.</li></nl></p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">An series where the first element is the high in the last trading period, the second term is 
            the high in the previous period and so on.</param><param name="lengthOfPeriod">An integer which represents the length of the period over which the indicator 
            will be iteratively evaluated.</param><exception cref="T:System.ArgumentException">Thrown if any elements from the arrays high, low, close or volume 
            are strictly negative, or if the length of the arrays is not equal or the lengthOfPeriod is grater than the 
            length of the array high.</exception></member><member name="M:dotnetCHARTING.FinancialEngine.MoneyFlowIdxOverPeriod(dotnetCHARTING.Series,System.Int32)"><summary> Evaluates the Money Flow Index (MFI) which measures the strength of money flowing 
            in and out of a security over all periods for which sufficient data is provided.  
            </summary><remarks> The MFI is related to the Directional Movement Indicator of Wellas Wilder, but the 
            MFI system also takes into account the volume as well as the price action.
            
            <h3>Interpretation</h3><p>Divergence of the indicator within a continuing trend indicates that a
            reversal is imminent. The MFI also is a good means to signal market tops
            and bottoms. A reasonable rule is a market top is given more significance
            when the MFI is above <c>80</c> and a market bottom is given more
            significance when the MFI is below <c>20</c>.</p><h3>Evaluation</h3><p>The Money Flow Index (MFI) is evaluated over a given user defined
            number of trading periods. The evaluation of the MFI follows the
            below steps:
            <nl><li> Evaluates the Money Flow on each day. The Money Flow is the
            product of the Typical Value Indicator (see Filters) for that day
            and the volume.</li><li> Each day is either classified as either a Positive Money Flow day,
            Negative Money Flow day or no Flow day. If the typical price increases
            then the day is a said to be a Positive Money Day, if it decreasing then
            it is said to be a negative money day and if it stays then same then
            it is said the be a no flow day.</li><li> The Positive Money and Negative Money Flow's are calculated by
            summing the Money Flow over the Positive Money Flow Days or the Negative
            Money Flow days respectively.</li><li> The Money Flow Index (MFI) is evaluated by dividing the Positive
            Money Flow by the Negative Money Flow.</li></nl></p></remarks><param name="s">An series where the first element is the high in the last trading period, the second term is 
            the high in the previous period and so on.</param><param name="lengthOfPeriod">An integer which represents the length of the period over which the indicator 
            will be iteratively evaluated.</param><exception cref="T:System.ArgumentException">Thrown if any elements from the arrays high, low, close or volume 
            are strictly negative, or if the length of the arrays is not equal or the lengthOfPeriod is grater than the 
            length of the array high.</exception></member><member name="M:dotnetCHARTING.FinancialEngine.MoneyFlowIdxOverPeriod(dotnetCHARTING.SeriesCollection,System.Int32)"><summary> Evaluates the Money Flow Index (MFI) which measures the strength of money flowing 
            in and out of a security over all periods for which sufficient data is provided.  
            </summary><remarks> The MFI is related to the Directional Movement Indicator of Wellas Wilder, but the 
            MFI system also takes into account the volume as well as the price action.
            
            <h3>Interpretation</h3><p>Divergence of the indicator within a continuing trend indicates that a
            reversal is imminent. The MFI also is a good means to signal market tops
            and bottoms. A reasonable rule is a market top is given more significance
            when the MFI is above <c>80</c> and a market bottom is given more
            significance when the MFI is below <c>20</c>.</p><h3>Evaluation</h3><p>The Money Flow Index (MFI) is evaluated over a given user defined
            number of trading periods. The evaluation of the MFI follows the
            below steps:
            <nl><li> Evaluates the Money Flow on each day. The Money Flow is the
            product of the Typical Value Indicator (see Filters) for that day
            and the volume.</li><li> Each day is either classified as either a Positive Money Flow day,
            Negative Money Flow day or no Flow day. If the typical price increases
            then the day is a said to be a Positive Money Day, if it decreasing then
            it is said to be a negative money day and if it stays then same then
            it is said the be a no flow day.</li><li> The Positive Money and Negative Money Flow's are calculated by
            summing the Money Flow over the Positive Money Flow Days or the Negative
            Money Flow days respectively.</li><li> The Money Flow Index (MFI) is evaluated by dividing the Positive
            Money Flow by the Negative Money Flow.</li></nl></p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="lengthOfPeriod">An integer which represents the length of the period over which the indicator 
            will be iteratively evaluated.</param><exception cref="T:System.ArgumentException">Thrown if any elements from the arrays high, low, close or volume 
            are strictly negative, or if the length of the arrays is not equal or the lengthOfPeriod is grater than the 
            length of the array high.</exception></member><member name="M:dotnetCHARTING.FinancialEngine.Momentum(System.String,dotnetCHARTING.Series,System.Int32)"><summary> We evaluate the n-day momentum which is simply the difference between today's closing 
            price and the close price n days ago, for all days for which sufficient historical data is
            given.  
            </summary><remarks> The Momentum indicator as the name suggests is the velocity
            with which the price is rising or falling, and hence will reflect how aggressively the
            asset is being purchased or sold.
            
            <p><b>Remark:</b> Extended values and/or turning points of the momentum are good
            indicators of oversold or over brought conditions(respectively).</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">An series of length greate or equal to the number of periods considered in the
            indicator evaluation where the first element is the closing price in the last trading 
            period, the second term is the closing price in the previous trading period and so on.
            </param><param name="noOfDays">The number of days before to which the closing price is compared.
            </param><exception cref="T:System.ArgumentException">Thrown if either parameter is strictly negative.
            </exception><returns>A series where the first term is the momentum for the most recent trading
            period, the second term is the momentum for the previous trading period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.Momentum(dotnetCHARTING.Series,System.Int32)"><summary> We evaluate the n-day momentum which is simply the difference between today's closing 
            price and the close price n days ago, for all days for which sufficient historical data is
            given.  
            </summary><remarks> The Momentum indicator as the name suggests is the velocity
            with which the price is rising or falling, and hence will reflect how aggressively the
            asset is being purchased or sold.
            
            <p><b>Remark:</b> Extended values and/or turning points of the momentum are good
            indicators of oversold or over brought conditions(respectively).</p></remarks><param name="s">An series of length greate or equal to the number of periods considered in the
            indicator evaluation where the first element is the closing price in the last trading 
            period, the second term is the closing price in the previous trading period and so on.
            </param><param name="noOfDays">The number of days before to which the closing price is compared.
            </param><exception cref="T:System.ArgumentException">Thrown if either parameter is strictly negative.
            </exception><returns>A series where the first term is the momentum for the most recent trading
            period, the second term is the momentum for the previous trading period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.Momentum(dotnetCHARTING.SeriesCollection,System.Int32)"><summary> We evaluate the n-day momentum which is simply the difference between today's closing 
            price and the close price n days ago, for all days for which sufficient historical data is
            given.  
            </summary><remarks> The Momentum indicator as the name suggests is the velocity
            with which the price is rising or falling, and hence will reflect how aggressively the
            asset is being purchased or sold.
            
            <p><b>Remark:</b> Extended values and/or turning points of the momentum are good
            indicators of oversold or over brought conditions(respectively).</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="noOfDays">The number of days before to which the closing price is compared.
            </param><exception cref="T:System.ArgumentException">Thrown if either parameter is strictly negative.
            </exception><returns>A series where the first term is the momentum for the most recent trading
            period, the second term is the momentum for the previous trading period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.MomentumPercent(System.String,dotnetCHARTING.Series,System.Int32)"><summary>
            We calculate the momentum pergentage over a given period.
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">An series of length equal or greater to the number of periods considered in the 
            indicator evaluation where the first element is the closing price in the last trading period, the
            second term is the closing price in the previous trading period and so on.</param><param name="noOfDays">The number of days before to which the closing price 
            is compared.</param><exception cref="T:System.ArgumentException">Thrown if the given series has strictly negative 
            elements or if the noOfDays argument is greater then the length of prices
            array.</exception></member><member name="M:dotnetCHARTING.FinancialEngine.MomentumPercent(dotnetCHARTING.Series,System.Int32)"><summary>
            We calculate the momentum pergentage over a given period.
            </summary><param name="s">An series of length equal or greater to the number of periods considered in the 
            indicator evaluation where the first element is the closing price in the last trading period, the
            second term is the closing price in the previous trading period and so on.</param><param name="noOfDays">The number of days before to which the closing price 
            is compared.</param><exception cref="T:System.ArgumentException">Thrown if the given series has strictly negative 
            elements or if the noOfDays argument is greater then the length of prices
            array.</exception></member><member name="M:dotnetCHARTING.FinancialEngine.MomentumPercent(dotnetCHARTING.SeriesCollection,System.Int32)"><summary>
            We calculate the momentum pergentage over a given period.
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="noOfDays">The number of days before to which the closing price 
            is compared.</param><exception cref="T:System.ArgumentException">Thrown if the given series has strictly negative 
            elements or if the noOfDays argument is greater then the length of prices
            array.</exception></member><member name="M:dotnetCHARTING.FinancialEngine.HighestPeriod(System.String,dotnetCHARTING.Series,System.Int32)"><summary>	Returns the highest value of prices over all values given.
            Returns a series which contains the higher highs values of prices array within a given
            period considering a look back period of n days.  
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">An series of length equal or greater to the number of
            periods considered in the indicator evaluation where the first
            element is the closing price in the last trading period, the
            second term is the closing price in the previous trading period and so on.</param><param name="noOfDays">The number of days before to which the closing price 
            is compared.</param><exception cref="T:System.ArgumentException">Thrown if the given series has strictly negative 
            elements or if the noOfDays argument is greater then the length of prices
            array.</exception><returns>a series where the first term is the high calculated for the most recent trading
            period, the second term is the high for the previous trading period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.HighestPeriod(dotnetCHARTING.Series,System.Int32)"><summary>	Returns the highest value of prices over all values given.
            Returns a series which contains the higher highs values of prices array within a given
            period considering a look back period of n days.  
            </summary><param name="s">An series of length equal or greater to the number of
            periods considered in the indicator evaluation where the first
            element is the closing price in the last trading period, the
            second term is the closing price in the previous trading period and so on.</param><param name="noOfDays">The number of days before to which the closing price 
            is compared.</param><exception cref="T:System.ArgumentException">Thrown if the given series has strictly negative 
            elements or if the noOfDays argument is greater then the length of prices
            array.</exception><returns>a series where the first term is the high calculated for the most recent trading
            period, the second term is the high for the previous trading period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.HighestPeriod(dotnetCHARTING.SeriesCollection,System.Int32)"><summary>	Returns the highest value of prices over all values given.
            Returns a series which contains the higher highs values of prices array within a given
            period considering a look back period of n days.  
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="noOfDays">The number of days before to which the closing price 
            is compared.</param><exception cref="T:System.ArgumentException">Thrown if the given series has strictly negative 
            elements or if the noOfDays argument is greater then the length of prices
            array.</exception><returns>a series where the first term is the high calculated for the most recent trading
            period, the second term is the high for the previous trading period and so on.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.LowestPeriod(System.String,dotnetCHARTING.Series,System.Int32)"><summary> Returns an array which contains the lower lows values of prices array within a given
            period considering a look back period of n days. </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">An series where the first element is the closing price in the last 
            trading period, the second term is the closing price in the previous trading period and so on.</param><param name="noOfDays">The number of days before to which the closing price is compared.</param><exception cref="T:System.ArgumentException">Thrown if the series has strictly negative elements 
            or if the noOfDays argument is greater then the length of prices array.</exception><returns>A series where the first term is the low calculated for the most recent trading period,
            the second term is the low for the previous trading period and so on.</returns></member><member name="M:dotnetCHARTING.FinancialEngine.LowestPeriod(dotnetCHARTING.Series,System.Int32)"><summary> Returns an array which contains the lower lows values of prices array within a given
            period considering a look back period of n days. </summary><param name="s">An series where the first element is the closing price in the last 
            trading period, the second term is the closing price in the previous trading period and so on.</param><param name="noOfDays">The number of days before to which the closing price is compared.</param><exception cref="T:System.ArgumentException">Thrown if the series has strictly negative elements 
            or if the noOfDays argument is greater then the length of prices array.</exception><returns>A series where the first term is the low calculated for the most recent trading period,
            the second term is the low for the previous trading period and so on.</returns></member><member name="M:dotnetCHARTING.FinancialEngine.LowestPeriod(dotnetCHARTING.SeriesCollection,System.Int32)"><summary> Returns an array which contains the lower lows values of prices array within a given
            period considering a look back period of n days. </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="noOfDays">The number of days before to which the closing price is compared.</param><exception cref="T:System.ArgumentException">Thrown if the series has strictly negative elements 
            or if the noOfDays argument is greater then the length of prices array.</exception><returns>A series where the first term is the low calculated for the most recent trading period,
            the second term is the low for the previous trading period and so on.</returns></member><member name="M:dotnetCHARTING.FinancialEngine.RateOfChange(System.String,dotnetCHARTING.Series,System.Int32)"><summary>
            Calculate the n-day rate of change (ROC) for all periods for which there is sufficient data.
            </summary><remarks>
            The (n-day) rate of change (ROC) is just the last closing price divided by the closing price
            n-days ago.
            <p>As with the case with the momentum indicator the rate of change (ROC) indicator
            on extended values and/or turning points indicates oversold or over brought conditions
            (respectively).</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">An series where the first element is the closing price in the last trading period, 
            the second term is the closing price in the previous trading period and so on.</param><param name="numberDays">The number of days before to which the closing price is compared.</param><exception cref="T:System.ArgumentException">Thrown if either parameter is strictly negative.</exception><returns>A series where the first term is the rate of change for the most recent
            period, the second term is the rate of change for the previous period and so on.</returns></member><member name="M:dotnetCHARTING.FinancialEngine.RateOfChange(dotnetCHARTING.Series,System.Int32)"><summary>
            Calculate the n-day rate of change (ROC) for all periods for which there is sufficient data.
            </summary><remarks>
            The (n-day) rate of change (ROC) is just the last closing price divided by the closing price
            n-days ago.
            <p>As with the case with the momentum indicator the rate of change (ROC) indicator
            on extended values and/or turning points indicates oversold or over brought conditions
            (respectively).</p></remarks><param name="s">An series where the first element is the closing price in the last trading period, 
            the second term is the closing price in the previous trading period and so on.</param><param name="numberDays">The number of days before to which the closing price is compared.</param><exception cref="T:System.ArgumentException">Thrown if either parameter is strictly negative.</exception><returns>A series where the first term is the rate of change for the most recent
            period, the second term is the rate of change for the previous period and so on.</returns></member><member name="M:dotnetCHARTING.FinancialEngine.RateOfChange(dotnetCHARTING.SeriesCollection,System.Int32)"><summary>
            Calculate the n-day rate of change (ROC) for all periods for which there is sufficient data.
            </summary><remarks>
            The (n-day) rate of change (ROC) is just the last closing price divided by the closing price
            n-days ago.
            <p>As with the case with the momentum indicator the rate of change (ROC) indicator
            on extended values and/or turning points indicates oversold or over brought conditions
            (respectively).</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="numberDays">The number of days before to which the closing price is compared.</param><exception cref="T:System.ArgumentException">Thrown if either parameter is strictly negative.</exception><returns>A series where the first term is the rate of change for the most recent
            period, the second term is the rate of change for the previous period and so on.</returns></member><member name="M:dotnetCHARTING.FinancialEngine.NegativeVolumeIndex(System.String,dotnetCHARTING.Series)"><summary>
            We evaluate the Negative Volume Index(NVI) wich take in the consideration 
            the days where volume decrease from the prevoius day.
            </summary><remarks><h3>Indicator Formula</h3><p>The formula for this indicator is:</p><br></br>
            
            If the volume is less then the yesterday volume then:
            NVI = Yesterday's NVI + (((Close - Yesterday's Close)/Yesterday's Close) *Yesterday's NVI)
            <br></br>
            If today's volume is greater than or equal to yesterday's volume then:
            <br></br>
            NVI = Yesterday's NVI
            <br></br>
            Allways the first element of an financial array will be a value of the most recent period considered.
            </remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">An series where the first element is the closing price in the last trading period, 
            the second term is the closing price in the previous trading period and so on.</param><exception cref="T:System.ArgumentException">Thrown if the series is empti or contain negative values.</exception></member><member name="M:dotnetCHARTING.FinancialEngine.NegativeVolumeIndex(dotnetCHARTING.Series)"><summary>
            We evaluate the Negative Volume Index(NVI) wich take in the consideration 
            the days where volume decrease from the prevoius day.
            </summary><remarks><h3>Indicator Formula</h3><p>The formula for this indicator is:</p><br></br>
            
            If the volume is less then the yesterday volume then:
            NVI = Yesterday's NVI + (((Close - Yesterday's Close)/Yesterday's Close) *Yesterday's NVI)
            <br></br>
            If today's volume is greater than or equal to yesterday's volume then:
            <br></br>
            NVI = Yesterday's NVI
            <br></br>
            Allways the first element of an financial array will be a value of the most recent period considered.
            </remarks><param name="s">An series where the first element is the closing price in the last trading period, 
            the second term is the closing price in the previous trading period and so on.</param><exception cref="T:System.ArgumentException">Thrown if the series is empty or contain negative values.</exception></member><member name="M:dotnetCHARTING.FinancialEngine.NegativeVolumeIndex(dotnetCHARTING.SeriesCollection)"><summary>
            We evaluate the Negative Volume Index(NVI) wich take in the consideration 
            the days where volume decrease from the prevoius day.
            </summary><remarks><h3>Indicator Formula</h3><p>The formula for this indicator is:</p><br></br>
            
            If the volume is less then the yesterday volume then:
            NVI = Yesterday's NVI + (((Close - Yesterday's Close)/Yesterday's Close) *Yesterday's NVI)
            <br></br>
            If today's volume is greater than or equal to yesterday's volume then:
            <br></br>
            NVI = Yesterday's NVI
            <br></br>
            Allways the first element of an financial array will be a value of the most recent period considered.
            </remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><exception cref="T:System.ArgumentException">Thrown if the series contain negative values.
            </exception></member><member name="M:dotnetCHARTING.FinancialEngine.PositiveVolumeIndex(System.String,dotnetCHARTING.Series)"><summary>
            We evaluate the Positive Volume Index(PVI) wich take in the consideration the
            days where volume increase from the previous day.
            </summary><remarks><h3>Indicator Formula</h3><p>The formula for this indicator is:</p><br></br>
            If the volume is greater then the yesterday volume then:
            <br></br>
            PVI = Yesterday's PVI + (((Close - Yesterday's Close)/Yesterday's Close) *Yesterday's PVI)
            <br></br>
            If today's volume is less than or equal to yesterday's volume then:
            <br></br>
            PVI = Yesterday's PVI
            <br></br>
            Allways the first element of an financial array will be a
            value of the most recent period considered.  
            </remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">An series where the first element is the closing price in the last trading period, 
            the second term is the closing price in the previous trading period and so on.</param></member><member name="M:dotnetCHARTING.FinancialEngine.PositiveVolumeIndex(dotnetCHARTING.Series)"><summary>
            We evaluate the Positive Volume Index(PVI) wich take in the consideration the
            days where volume increase from the previous day.
            </summary><remarks><h3>Indicator Formula</h3><p>The formula for this indicator is:</p><br></br>
            If the volume is greater then the yesterday volume then:
            <br></br>
            PVI = Yesterday's PVI + (((Close - Yesterday's Close)/Yesterday's Close) *Yesterday's PVI)
            <br></br>
            If today's volume is less than or equal to yesterday's volume then:
            <br></br>
            PVI = Yesterday's PVI
            <br></br>
            Allways the first element of an financial array will be a
            value of the most recent period considered.  
            </remarks><param name="s">An series where the first element is the closing price in the last trading period, 
            the second term is the closing price in the previous trading period and so on.</param></member><member name="M:dotnetCHARTING.FinancialEngine.PositiveVolumeIndex(dotnetCHARTING.SeriesCollection)"><summary>
            We evaluate the Positive Volume Index(PVI) wich take in the consideration the
            days where volume increase from the previous day.
            </summary><remarks><h3>Indicator Formula</h3><p>The formula for this indicator is:</p><br></br>
            If the volume is greater then the yesterday volume then:
            <br></br>
            PVI = Yesterday's PVI + (((Close - Yesterday's Close)/Yesterday's Close) *Yesterday's PVI)
            <br></br>
            If today's volume is less than or equal to yesterday's volume then:
            <br></br>
            PVI = Yesterday's PVI
            <br></br>
            Allways the first element of an financial array will be a
            value of the most recent period considered.  
            </remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param></member><member name="M:dotnetCHARTING.FinancialEngine.OnBalanceVolume(System.String,dotnetCHARTING.Series)"><summary>
            On Balance Volume ("OBV") is a momentum indicator developed by Joe Granville that relates volume 
            to price change.
            </summary><remarks><h3>Indicator Formula</h3><p>The formula for this indicator is:</p><br></br> 
            If today's close is greater than yesterday's close then:
            <br></br>
            OBV = Yesterday's OBV + Today's Volume
            <br></br>
            If today's close is less than yesterday's close then:
            <br></br>
            OBV = Yesterday's OBV - Today's Volume
            <br></br>
            If today's close is equal to yesterday's close then:
            <br></br>
            OBV = Yesterday's OBV
            </remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">An series where the first element is the closing price in the last trading period, 
            the second term is the closing price in the previous trading period and so on.</param></member><member name="M:dotnetCHARTING.FinancialEngine.OnBalanceVolume(dotnetCHARTING.Series)"><summary>
            On Balance Volume ("OBV") is a momentum indicator developed by Joe Granville that relates volume 
            to price change.
            </summary><remarks><h3>Indicator Formula</h3><p>The formula for this indicator is:</p><br></br> 
            If today's close is greater than yesterday's close then:
            <br></br>
            OBV = Yesterday's OBV + Today's Volume
            <br></br>
            If today's close is less than yesterday's close then:
            <br></br>
            OBV = Yesterday's OBV - Today's Volume
            <br></br>
            If today's close is equal to yesterday's close then:
            <br></br>
            OBV = Yesterday's OBV
            </remarks><param name="s">An series where the first element is the closing price in the last trading period, 
            the second term is the closing price in the previous trading period and so on.</param></member><member name="M:dotnetCHARTING.FinancialEngine.OnBalanceVolume(dotnetCHARTING.SeriesCollection)"><summary>
            On Balance Volume ("OBV") is a momentum indicator developed by Joe Granville that relates volume 
            to price change.
            </summary><remarks><h3>Indicator Formula</h3><p>The formula for this indicator is:</p><br></br> 
            If today's close is greater than yesterday's close then:
            <br></br>
            OBV = Yesterday's OBV + Today's Volume
            <br></br>
            If today's close is less than yesterday's close then:
            <br></br>
            OBV = Yesterday's OBV - Today's Volume
            <br></br>
            If today's close is equal to yesterday's close then:
            <br></br>
            OBV = Yesterday's OBV
            </remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param></member><member name="M:dotnetCHARTING.FinancialEngine.KFastStochastic(System.String,dotnetCHARTING.Series,System.Int32)"><summary>
            Evaluation of the Fast %K Stochastic when the number of previous time periods used
            over which the closing price is compared is given.
            
            <h4>Indicator variables</h4><p>The Stochastic %K depends on the following variable:</p><ul><li><b>Periods</b> - the number of previous time periods used over which the
            closing price is compared.</li></ul><p>Now the formulae for the Stochastic %K over a is:</p><br></br>
            
            100 x (Last Close -  Lowest low)/(Highest high - Lowest low)
            <br></br><p>where the "lowest low" (respec. "highest high") is the highest (respec.
            lowest) close of the asset over the period under consideration. Since the
            "Last close", will lie between the highest high and lowest low this indicator will 
            lie between 0 and 100.</p></summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">An series where the first element is the closing price in the last trading period, 
            the second term is the closing price in the previous trading period and so on.</param><param name="noOfPeriods">An integer which represents the number of previous time periods used
            over which the closing price is compared.</param><returns>A series where the first term is the KFastStochastic calculated for the most recent
            period, the second term is the KFastStochastic calculated for the previous period and so on.</returns></member><member name="M:dotnetCHARTING.FinancialEngine.KFastStochastic(dotnetCHARTING.Series,System.Int32)"><summary>
            Evaluation of the Fast %K Stochastic when the number of previous time periods used
            over which the closing price is compared is given.
            
            <h4>Indicator variables</h4><p>The Stochastic %K depends on the following variable:</p><ul><li><b>Periods</b> - the number of previous time periods used over which the
            closing price is compared.</li></ul><p>Now the formulae for the Stochastic %K over a is:</p><br></br><br></br>
            100 x (Last Close -  Lowest low)/(Highest high - Lowest low)
            <br></br><p>where the "lowest low" (respec. "highest high") is the highest (respec.
            lowest) close of the asset over the period under consideration. Since the
            "Last close", will lie between the highest high and lowest low this indicator will 
            lie between 0 and 100.</p></summary><param name="s">An series where the first element is the closing price in the last trading period, 
            the second term is the closing price in the previous trading period and so on.</param><param name="noOfPeriods">An integer which represents the number of previous time periods used
            over which the closing price is compared.</param><returns>A series where the first term is the KFastStochastic calculated for the most recent
            period, the second term is the KFastStochastic calculated for the previous period and so on.</returns></member><member name="M:dotnetCHARTING.FinancialEngine.KFastStochastic(dotnetCHARTING.SeriesCollection,System.Int32)"><summary>
            Evaluation of the Fast %K Stochastic when the number of previous time periods used
            over which the closing price is compared is given.
            
            <h4>Indicator variables</h4><p>The Stochastic %K depends on the following variable:</p><ul><li><b>Periods</b> - the number of previous time periods used over which the
            closing price is compared.</li></ul><p>Now the formulae for the Stochastic %K over a is:</p><br></br><br></br>
            100 x (Last Close -  Lowest low)/(Highest high - Lowest low)<br></br><br></br><p>where the "lowest low" (respec. "highest high") is the highest (respec.
            lowest) close of the asset over the period under consideration. Since the
            "Last close", will lie between the highest high and lowest low this indicator will 
            lie between 0 and 100.</p></summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="noOfPeriods">An integer which represents the number of previous time periods used
            over which the closing price is compared.</param><returns>A series where the first term is the KFastStochastic calculated for the most recent
            period, the second term is the KFastStochastic calculated for the previous period and so on.</returns></member><member name="M:dotnetCHARTING.FinancialEngine.DStochastic(System.String,dotnetCHARTING.Series,System.Int32,System.Int32,System.Int32)"><summary>
            Evaluate the (general) %D Stochastic.
            </summary><remarks>
            This is just the moving average of the (fast)
            %K Stochastic. When the simple moving average is used and the moving average is
            take over three days, the resulting indicator to referred to as the (slow) %K Stochastic.
            
            <p>As one would expect the Moving Average %D of the %K Stochastic depends on:
            <ul><li><b>%D Periods</b> - The number of periods over which the moving average is
            evaluated.</li><li><b>MA Method</b> - This is the method by which the moving average of the
            Stochastic %K is evaluated. We offer a range of methods for the evaluation of the
            moving average, these include: simple, exponential, geometric, weighted,
            linearly weighted and exponentially weighted.</li></ul></p><p><b>Remark</b> When the simple moving average is used and it is evaluated over
            3-days, then the %D Stochastic reduces to what is known as the slow %K
            Stochastic.</p></remarks><param name="seriesName">An series where the first element is the closing price in the last trading period, 
            the second term is the closing price in the previous trading period and so on.</param><param name="s">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="noOfPeriods">An integer which represents the number of periods used over which the closing price is compared.</param><param name="method">Determines the methods used for the evaluation of the moving average in accordance 
            with the following key: 
            <ol><li> 1 = Simple moving average</li><li> 2 = Geometric moving average</li><li> 3 = Linearly weighted moving average</li><li> 4 = Exponentially Weighted Moving average within smoothing fact set to be 0.5.</li></ol><p>For further details concerning the definition of these moving averages please see the accompanying 
            PDF documentation or the API documentation for <see cref="M:dotnetCHARTING.FinancialEngine.SimpleMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)"></see>.</p></param><param name="lengthOfMA">The number of periods over which the moving average is considered.</param></member><member name="M:dotnetCHARTING.FinancialEngine.DStochastic(dotnetCHARTING.Series,System.Int32,System.Int32,System.Int32)"><summary>
            Evaluate the (general) %D Stochastic.
            </summary><remarks>
            This is just the moving average of the (fast)
            %K Stochastic. When the simple moving average is used and the moving average is
            take over three days, the resulting indicator to referred to as the (slow) %K Stochastic.
            
            <p>As one would expect the Moving Average %D of the %K Stochastic depends on:
            <ul><li><b>%D Periods</b> - The number of periods over which the moving average is
            evaluated.</li><li><b>MA Method</b> - This is the method by which the moving average of the
            Stochastic %K is evaluated. We offer a range of methods for the evaluation of the
            moving average, these include: simple, exponential, geometric, weighted,
            linearly weighted and exponentially weighted.</li></ul></p><p><b>Remark</b> When the simple moving average is used and it is evaluated over
            3-days, then the %D Stochastic reduces to what is known as the slow %K
            Stochastic.</p></remarks><param name="s">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="noOfPeriods">An integer which represents the number of periods used over which the closing price is compared.</param><param name="method">Determines the methods used for the evaluation of the moving average in accordance 
            with the following key: 
            <ol><li> 1 = Simple moving average</li><li> 2 = Geometric moving average</li><li> 3 = Linearly weighted moving average</li><li> 4 = Exponentially Weighted Moving average within smoothing fact set to be 0.5.</li></ol><p>For further details concerning the definition of these moving averages please see the accompanying 
            PDF documentation or the API documentation for <see cref="M:dotnetCHARTING.FinancialEngine.SimpleMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)"></see>.</p></param><param name="lengthOfMA">The number of periods over which the moving average is considered.</param></member><member name="M:dotnetCHARTING.FinancialEngine.DStochastic(dotnetCHARTING.SeriesCollection,System.Int32,System.Int32,System.Int32)"><summary>
            Evaluate the (general) %D Stochastic.
            </summary><remarks>
            This is just the moving average of the (fast)
            %K Stochastic. When the simple moving average is used and the moving average is
            take over three days, the resulting indicator to referred to as the (slow) %K Stochastic.
            
            <p>As one would expect the Moving Average %D of the %K Stochastic depends on:
            <ul><li><b>%D Periods</b> - The number of periods over which the moving average is
            evaluated.</li><li><b>MA Method</b> - This is the method by which the moving average of the
            Stochastic %K is evaluated. We offer a range of methods for the evaluation of the
            moving average, these include: simple, exponential, geometric, weighted,
            linearly weighted and exponentially weighted.</li></ul></p><p><b>Remark</b> When the simple moving average is used and it is evaluated over
            3-days, then the %D Stochastic reduces to what is known as the slow %K
            Stochastic.</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="noOfPeriods">An integer which represents the number of periods used over which the closing price is compared.</param><param name="method">Determines the methods used for the evaluation of the moving average in accordance 
            with the following key: 
            <ol><li> 1 = Simple moving average</li><li> 2 = Geometric moving average</li><li> 3 = Linearly weighted moving average</li><li> 4 = Exponentially Weighted Moving average within smoothing fact set to be 0.5.</li></ol><p>For further details concerning the definition of these moving averages please see the accompanying 
            PDF documentation or the API documentation for <see cref="M:dotnetCHARTING.FinancialEngine.SimpleMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)"></see>.</p></param><param name="lengthOfMA">The number of periods over which the moving average is considered.</param></member><member name="M:dotnetCHARTING.FinancialEngine.CrossingSignal(System.String,dotnetCHARTING.Series,System.Int32,System.Int32,System.Int32)"><summary>
            Implements a general framework for producing trading signals based on the crossing of two Stochastics.
            </summary><remarks><p><b>Methodology</b></p><p>Buy when the Stochastic %K, crosses above the MA %D and
            sell when the Stochastic %K falls below the MA of Stochastic %D. Since
            this approach is prone to being whip-sawed we use two (general) Stochastics
            so that a MA of the %K Stochastic of the first Stochastic and an even more
            smoothed second Stochastic. In this case a sell signal is generated if the
            first (more sensitive) Stochastic cross below the second (smoothed) Stochastic,
            and a buy signal is generated if the first Stochastic crosses above the second
            Stochastic.</p></remarks><param name="seriesName">An series where the first element is the closing price in the last trading period, 
            the second term is the closing price in the previous trading period and so on.</param><param name="s">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="noOfPeriods">An integer which represents the number of periods used over which the 
            closing price is compared.</param><param name="method">Determines the methods used for the evaluation of the moving average in 
            accordance with the following key: 
            <ol><li> 1 = Simple moving average</li><li> 2 = Geometric moving average</li><li> 3 = Linearly weighted moving average</li><li> 4 = Exponentially Weighted Moving average within smoothing fact set to be 0.5.</li></ol></param><param name="lengthOfMA">The number of periods over which the moving average is considered.</param><returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate that either a sell, no action 
            or buy signal was generated.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.CrossingSignal(dotnetCHARTING.Series,System.Int32,System.Int32,System.Int32)"><summary>
            Implements a general framework for producing trading signals based on the crossing of two Stochastics.
            </summary><remarks><p><b>Methodology</b></p><p>Buy when the Stochastic %K, crosses above the MA %D and
            sell when the Stochastic %K falls below the MA of Stochastic %D. Since
            this approach is prone to being whip-sawed we use two (general) Stochastics
            so that a MA of the %K Stochastic of the first Stochastic and an even more
            smoothed second Stochastic. In this case a sell signal is generated if the
            first (more sensitive) Stochastic cross below the second (smoothed) Stochastic,
            and a buy signal is generated if the first Stochastic crosses above the second
            Stochastic.</p></remarks><param name="s">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="noOfPeriods">An integer which represents the number of periods used over which the 
            closing price is compared.</param><param name="method">Determines the methods used for the evaluation of the moving average in 
            accordance with the following key: 
            <ol><li> 1 = Simple moving average</li><li> 2 = Geometric moving average</li><li> 3 = Linearly weighted moving average</li><li> 4 = Exponentially Weighted Moving average within smoothing fact set to be 0.5.</li></ol></param><param name="lengthOfMA">The number of periods over which the moving average is considered.</param><returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate that either a sell, no action 
            or buy signal was generated.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.CrossingSignal(dotnetCHARTING.SeriesCollection,System.Int32,System.Int32,System.Int32)"><summary>
            Implements a general framework for producing trading signals based on the crossing of two Stochastics.
            </summary><remarks><p><b>Methodology</b></p><p>Buy when the Stochastic %K, crosses above the MA %D and
            sell when the Stochastic %K falls below the MA of Stochastic %D. Since
            this approach is prone to being whip-sawed we use two (general) Stochastics
            so that a MA of the %K Stochastic of the first Stochastic and an even more
            smoothed second Stochastic. In this case a sell signal is generated if the
            first (more sensitive) Stochastic cross below the second (smoothed) Stochastic,
            and a buy signal is generated if the first Stochastic crosses above the second
            Stochastic.</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="noOfPeriods">An integer which represents the number of periods used over which the closing 
            price is compared.</param><param name="method">Determines the methods used for the evaluation of the moving average in 
            accordance with the following key: 
            <ol><li> 1 = Simple moving average</li><li> 2 = Geometric moving average</li><li> 3 = Linearly weighted moving average</li><li> 4 = Exponentially Weighted Moving average within smoothing fact set to be 0.5.</li></ol></param><param name="lengthOfMA">The number of periods over which the moving average is considered.</param><returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate that either a sell, no action 
            or buy signal was generated.
            </returns></member><member name="M:dotnetCHARTING.FinancialEngine.CrossingExtremeSignal(System.String,dotnetCHARTING.Series,System.Double,System.Double,System.Int32,System.Int32,System.Int32)"><summary>
            This trading system combines the features of the crossing and extremum value trading systems by 
            requiring that a signal will only be generated if the fast %K Stochastic crosses the slow %D Stochastic
            either above or below the extremal values.
            </summary><remarks><h3>Trading System Rules</h3><p>This system generates buy and sell signals respectively when one of the following is triggered:
            <ol><li> Buy Signal: When the fast %K Stochastic crosses above the slow %D Stochastic and
            this crossing takes place at a value lower than the <c>extremumLow</c>, then a buy signal is generated.
            </li><li> Sell Signal: When the fast %K Stochastic crosses above the slow %D Stochastic and
            this crossing takes place at a value higher than the <c>extremumHigh</c>, then a sell signal in generated.
            </li></ol></p></remarks><param name="seriesName">An series where the first element is the closing price in the last trading period, 
            the second term is the closing price in the previous trading period and so on.</param><param name="s">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="extremeLow">This is the level at which the Stochastic is believed to indicate an oversold level. 
            The Stochastic always lies between 0 and 100, and a suggested extreme low value to take is 20.</param><param name="extremeHigh">This is the level at which the Stochastic is believed to indicate an over brought 
            level. The Stochastic always lies between 0 and 100, and a suggested extreme high value is 80.</param><param name="noOfPeriods">An integer which represents the number of periods used over which the closing price is compared.</param><param name="method">Determines the methods used for the evaluation of the moving average in accordance 
            with the following key: 
            <ol><li> 1 = Simple moving average</li><li> 2 = Geometric moving average</li><li> 3 = Linearly weighted moving average</li><li> 4 = Exponentially Weighted Moving average within smoothing fact set to be 0.5.</li></ol><p>For further details concerning the definition of these moving averages please see the accompanying 
            PDF documentation or the API documentation for <see cref="M:dotnetCHARTING.FinancialEngine.SimpleMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)"></see>.</p>.</param><param name="lengthOfMA">The number of periods over which the moving average is considered.</param><returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate that either a sell, no action or 
            buy signal was generated.</returns></member><member name="M:dotnetCHARTING.FinancialEngine.CrossingExtremeSignal(dotnetCHARTING.Series,System.Double,System.Double,System.Int32,System.Int32,System.Int32)"><summary>
            This trading system combines the features of the crossing and extremum value trading systems by 
            requiring that a signal will only be generated if the fast %K Stochastic crosses the slow %D Stochastic
            either above or below the extremal values.
            </summary><remarks><h3>Trading System Rules</h3><p>This system generates buy and sell signals respectively when one of the following is triggered:
            <ol><li> Buy Signal: When the fast %K Stochastic crosses above the slow %D Stochastic and
            this crossing takes place at a value lower than the <c>extremumLow</c>, then a buy signal is generated.
            </li><li> Sell Signal: When the fast %K Stochastic crosses above the slow %D Stochastic and
            this crossing takes place at a value higher than the <c>extremumHigh</c>, then a sell signal in generated.
            </li></ol></p></remarks><param name="s">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="extremeLow">This is the level at which the Stochastic is believed to indicate an oversold level. 
            The Stochastic always lies between 0 and 100, and a suggested extreme low value to take is 20.</param><param name="extremeHigh">This is the level at which the Stochastic is believed to indicate an over brought 
            level. The Stochastic always lies between 0 and 100, and a suggested extreme high value is 80.</param><param name="noOfPeriods">An integer which represents the number of periods used over which the closing price is compared.</param><param name="method">Determines the methods used for the evaluation of the moving average in accordance 
            with the following key: 
            <ol><li> 1 = Simple moving average</li><li> 2 = Geometric moving average</li><li> 3 = Linearly weighted moving average</li><li> 4 = Exponentially Weighted Moving average within smoothing fact set to be 0.5.</li></ol><p>For further details concerning the definition of these moving averages please see the accompanying 
            PDF documentation or the API documentation for <see cref="M:dotnetCHARTING.FinancialEngine.SimpleMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)"></see>.</p>.</param><param name="lengthOfMA">The number of periods over which the moving average is considered.</param><returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate that either a sell, no action or buy signal was generated.</returns></member><member name="M:dotnetCHARTING.FinancialEngine.CrossingExtremeSignal(dotnetCHARTING.SeriesCollection,System.Double,System.Double,System.Int32,System.Int32,System.Int32)"><summary>
            This trading system combines the features of the crossing and extremum value trading systems by 
            requiring that a signal will only be generated if the fast %K Stochastic crosses the slow %D Stochastic
            either above or below the extremal values.
            </summary><remarks><h3>Trading System Rules</h3><p>This system generates buy and sell signals respectively when one of the following is triggered:
            <ol><li> Buy Signal: When the fast %K Stochastic crosses above the slow %D Stochastic and
            this crossing takes place at a value lower than the <c>extremumLow</c>, then a buy signal is generated.
            </li><li> Sell Signal: When the fast %K Stochastic crosses above the slow %D Stochastic and
            this crossing takes place at a value higher than the <c>extremumHigh</c>, then a sell signal in generated.
            </li></ol></p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="extremeLow">This is the level at which the Stochastic is believed to indicate an oversold level. 
            The Stochastic always lies between 0 and 100, and a suggested extreme low value to take is 20.</param><param name="extremeHigh">This is the level at which the Stochastic is believed to indicate an over brought 
            level. The Stochastic always lies between 0 and 100, and a suggested extreme high value is 80.</param><param name="noOfPeriods">An integer which represents the number of periods used over which the closing 
            price is compared.</param><param name="method">Determines the methods used for the evaluation of the moving average in accordance 
            with the following key: 
            <ol><li> 1 = Simple moving average</li><li> 2 = Geometric moving average</li><li> 3 = Linearly weighted moving average</li><li> 4 = Exponentially Weighted Moving average within smoothing fact set to be 0.5.</li></ol><p>For further details concerning the definition of these moving averages please see the accompanying 
            PDF documentation or the API documentation for <see cref="M:dotnetCHARTING.FinancialEngine.SimpleMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)"></see>.</p>.</param><param name="lengthOfMA">The number of periods over which the moving average is considered.</param><returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate that either a sell, no action or 
            buy signal was generated.</returns></member><member name="M:dotnetCHARTING.FinancialEngine.ExtremeValueDSignal(System.String,dotnetCHARTING.Series,System.Double,System.Double,System.Int32,System.Int32,System.Int32)"><summary>
            Implements a general framework for producing extreme value trading signals using Stochastic indicators.
            </summary><remarks>
            Note, that the general ides of this approach is to seek points which are oversold or over brought 
            levels which are turning.
            
            <h4>Methodology</h4><p>Buy when the Oscillator the Stochastic %D falls below a specific level (e.g. 20) and then
            rises above that level. Sell when the Oscillator rises above a specific
            level (e.g. 80) and then falls below that level. This approach is the
            preferred method of the Stochastics original creator George Lane.</p></remarks><param name="seriesName">An series where the first element is the closing price in the last trading period, 
            the second term is the closing price in the previous trading period and so on.</param><param name="s">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="extremeLow">This is the level at which the Stochastic is believed to indicate an oversold 
            level. The Stochastic always lies between 0 and 100, and a suggested extreme low value to take is 20.</param><param name="extremeHigh">This is the level at which the Stochastic is believed to indicate an over brought 
            level. The Stochastic always lies between 0 and 100, and a suggested extreme high value is 80.</param><param name="noOfPeriods">An integer which represents the number of periods used over which the closing 
            price is compared.</param><param name="method">Determines the methods used for the evaluation of the moving average in accordance 
            with the following key:
            <ol><li> 1 = Simple moving average</li><li> 2 = Geometric moving average</li><li> 3 = Linearly weighted moving average</li><li> 4 = Exponentially Weighted Moving average within smoothing fact set to be 0.5.</li></ol><p>For further details concerning the definition of these moving averages please see the accompanying 
            PDF documentation or the API documentation for <see cref="M:dotnetCHARTING.FinancialEngine.SimpleMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)"></see>.</p></param><param name="lengthOfMA">The number of periods over which the moving average is considered.</param><returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate that either a sell, no action or buy signal was generated.</returns></member><member name="M:dotnetCHARTING.FinancialEngine.ExtremeValueDSignal(dotnetCHARTING.Series,System.Double,System.Double,System.Int32,System.Int32,System.Int32)"><summary>
            Implements a general framework for producing extreme value trading signals using Stochastic indicators.
            </summary><remarks>
            Note, that the general ides of this approach
             is to seek points which are oversold or over brought levels which are turning.
            
            <h4>Methodology</h4><p>Buy when the Oscillator the Stochastic %D falls below a specific level (e.g. 20) and then
            rises above that level. Sell when the Oscillator rises above a specific
            level (e.g. 80) and then falls below that level. This approach is the
            preferred method of the Stochastics original creator George Lane.</p></remarks><param name="s">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="extremeLow">This is the level at which the Stochastic is believed to indicate an oversold 
            level. The Stochastic always lies between 0 and 100, and a suggested extreme low value to take is 20.</param><param name="extremeHigh">This is the level at which the Stochastic is believed to indicate an over brought 
            level. The Stochastic always lies between 0 and 100, and a suggested extreme high value is 80.</param><param name="noOfPeriods">An integer which represents the number of periods used over which the closing 
            price is compared.</param><param name="method">Determines the methods used for the evaluation of the moving average in accordance 
            with the following key:
            <ol><li> 1 = Simple moving average</li><li> 2 = Geometric moving average</li><li> 3 = Linearly weighted moving average</li><li> 4 = Exponentially Weighted Moving average within smoothing fact set to be 0.5.</li></ol><p>For further details concerning the definition of these moving averages please see the accompanying 
            PDF documentation or the API documentation for <see cref="M:dotnetCHARTING.FinancialEngine.SimpleMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)"></see>.</p></param><param name="lengthOfMA">The number of periods over which the moving average is considered.</param><returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate that either a sell, no action or buy signal was generated.</returns></member><member name="M:dotnetCHARTING.FinancialEngine.ExtremeValueDSignal(dotnetCHARTING.SeriesCollection,System.Double,System.Double,System.Int32,System.Int32,System.Int32)"><summary>
            Implements a general framework for producing extreme value trading signals using Stochastic indicators.
            </summary><remarks>
            Note, that the general ides of this approach
            is to seek points which are oversold or over brought levels which are turning.
            
            <h4>Methodology</h4><p>Buy when the Oscillator the Stochastic %D falls below a specific level (e.g. 20) and then
            rises above that level. Sell when the Oscillator rises above a specific
            level (e.g. 80) and then falls below that level. This approach is the
            preferred method of the Stochastics original creator George Lane.</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="extremeLow">This is the level at which the Stochastic is believed to indicate an oversold 
            level. The Stochastic always lies between 0 and 100, and a suggested extreme low value to take is 20.</param><param name="extremeHigh">This is the level at which the Stochastic is believed to indicate an over brought 
            level. The Stochastic always lies between 0 and 100, and a suggested extreme high value is 80.</param><param name="noOfPeriods">An integer which represents the number of periods used over which the closing 
            price is compared.</param><param name="method">Determines the methods used for the evaluation of the moving average in accordance 
            with the following key:
            <ol><li> 1 = Simple moving average</li><li> 2 = Geometric moving average</li><li> 3 = Linearly weighted moving average</li><li> 4 = Exponentially Weighted Moving average within smoothing fact set to be 0.5.</li></ol><p>For further details concerning the definition of these moving averages please see the accompanying 
            PDF documentation or the API documentation for <see cref="M:dotnetCHARTING.FinancialEngine.SimpleMovingAverage(System.String,dotnetCHARTING.Series,dotnetCHARTING.ElementValue,System.Int32)"></see>.</p></param><param name="lengthOfMA">The number of periods over which the moving average is considered.</param><returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate that either a sell, no action or buy signal was generated.</returns></member><member name="M:dotnetCHARTING.FinancialEngine.ExtremeValueKSignal(System.String,dotnetCHARTING.Series,System.Double,System.Double,System.Int32)"><summary>
            Implements a general framework for producing extreme value trading signals using Stochastic indicators.
            </summary><remarks>
            Note, that the general ideea of this approach
            is to seek points which are oversold or over brought levels which are turning.
            
            <h4>Methodology</h4><p>Buy when the  the Stochastic %K falls below a specific level (e.g. 20) and then
            rises above that level. Sell when the Oscillator rises above a specific
            level (e.g. 80) and then falls below that level. This approach is the
            preferred method of the Stochastics original creator George Lane.</p></remarks><param name="seriesName">An series where the first element is the closing price in the last trading period, 
            the second term is the closing price in the previous trading period and so on.</param><param name="s">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="extremeLow">This is the level at which the Stochastic is believed to indicate an oversold 
            level. The Stochastic always lies between 0 and 100, and a suggested extreme low value to take is 20.</param><param name="extremeHigh">This is the level at which the Stochastic is believed to indicate an over brought 
            level. The Stochastic always lies between 0 and 100, and a suggested extreme high value is 80.</param><param name="noOfPeriods">An integer which represents the number of periods used over which the closing 
            price is compared.</param><returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate that either a sell, no action or buy 
            signal was generated.</returns></member><member name="M:dotnetCHARTING.FinancialEngine.ExtremeValueKSignal(dotnetCHARTING.Series,System.Double,System.Double,System.Int32)"><summary>
            Implements a general framework for producing extreme value trading signals using Stochastic indicators.
            </summary><remarks>
            Note, that the general ideea of this approach
            is to seek points which are oversold or over brought levels which are turning.
            
            <h4>Methodology</h4><p>Buy when the  the Stochastic %K falls below a specific level (e.g. 20) and then
            rises above that level. Sell when the Oscillator rises above a specific
            level (e.g. 80) and then falls below that level. This approach is the
            preferred method of the Stochastics original creator George Lane.</p></remarks><param name="s">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="extremeLow">This is the level at which the Stochastic is believed to indicate an oversold 
            level. The Stochastic always lies between 0 and 100, and a suggested extreme low value to take is 20.</param><param name="extremeHigh">This is the level at which the Stochastic is believed to indicate an over brought 
            level. The Stochastic always lies between 0 and 100, and a suggested extreme high value is 80.</param><param name="noOfPeriods">An integer which represents the number of periods used over which the closing 
            price is compared.</param><returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate that either a sell, no action or buy 
            signal was generated.</returns></member><member name="M:dotnetCHARTING.FinancialEngine.ExtremeValueKSignal(dotnetCHARTING.SeriesCollection,System.Double,System.Double,System.Int32)"><summary>
            Implements a general framework for producing extreme value trading signals using Stochastic indicators.
            </summary><remarks>
            Note, that the general ideea of this approach
            is to seek points which are oversold or over brought levels which are turning.
            
            <h4>Methodology</h4><p>Buy when the  the Stochastic %K falls below a specific level (e.g. 20) and then
            rises above that level. Sell when the Oscillator rises above a specific
            level (e.g. 80) and then falls below that level. This approach is the
            preferred method of the Stochastics original creator George Lane.</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="extremeLow">This is the level at which the Stochastic is believed to indicate an oversold 
            level. The Stochastic always lies between 0 and 100, and a suggested extreme low value to take is 20.</param><param name="extremeHigh">This is the level at which the Stochastic is believed to indicate an over brought 
            level. The Stochastic always lies between 0 and 100, and a suggested extreme high value is 80.</param><param name="noOfPeriods">An integer which represents the number of periods used over which the closing 
            price is compared.</param><returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate that either a sell, no action or buy 
            signal was generated.</returns></member><member name="T:dotnetCHARTING.FinancialEngine.Options"><summary>
            Defines a set of static options used with FinancialEngine calculations.
            </summary></member><member name="M:dotnetCHARTING.FinancialEngine.Options.Reset"><summary>
            Resets the options to default settings.
            </summary></member><member name="P:dotnetCHARTING.FinancialEngine.Options.PopulateSubValues"><summary>
            Gets or sets a static value that determines whether elements derived from series will 
            contain values of the original elements as %dotnetCHARTING.SubValue% objects.
            </summary></member><member name="P:dotnetCHARTING.FinancialEngine.Options.MatchColors"><summary>
            Gets or sets a value that indicates whether calculated elements will use the same colors that are 
            assigned to original series. Both, the original and derived data objects must be placed on the 
            same chart to enable this feature.
            </summary></member><member name="T:dotnetCHARTING.ForecastEngine"><summary>
            Provides a set of methods that find the best fit curve of a data set.
            </summary></member><member name="M:dotnetCHARTING.ForecastEngine.TrendLine(System.String,dotnetCHARTING.Series,dotnetCHARTING.Series,System.Int32)"><summary>
            Given a set of data points x[0..ndata-1],y[0..ndata-1] with individual standard deviations
            sig[0..ndata-1], fit them to a straight line y = a + bx by minimizing ¥ö2. Returned are
            a,b and their respective probable uncertainties siga and sigb, the chi-square chi2, and the
            goodness-of-fit probability q (that the fit would have ¥ö2 this large or larger). If mwt=0 on
            input, then the standard deviations are assumed to be unavailable: q is returned as 1.0 and
            the normalization of chi2 is to unit standard deviation on all points.
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><param name="deviations">A series wich contains the standard deviations of the given data point.</param><param name="mwt">When this parameter is 0 the standard deviation will not be considered.</param></member><member name="M:dotnetCHARTING.ForecastEngine.TrendLine(dotnetCHARTING.Series,dotnetCHARTING.Series,System.Int32)"><summary>
            Given a set of data points x[0..ndata-1],y[0..ndata-1] with individual standard deviations
            sig[0..ndata-1], fit them to a straight line y = a + bx by minimizing ¥ö2. Returned are
            a,b and their respective probable uncertainties siga and sigb, the chi-square chi2, and the
            goodness-of-fit probability q (that the fit would have ¥ö2 this large or larger). If mwt=0 on
            input, then the standard deviations are assumed to be unavailable: q is returned as 1.0 and
            the normalization of chi2 is to unit standard deviation on all points.
            </summary><param name="s">A statistical series.</param><param name="deviations">A series wich contains the standard deviations of the given data point.</param><param name="mwt">When this parameter is 0 the standard deviation will not be considered.</param></member><member name="M:dotnetCHARTING.ForecastEngine.TrendLine(dotnetCHARTING.SeriesCollection,dotnetCHARTING.Series,System.Int32)"><summary>
            Given a set of data points x[0..ndata-1],y[0..ndata-1] with individual standard deviations
            sig[0..ndata-1], fit them to a straight line y = a + bx by minimizing ¥ö2. Returned are
            a,b and their respective probable uncertainties siga and sigb, the chi-square chi2, and the
            goodness-of-fit probability q (that the fit would have ¥ö2 this large or larger). If mwt=0 on
            input, then the standard deviations are assumed to be unavailable: q is returned as 1.0 and
            the normalization of chi2 is to unit standard deviation on all points.
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="deviations">A series wich contains the standard deviations of the given data point.</param><param name="mwt">When this parameter is 0 the standard deviation will not be considered.</param></member><member name="M:dotnetCHARTING.ForecastEngine.TrendLineLogarithmic(System.String,dotnetCHARTING.Series)"><summary>
            Find the best fit for the function f(x) = a + b * ln(x).
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param></member><member name="M:dotnetCHARTING.ForecastEngine.TrendLineLogarithmic(dotnetCHARTING.Series)"><summary>
            Find the best fit for the function f(x) = a + b * ln(x).
            </summary><param name="s">A statistical series.</param></member><member name="M:dotnetCHARTING.ForecastEngine.TrendLineLogarithmic(dotnetCHARTING.SeriesCollection)"><summary>
            Find the best fit for the function f(x) = a + b * ln(x).
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param></member><member name="M:dotnetCHARTING.ForecastEngine.TrendLineLogarithmic(System.String,dotnetCHARTING.Series,System.Double,System.Int32,System.Int32)"><summary>
            Find the best fit for the function f(x) = a + b * ln(x).
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><param name="step">The distance in the x-coordinate between two adjacent extended points. 
            Please note that this also corresponds to the distance in the x-coordinate between the 
            highest and lowest original data point and the first (above or below) additional evaluation 
            point.</param><param name="forward">The number of additional evaluation points which are evaluated above 
            the x-coordinates of the original given data set.</param><param name="backward">The number of additional evaluation points which are evaluated below 
            the x-coordinates of the original given data set.</param><returns>A series where the k-th element of the array represents of k-th point 
            (i.e. { x_k, y_k }) of the total set over which the fitted function is evaluated.
            The total set over which the fitted function is evaluated consists of the `backward' points,
            original data set points and the `forward' points.
            <p><b>Remark:</b> This methods corresponds in functionality to the method of the same 
            name within Microsoft Excel.</p></returns></member><member name="M:dotnetCHARTING.ForecastEngine.TrendLineLogarithmic(dotnetCHARTING.Series,System.Double,System.Int32,System.Int32)"><summary>
            Find the best fit for the function f(x) = a + b * ln(x).
            </summary><param name="s">A statistical series.</param><param name="step">The distance in the x-coordinate between two adjacent extended points. 
            Please note that this also corresponds to the distance in the x-coordinate between the 
            highest and lowest original data point and the first (above or below) additional evaluation 
            point.</param><param name="forward">The number of additional evaluation points which are evaluated above 
            the x-coordinates of the original given data set.</param><param name="backward">The number of additional evaluation points which are evaluated below 
            the x-coordinates of the original given data set.</param><returns>A series where the k-th element of the array represents of k-th point 
            (i.e. { x_k, y_k }) of the total set over which the fitted function is evaluated.
            The total set over which the fitted function is evaluated consists of the `backward' points,
            original data set points and the `forward' points.
            <p><b>Remark:</b> This methods corresponds in functionality to the method of the same 
            name within Microsoft Excel.</p></returns></member><member name="M:dotnetCHARTING.ForecastEngine.TrendLineLogarithmic(dotnetCHARTING.SeriesCollection,System.Double,System.Int32,System.Int32)"><summary>
            Find the best fit for the function f(x) = a + b * ln(x).
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="step">The distance in the x-coordinate between two adjacent extended points. 
            Please note that this also corresponds to the distance in the x-coordinate between the 
            highest and lowest original data point and the first (above or below) additional evaluation 
            point.</param><param name="forward">The number of additional evaluation points which are evaluated above 
            the x-coordinates of the original given data set.</param><param name="backward">The number of additional evaluation points which are evaluated below 
            the x-coordinates of the original given data set.</param><returns>A series where the k-th element of the array represents of k-th point 
            (i.e. { x_k, y_k }) of the total set over which the fitted function is evaluated.
            The total set over which the fitted function is evaluated consists of the `backward' points,
            original data set points and the `forward' points.  
            <p><b>Remark:</b> This methods corresponds in functionality to the method of the same 
            name within Microsoft Excel.</p></returns></member><member name="M:dotnetCHARTING.ForecastEngine.TrendLinePower(System.String,dotnetCHARTING.Series)"><summary>
            Find the best fit for the function f(x) = A * pow (x, B ) where B = b and A = pow(e, a).
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param></member><member name="M:dotnetCHARTING.ForecastEngine.TrendLinePower(dotnetCHARTING.Series)"><summary>
            Find the best fit for the function f(x) = A * pow (x, B ) where B = b and A = pow(e, a).
            </summary><param name="s">A statistical series.</param></member><member name="M:dotnetCHARTING.ForecastEngine.TrendLinePower(dotnetCHARTING.SeriesCollection)"><summary>
            Find the best fit for the function f(x) = A * pow (x, B ) where B = b and A = pow(e, a).
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param></member><member name="M:dotnetCHARTING.ForecastEngine.TrendLinePower(System.String,dotnetCHARTING.Series,System.Double,System.Int32,System.Int32)"><summary>
            Find the best fit for the function f(x) = A * pow (x, B ) where B = b and A = pow(e, a).
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><param name="step">The distance in the x-coordinate between two adjacent extended points. 
            Please note that this also corresponds to the distance in the x-coordinate between the 
            highest and lowest original data point and the first (above or below) additional evaluation 
            point.</param><param name="forward">The number of additional evaluation points which are evaluated above 
            the x-coordinates of the original given data set.</param><param name="backward">The number of additional evaluation points which are evaluated below 
            the x-coordinates of the original given data set.</param><returns>A series where the k-th element of the array represents of k-th point 
            (i.e. { x_k, y_k }) of the total set over which the fitted function is evaluated.
            The total set over which the fitted function is evaluated consists of the `backward' points,
            original data set points and the `forward' points.  </returns>&gt;
        </member><member name="M:dotnetCHARTING.ForecastEngine.TrendLinePower(dotnetCHARTING.Series,System.Double,System.Int32,System.Int32)"><summary>
            Find the best fit for the function f(x) = A * pow (x, B ) where B = b and A = pow(e, a).
            </summary><param name="s">A statistical series.</param><param name="step">The distance in the x-coordinate between two adjacent extended points. 
            Please note that this also corresponds to the distance in the x-coordinate between the 
            highest and lowest original data point and the first (above or below) additional evaluation 
            point.</param><param name="forward">The number of additional evaluation points which are evaluated above 
            the x-coordinates of the original given data set.</param><param name="backward">The number of additional evaluation points which are evaluated below 
            the x-coordinates of the original given data set.</param><returns>A series where the k-th element of the array represents of k-th point 
            (i.e. { x_k, y_k }) of the total set over which the fitted function is evaluated.
            The total set over which the fitted function is evaluated consists of the `backward' points,
            original data set points and the `forward' points.
            </returns></member><member name="M:dotnetCHARTING.ForecastEngine.TrendLinePower(dotnetCHARTING.SeriesCollection,System.Double,System.Int32,System.Int32)"><summary>
            Find the best fit for the function f(x) = A * pow (x, B ) where B = b and A = pow(e, a).
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="step">The distance in the x-coordinate between two adjacent extended points. 
            Please note that this also corresponds to the distance in the x-coordinate between the 
            highest and lowest original data point and the first (above or below) additional evaluation 
            point.</param><param name="forward">The number of additional evaluation points which are evaluated above 
            the x-coordinates of the original given data set.</param><param name="backward">The number of additional evaluation points which are evaluated below 
            the x-coordinates of the original given data set.</param><returns>A series where the k-th element of the array represents of k-th point 
            (i.e. { x_k, y_k }) of the total set over which the fitted function is evaluated.
            The total set over which the fitted function is evaluated consists of the `backward' points,
            original data set points and the `forward' points.
            </returns></member><member name="M:dotnetCHARTING.ForecastEngine.TrendLineExponential(System.String,dotnetCHARTING.Series)"><summary>
            Find the best fit for the function f(x) = A * pow(e, B*x ) where B = b and A = exp( a).
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param></member><member name="M:dotnetCHARTING.ForecastEngine.TrendLineExponential(dotnetCHARTING.Series)"><summary>
            Find the best fit for the function f(x) = A * pow(e, B*x ) where B = b and A = exp( a).
            </summary><param name="s">A statistical series.</param></member><member name="M:dotnetCHARTING.ForecastEngine.TrendLineExponential(dotnetCHARTING.SeriesCollection)"><summary>
            Find the best fit for the function f(x) = A * pow(e, B*x ) where B = b and A = exp( a).
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param></member><member name="M:dotnetCHARTING.ForecastEngine.TrendLineExponential(System.String,dotnetCHARTING.Series,System.Double,System.Int32,System.Int32)"><summary>
            Find the best fit for the function f(x) = A * pow(e, B*x ) where B = b and A = exp( a).
            </summary><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><param name="step">The distance in the x-coordinate between two adjacent extended points. 
            Please note that this also corresponds to the distance in the x-coordinate between the 
            highest and lowest original data point and the first (above or below) additional evaluation 
            point.</param><param name="forward">The number of additional evaluation points which are evaluated above 
            the x-coordinates of the original given data set.</param><param name="backward">The number of additional evaluation points which are evaluated below 
            the x-coordinates of the original given data set.</param><returns>A series where the k-th element of the array represents of k-th point 
            (i.e. { x_k, y_k }) of the total set over which the fitted function is evaluated.
            The total set over which the fitted function is evaluated consists of the `backward' points,
            original data set points and the `forward' points.
            </returns></member><member name="M:dotnetCHARTING.ForecastEngine.TrendLineExponential(dotnetCHARTING.Series,System.Double,System.Int32,System.Int32)"><summary>
            Find the best fit for the function f(x) = A * pow(e, B*x ) where B = b and A = exp( a).
            </summary><param name="s">A statistical series.</param><param name="step">The distance in the x-coordinate between two adjacent extended points. 
            Please note that this also corresponds to the distance in the x-coordinate between the 
            highest and lowest original data point and the first (above or below) additional evaluation 
            point.</param><param name="forward">The number of additional evaluation points which are evaluated above 
            the x-coordinates of the original given data set.</param><param name="backward">The number of additional evaluation points which are evaluated below 
            the x-coordinates of the original given data set.</param><returns>A series where the k-th element of the array represents of k-th point 
            (i.e. { x_k, y_k }) of the total set over which the fitted function is evaluated.
            The total set over which the fitted function is evaluated consists of the `backward' points,
            original data set points and the `forward' points.
            </returns></member><member name="M:dotnetCHARTING.ForecastEngine.TrendLineExponential(dotnetCHARTING.SeriesCollection,System.Double,System.Int32,System.Int32)"><summary>
            Find the best fit for the function f(x) = A * pow(e, B*x ) where B = b and A = exp( a).
            </summary><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="step">The distance in the x-coordinate between two adjacent extended points. 
            Please note that this also corresponds to the distance in the x-coordinate between the 
            highest and lowest original data point and the first (above or below) additional evaluation 
            point.</param><param name="forward">The number of additional evaluation points which are evaluated above 
            the x-coordinates of the original given data set.</param><param name="backward">The number of additional evaluation points which are evaluated below 
            the x-coordinates of the original given data set.</param><returns>A series where the k-th element of the array represents of k-th point 
            (i.e. { x_k, y_k }) of the total set over which the fitted function is evaluated.
            The total set over which the fitted function is evaluated consists of the `backward' points,
            original data set points and the `forward' points.
            </returns></member><member name="M:dotnetCHARTING.ForecastEngine.TrendLinePolynomial(System.String,dotnetCHARTING.Series,System.Int32)"><summary>
            Fits a polynomial of a given degree to a data set in accordance with the 
            least squares approach and returned the values of the fitted function over 
            the same range of the x-coordinate as the given data set.
            </summary><remarks>
            For example, if we fit a polynomial of degree 2, then we fit the quadratic polynomial 
            (i.e. f(x) = a_0 + a_1 x + a_2 x^2); similarly if we fit a polynomial of degree 3, 
            then we fit the cubic polynomial (i.e. f(x) = a_0 + a_1 x + a_2 x^2 + a_3 x^3).
            </remarks><param name="seriesName">The name of the series which will be displayed on the chart, 
            i.e. its label.</param><param name="s">A statistical series.</param><param name="degree">The degree of the polynomial which is fitted to the data set given (i.e. if degree is 2, then a quadratic is fitted).</param><seealso cref="M:dotnetCHARTING.ForecastEngine.TrendLinePolynomial(System.String,dotnetCHARTING.Series,System.Int32,System.Double,System.Int32,System.Int32)">
            Allows the values of the fitted function to be evaluated over an extended range.
             That is, a range in the x-coordinate greater than the original given data set.</seealso></member><member name="M:dotnetCHARTING.ForecastEngine.TrendLinePolynomial(dotnetCHARTING.Series,System.Int32)"><summary>
            Fits a polynomial of a given degree to a data set in accordance with the 
            least squares approach and returned the values of the fitted function over 
            the same range of the x-coordinate as the given data set.
            </summary><remarks>
            For example, if we fit a polynomial of degree 2, then we fit the quadratic polynomial 
            (i.e. f(x) = a_0 + a_1 x + a_2 x^2); similarly if we fit a polynomial of degree 3, 
            then we fit the cubic polynomial (i.e. f(x) = a_0 + a_1 x + a_2 x^2 + a_3 x^3).
            </remarks><param name="s">A statistical series.</param><param name="degree">The degree of the polynomial which is fitted to the data set given 
            (i.e. if degree is 2, then a quadratic is fitted).</param><seealso cref="M:dotnetCHARTING.ForecastEngine.TrendLinePolynomial(System.String,dotnetCHARTING.Series,System.Int32,System.Double,System.Int32,System.Int32)">
            Allows the values of the fitted function to be evaluated over an extended range.
             That is, a range in the x-coordinate greater than the original given data set.</seealso></member><member name="M:dotnetCHARTING.ForecastEngine.TrendLinePolynomial(dotnetCHARTING.SeriesCollection,System.Int32)"><summary>
            Fits a polynomial of a given degree to a data set in accordance with the 
            least squares approach and returned the values of the fitted function over 
            the same range of the x-coordinate as the given data set.
            </summary><remarks>
            For example, if we fit a polynomial of degree 2, then we fit the quadratic polynomial 
            (i.e. f(x) = a_0 + a_1 x + a_2 x^2); similarly if we fit a polynomial of degree 3, 
            then we fit the cubic polynomial (i.e. f(x) = a_0 + a_1 x + a_2 x^2 + a_3 x^3).
            </remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="degree">The degree of the polynomial which is fitted to the data set given 
            (i.e. if degree is 2, then a quadratic is fitted).</param><seealso cref="M:dotnetCHARTING.ForecastEngine.TrendLinePolynomial(System.String,dotnetCHARTING.Series,System.Int32,System.Double,System.Int32,System.Int32)">
            Allows the values of the fitted function to be evaluated over an extended range.
             That is, a range in the x-coordinate greater than the original given data set.</seealso></member><member name="M:dotnetCHARTING.ForecastEngine.TrendLinePolynomial(System.String,dotnetCHARTING.Series,System.Int32,System.Double,System.Int32,System.Int32)"><summary>
            Fits a polynomial of a given degree to a data set in accordance with the least squares 
            approach and returns the value of the fitted function over an extended (i.e. above, 
            below or both) range of the x-coordinate values of the given data set.
            </summary><remarks>
            For example, if we fit a polynomial of degree 2, then we fit the quadratic polynomial 
            (i.e. f(x) = a_0 + a_1 x + a_2 x^2); similarly if we fit a polynomial of degree 3, 
            then we fit the cubic polynomial (i.e. f(x) = a_0 + a_1 x + a_2 x^2 + a_3 x^3).
            
            <p><b>Remark:</b> The difference between this method and
             <see cref="M:dotnetCHARTING.ForecastEngine.TrendLinePolynomial(System.String,dotnetCHARTING.Series,System.Int32)"></see>,
            is that it allows the values of the fitted function to be evaluated over an extended range.
            That is, a range in the x-coordinate greater than the original given data set.</p><h3>Where the extended values are evaluated?</h3><p>The parameters <c>step</c>, <c>forward</c>, <c>backward</c> allows the position 
            and number of additional points above and/or below the range of the values in the 
            x-coordinate of the original data set to be given. The <c>forward</c> parameter specifies 
            the number of the additional evaluation points of the fitted function which are greater 
            than the values of the x-coordinates of the original data set. Similarly, the
            <c>backward</c> parameter specifies the number of the additional evaluation points of the 
            fitted function which are lower than the values of the x-coordinates of the original 
            data set. The <c>step</c> specifies the distance in the x-coordinate between each of the 
            additional data points, where the first additional data point either above or below is 
            exactly a distance of <c>step</c> from the points of the original data set
            which the highest and lowest values in the x-coordinate.</p><p>For example, consider the data set <c>x = 1, 2, 3</c>; <c>y = 1, 2, 3</c>. Now if
            <c>step = 1</c>, <c>forward = 2</c>, and <c>backward = 3</c>, then this method when applied
            will return a two dimensional array. This two dimensional array will have the following 
            structure: <c>{ { -2, f(-2) } { -1, f(-1) } { 0, f(0) }{ 1, 1 } { 2, 2 }{ 3, 3 } { 4, f(4) } { 5, f(5) } }</c>,
            where <c>f(-2), f(-1), f(0), f(4), f(5)</c> correspond to the value of the fitted functions at the
            points <c>x = -2, -1, 0, 4, 5</c>, respectively.</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><param name="degree">The degree of the polynomial which is fitted to the data set 
            given (i.e. if degree is 2, then a quadratic is fitted).</param><param name="step">The distance in the x-coordinate between two adjacent extended points. 
            Please note that this also corresponds to the distance in the x-coordinate between the 
            highest and lowest original data point and the first (above or below) additional evaluation 
            point.</param><param name="forward">The number of additional evaluation points which are evaluated above 
            the x-coordinates of the original given data set.</param><param name="backward">The number of additional evaluation points which are evaluated below 
            the x-coordinates of the original given data set.</param><returns>A series where the k-th element of the array represents of k-th point 
            (i.e. { x_k, y_k }) of the total set over which the fitted function is evaluated.
            The total set over which the fitted function is evaluated consists of the `backward' points,
            original data set points and the `forward' points.
            <p><b>Remark:</b> This methods corresponds in functionality to the method of the same 
            name within Microsoft Excel.</p></returns></member><member name="M:dotnetCHARTING.ForecastEngine.TrendLinePolynomial(dotnetCHARTING.Series,System.Int32,System.Double,System.Int32,System.Int32)"><summary>
            Fits a polynomial of a given degree to a data set in accordance with the least squares 
            approach and returns the value of the fitted function over an extended (i.e. above, 
            below or both) range of the x-coordinate values of the given data set.
            </summary><remarks>
            For example, if we fit a polynomial of degree 2, then we fit the quadratic polynomial 
            (i.e. f(x) = a_0 + a_1 x + a_2 x^2); similarly if we fit a polynomial of degree 3, 
            then we fit the cubic polynomial (i.e. f(x) = a_0 + a_1 x + a_2 x^2 + a_3 x^3).
            
            <p><b>Remark:</b> The difference between this method and
             <see cref="M:dotnetCHARTING.ForecastEngine.TrendLinePolynomial(System.String,dotnetCHARTING.Series,System.Int32)"></see>,
            is that it allows the values of the fitted function to be evaluated over an extended range.
            That is, a range in the x-coordinate greater than the original given data set.</p><h3>Where the extended values are evaluated?</h3><p>The parameters <c>step</c>, <c>forward</c>, <c>backward</c> allows the position 
            and number of additional points above and/or below the range of the values in the 
            x-coordinate of the original data set to be given. The <c>forward</c> parameter specifies 
            the number of the additional evaluation points of the fitted function which are greater 
            than the values of the x-coordinates of the original data set. Similarly, the
            <c>backward</c> parameter specifies the number of the additional evaluation points of the 
            fitted function which are lower than the values of the x-coordinates of the original 
            data set. The <c>step</c> specifies the distance in the x-coordinate between each of the 
            additional data points, where the first additional data point either above or below is 
            exactly a distance of <c>step</c> from the points of the original data set
            which the highest and lowest values in the x-coordinate.</p><p>For example, consider the data set <c>x = 1, 2, 3</c>; <c>y = 1, 2, 3</c>. Now if
            <c>step = 1</c>, <c>forward = 2</c>, and <c>backward = 3</c>, then this method when applied
            will return a two dimensional array. This two dimensional array will have the following 
            structure: <c>{ { -2, f(-2) } { -1, f(-1) } { 0, f(0) }{ 1, 1 } { 2, 2 }{ 3, 3 } { 4, f(4) } { 5, f(5) } }</c>,
            where <c>f(-2), f(-1), f(0), f(4), f(5)</c> correspond to the value of the fitted functions at the
            points <c>x = -2, -1, 0, 4, 5</c>, respectively.</p></remarks><param name="s">A statistical series.</param><param name="degree">The degree of the polynomial which is fitted to the data set given 
            (i.e. if degree is 2, then a quadratic is fitted).</param><param name="step">The distance in the x-coordinate between two adjacent extended points. 
            Please note that this also corresponds to the distance in the x-coordinate between the 
            highest and lowest original data point and the first (above or below) additional evaluation 
            point.</param><param name="forward">The number of additional evaluation points which are evaluated above 
            the x-coordinates of the original given data set.</param><param name="backward">The number of additional evaluation points which are evaluated below 
            the x-coordinates of the original given data set.</param><returns>A series where the k-th element of the array represents of k-th point 
            (i.e. { x_k, y_k }) of the total set over which the fitted function is evaluated.
            The total set over which the fitted function is evaluated consists of the `backward' points,
            original data set points and the `forward' points.
            <p><b>Remark:</b> This methods corresponds in functionality to the method of the same 
            name within Microsoft Excel.</p></returns></member><member name="M:dotnetCHARTING.ForecastEngine.TrendLinePolynomial(dotnetCHARTING.SeriesCollection,System.Int32,System.Double,System.Int32,System.Int32)"><summary>
            Fits a polynomial of a given degree to a data set in accordance with the least squares 
            approach and returns the value of the fitted function over an extended (i.e. above, 
            below or both) range of the x-coordinate values of the given data set.
            </summary><remarks>
            For example, if we fit a polynomial of degree 2, then we fit the quadratic polynomial 
            (i.e. f(x) = a_0 + a_1 x + a_2 x^2); similarly if we fit a polynomial of degree 3, 
            then we fit the cubic polynomial (i.e. f(x) = a_0 + a_1 x + a_2 x^2 + a_3 x^3).
            
            <p><b>Remark:</b> The difference between this method and
             <see cref="M:dotnetCHARTING.ForecastEngine.TrendLinePolynomial(System.String,dotnetCHARTING.Series,System.Int32)"></see>,
            is that it allows the values of the fitted function to be evaluated over an extended range.
            That is, a range in the x-coordinate greater than the original given data set.</p><h3>Where the extended values are evaluated?</h3><p>The parameters <c>step</c>, <c>forward</c>, <c>backward</c> allows the position 
            and number of additional points above and/or below the range of the values in the 
            x-coordinate of the original data set to be given. The <c>forward</c> parameter specifies 
            the number of the additional evaluation points of the fitted function which are greater 
            than the values of the x-coordinates of the original data set. Similarly, the
            <c>backward</c> parameter specifies the number of the additional evaluation points of the 
            fitted function which are lower than the values of the x-coordinates of the original 
            data set. The <c>step</c> specifies the distance in the x-coordinate between each of the 
            additional data points, where the first additional data point either above or below is 
            exactly a distance of <c>step</c> from the points of the original data set
            which the highest and lowest values in the x-coordinate.</p><p>For example, consider the data set <c>x = 1, 2, 3</c>; <c>y = 1, 2, 3</c>. Now if
            <c>step = 1</c>, <c>forward = 2</c>, and <c>backward = 3</c>, then this method when applied
            will return a two dimensional array. This two dimensional array will have the following 
            structure: <c>{ { -2, f(-2) } { -1, f(-1) } { 0, f(0) }{ 1, 1 } { 2, 2 }{ 3, 3 } { 4, f(4) } { 5, f(5) } }</c>,
            where <c>f(-2), f(-1), f(0), f(4), f(5)</c> correspond to the value of the fitted functions at the
            points <c>x = -2, -1, 0, 4, 5</c>, respectively.</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="degree">The degree of the polynomial which is fitted to the data set given 
            (i.e. if degree is 2, then a quadratic is fitted).</param><param name="step">The distance in the x-coordinate between two adjacent extended points. 
            Please note that this also corresponds to the distance in the x-coordinate between the 
            highest and lowest original data point and the first (above or below) additional evaluation 
            point.</param><param name="forward">The number of additional evaluation points which are evaluated above 
            the x-coordinates of the original given data set.</param><param name="backward">The number of additional evaluation points which are evaluated below 
            the x-coordinates of the original given data set.</param><returns>A series where the k-th element of the array represents of k-th point 
            (i.e. { x_k, y_k }) of the total set over which the fitted function is evaluated.
            The total set over which the fitted function is evaluated consists of the `backward' points,
            original data set points and the `forward' points.
            <p><b>Remark:</b> This methods corresponds in functionality to the method of the same 
            name within Microsoft Excel.</p></returns></member><member name="T:dotnetCHARTING.ForecastEngine.Options"><summary>
            Defines a set of static options used with FinancialEngine calculations.
            </summary></member><member name="M:dotnetCHARTING.ForecastEngine.Options.AddConstantTerm(System.Double)"><summary>
            Adds a constant function on one real variable to the function basis.
            </summary><remarks>
            The constant function takes the form:
            
            <p><c>f(x) = constant</c></p><p>where <c>x</c> is the variable and <c>constant</c> is a real number.</p></remarks><param name="constant">The constant value taken by the constant function.</param></member><member name="M:dotnetCHARTING.ForecastEngine.Options.AddNonLinearConstantTerm(System.Double)"><summary>
            Adds a (linear) constant function on one real variable to the function basis.
            </summary><remarks>
            The constant
             function takes the form:
            
             <p><c>f(x, a_1) = a_1 * constant</c></p><p>where <c>a_1</c> is a real variable and <c>constant</c> is a real number
             given.</p></remarks><param name="constant">The constant value taken by the constant function.</param></member><member name="M:dotnetCHARTING.ForecastEngine.Options.AddSumOfPowerTerms(System.Double[],System.Double[])"><summary>
            Adds a sum of power terms as an element of the function basis.
            </summary><remarks>
            The sum of power terms will take the follow form:
            
            <p><c>(a_1 * x^n_1) + ... + (a_m * x^n_p)</c>,</p><p>where <c>a_1,..., a_n, n_1,..., n_p</c> are arbitrary real numbers.</p></remarks><param name="powerTermCoeff">An array where the k-th term is the coefficient of the (k+1)-th term of the sum of power terms (i.e. <c>a_k</c>).</param><param name="powerTermExponents">An array where the k-th term is the exponent and the variable of the (k+1)-th power term (i.e. <c>n_k</c>).</param></member><member name="M:dotnetCHARTING.ForecastEngine.Options.AddPowerTerm(System.Double,System.Double)"><summary>
            Add a power term as an element of the function basis.
            </summary><remarks>
            This elements will take the follow form:
            
             <p><c>a_1 * x^n</c>,</p><p>where <c>a_1, n</c> are arbitrary real numbers.</p></remarks><param name="coefficient">A double which is the coefficient of the term (i.e. <c>a_1</c> above).</param><param name="exponent">A double which is the exponent of the variable of the term (i.e. <c>n</c> above).</param></member><member name="M:dotnetCHARTING.ForecastEngine.Options.AddSumOfNonLinearPowerTerms(System.Double[],System.Double[])"><summary>
            Adds a sum of power terms as an element of the function basis.
            </summary><remarks>
            The sum of
             power terms will take the follow form:
            
             <p><c>f(x, a_1,..., a_n, a'_1,..., a'_n) = (b_1 * a_1 * x^(p_1 * a'_1)) + ... + (b_n * a_n x^(p_n * a'_n))</c>,</p><p>where <c>b_1,..., b_n, p_1,..., p_n</c> are arbitrary real numbers and
             <c>x</c> and <c>a_1,..., a_n, a'_1, ..., a'_n</c> are rael varibles.</p><p><b>Remark:</b> This term is a direct generalization of the sum of poqwer terms as contained
             within the Linear Factor model.</p><h3>Ordering of the Variables</h3></remarks>&gt;
            <param name="powerTermCoeff">An array where the k-th term is the coefficient of the (k+1)-th term of the sum of power terms (i.e. <c>a_k</c>).</param><param name="powerTermExponents">An array where the k-th term is the exponent and the variable of the (k+1)-th power term (i.e. <c>n_k</c>).</param></member><member name="M:dotnetCHARTING.ForecastEngine.Options.AddRationalSumOfPowerTerms(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Adds a rational expression where the numerator and denominator are both themselves a sum of power 
            terms as defined within <see cref="M:dotnetCHARTING.ForecastEngine.Options.AddSumOfPowerTerms(System.Double[],System.Double[])"></see> to the function basis.
            </summary><remarks>
            That is, the rational sum of the power terms takes the form:
            
            <p><c>( (a_1 * x^n_1) + ... + (a_p * x^n_p) ) / ( (b_1 * x^m_1) + ... + (b_q * x^m_q) )</c>,</p><p>where <c>a_1,..., a_n, n_1,..., n_p, b_1,..., b_q</c> are real numbers and <c>x</c>
            is the real variable.</p></remarks><param name="upperRationalCoeff">An array where the k-th term is the coefficient of the (k+1)-th term of the sum of power terms (i.e. <c>a_k</c>) which make up the numerator.</param><param name="upperRationalExp">An array where the k-th term is the exponent and the variable of the (k+1)-th power term (i.e. <c>n_k</c>) which make up the numerator.</param><param name="lowerRationalCoeff">An array where the k-th term is the coefficient of the (k+1)-th term of the sum of power terms (i.e. <c>b_k</c>) which make up the denominator.</param><param name="lowerRationalExp">An array where the k-th term is the exponent and the variable of the (k+1)-th power term (i.e. <c>m_k</c>) which make up the denominator.</param></member><member name="M:dotnetCHARTING.ForecastEngine.Options.AddCosineSum(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Adds a sum a Cosine functions to an elements of the function basis.
            </summary><remarks>
            Please note that
            the k-th term of the sum which makes up the basis function will take to form:
            
            <p>k-th Term = <c>a_k * (Cos<sup>n_k</sup> (b_k * x + c_k))</c>,</p><p>where the Cosine function is in terms of radians, and <c>a_k, n_k, b_k, c_k</c>
            are real numbers. Please, in order to construct the sum you just sum over <c>k</c>
            starting at <c>0</c>.</p><h3>Notes on the Radian measure</h3><p>Radians are a means by which to describe the angle and are related to the more commonly
            used degrees as follows:<br></br><br></br><c>360</c> degrees <c>= 2 * Pi * radians</c><br></br><br></br>
            therefore, <c>1</c> radian <c>= 180 / Pi </c> degrees <c>= 57.295...</c> degrees.</p></remarks><param name="cosCoeff">An array where the k-th term is the coefficient of the (k+1)-th term of the sum of Cosine terms (i.e. <c>a_k</c>).</param><param name="coefficient">An array where the k-th term is the coefficient of the Cosine term of the (k+1)-th term of the sum of the Cosine terms (i.e. <c>b_k</c>).</param><param name="constant">An array where the k-th term is the constant shift in the x-axis of the Cosine term of the (k+1)-th term of the sum of Cosine terms (i.e. <c>c_k</c>).</param><param name="exponent">An array where the k-th term is the exponent of the Cosine term within the (k+1)-th term of the sum of the Cosine terms (i.e. <c>n_k</c>).</param></member><member name="M:dotnetCHARTING.ForecastEngine.Options.AddNonLinearCosineSum(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Adds a sum a Cosine functions as an element of the function basis.
            </summary><remarks>
            Please note that
             the k-th term of the sum which makes up the basis function will take to form:
            
             <p>k-th Term = <c>r_k * a_(4k) * (Cos<sup>n_k + a_(4k+1)</sup> (b_k * a_(4k+2) * x + c_k + a_(4k+3)))</c>, (*)</p><p>where the Cosine function is in terms of radians, and <c>r_k, n_k, b_k, c_k</c>
             are real numbers which are given by the parameters and <c>a_(4k), a_(4k+1), a_(4k+2), a_(4k+3),
             a_(4k+4)</c>, are the variables which are to be fitted. In order to construct the sum you just sum
             over <c>k</c> starting at <c>0</c>. That is, the term from which the basis elements will
             be constructed is:</p><p><c>f(x, a_0, ..., a_4, ...., a_(4n+3)) = (sum of k of n-terms given by (*) above)</c>,</p><p>where <c>a_0,....., a_(4n+3)</c> are the variables of the function which are to be fitted,
             and <c>x</c> is the variable which will not be fitted.</p><h3>Example</h3><p>In order to clarify the above explanation we provide an explicit example. In particular, in order
             to represent the following sum of cosine terms:</p><p><c>f(x, a_0, a_1, ..., a_7) = a_0 * Cos<sup>2 * a_1</sup> (b_0 * a_2 * x + a_3) + a_4 * Cos<sup>(1 * a_5)</sup> (b_1 * a_6 * x + 2 + a_7)</c>,</p><p>you are required to pass the following parameters:</p><h3>Notes on the Radian measure</h3><p>Radians are a means by which to describe the angle and are related to the more commonly
             used degrees as follows:<br></br><br></br><c>360</c> degrees <c>= 2 * Pi * radians</c><br></br><br></br>
             therefore, <c>1</c> radian <c>= 180 / Pi </c> degrees <c>= 57.295...</c> degrees.</p></remarks><param name="cosCoeff">An array where the k-th term is the coefficient of the (k+1)-th term of the sum of Cosine terms (i.e. <c>a_k</c>).</param><param name="coefficient">An array where the k-th term is the coefficient of the Cosine term of the (k+1)-th term of the sum of the Cosine terms (i.e. <c>b_k</c>).</param><param name="constant">An array where the k-th term is the constant shift in the x-axis of the Cosine term of the (k+1)-th term of the sum of Cosine terms (i.e. <c>c_k</c>).</param><param name="exponent">An array where the k-th term is the exponent of the Cosine term within the (k+1)-th term of the sum of the Cosine terms (i.e. <c>n_k</c>).</param></member><member name="M:dotnetCHARTING.ForecastEngine.Options.AddSineSum(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Adds a sum of Sine functions to the used as basis elements.
            </summary><remarks>
            Please note that each term of the sum which makes up the basis function will take to form:
            
            <p><c>sinCoeff * (sin<sup>n</sup> (coefficient * x + constant))</c>,</p><p>where the Sine function is in terms of radians.</p><h3>Notes on the Radian measure</h3><p>Radians are a means by which to describe the angle and are related to the
            more commonly used degrees as follows:<br></br><br></br>
            360 degrees = 2 * Pi * radians<br></br><br></br>
            therefore, 1 radian = 180 / Pi degrees = 57.295... degrees.</p></remarks><param name="sinCoeff">An array where the k-th term is the coefficient of the whole k-th cosine term within the sum.</param><param name="coefficient">An array where the k-th term is the coefficient of the variable within the k-th sine term within the sum (i.e. <c>coefficient</c> as shown above).</param><param name="constant">An array where the k-th term is the constant shift of the sine function of the k-th term within the sum (i.e. the <c>constant</c> term as shown above).</param><param name="exponent">An array where the k-th term is the exponent of the sine term within the k-th element of the sum (i.e. <c>n</c> as shown above).</param></member><member name="M:dotnetCHARTING.ForecastEngine.Options.AddNonLinearSineSum(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Adds a sum of Sine functions to the used as non-linear basis elements.
            </summary><remarks>
            Please note that each term of the sum which makes up the basis function will take to form:
            
            <p><c>sinCoeff * (sin<sup>n</sup> (coefficient * x + constant))</c>,</p><p>where the Sine function is in terms of radians.</p><h3>Notes on the Radian measure</h3><p>Radians are a means by which to describe the angle and are related to the
            more commonly used degrees as follows:<br></br><br></br>
            360 degrees = 2 * Pi * radians<br></br><br></br>
            therefore, 1 radian = 180 / Pi degrees = 57.295... degrees.</p></remarks><param name="sinCoeff">An array where the k-th term is the coefficient of the whole k-th cosine term within the sum.</param><param name="coefficient">An array where the k-th term is the coefficient of the variable within the k-th sine term within the sum (i.e. <c>coefficient</c> as shown above).</param><param name="constant">An array where the k-th term is the constant shift of the sine function of the k-th term within the sum (i.e. the <c>constant</c> term as shown above).</param><param name="exponent">An array where the k-th term is the exponent of the sine term within the k-th element of the sum (i.e. <c>n</c> as shown above).</param></member><member name="M:dotnetCHARTING.ForecastEngine.Options.AddTangentSum(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Adds a sum of Tangent functions to the used as basis elements.
            </summary><remarks>
            Please note that each term of the cum which makes up the basis function will take to form:
            
            <p><c>tanCoeff * (tan<sup>n</sup> (coefficient * x + constant))</c>,</p><p>where the Tangent function is in terms of radians.</p><h3>Notes on the Radian measure</h3><p>Radians are a means by which to describe the angle and are related to the
            more commonly used degrees as follows:<br></br><br></br>
            360 degrees = 2 * Pi * radians<br></br><br></br>
            therefore, 1 radian = 180 / Pi degrees = 57.295... degrees.</p></remarks><param name="tanCoeff">An array where the k-th term is the coefficient of the whole k-th tangent term within the sum.</param><param name="coefficient">An array where the k-th term is the coefficient of the variable within the k-th tangent term within the sum (i.e. <c>coefficient</c> as shown above).</param><param name="constant">An array where the k-th term is the constant shift of the tangent function of the k-th term within the sum (i.e. the <c>constant</c> term as shown above).</param><param name="exponent">An array where the k-th term is the exponent of the tangent term within the k-th element of the sum (i.e. <c>n</c> as shown above).</param></member><member name="M:dotnetCHARTING.ForecastEngine.Options.AddNonLinearTangentSum(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
             Adds a sum of Tangent functions to the used as non-linear basis elements.
             </summary><remarks>
             Please note that each term of the cum which makes up the basis function will take to form:
             
             <p><c>tanCoeff * (tan<sup>n</sup> (coefficient * x + constant))</c>,</p><p>where the Tangent function is in terms of radians.</p><h3>Notes on the Radian measure</h3><p>Radians are a means by which to describe the angle and are related to the
             more commonly used degrees as follows:<br></br><br></br>
             360 degrees = 2 * Pi * radians<br></br><br></br>
             therefore, 1 radian = 180 / Pi degrees = 57.295... degrees.</p></remarks><param name="tanCoeff">An array where the k-th term is the coefficient of the whole k-th tangent term within the sum.</param><param name="coefficient">An array where the k-th term is the coefficient of the variable within the k-th tangent term within the sum (i.e. <c>coefficient</c> as shown above).</param><param name="constant">An array where the k-th term is the constant shift of the tangent function of the k-th term within the sum (i.e. the <c>constant</c> term as shown above).</param><param name="exponent">An array where the k-th term is the exponent of the tangent term within the k-th element of the sum (i.e. <c>n</c> as shown above).</param></member><member name="M:dotnetCHARTING.ForecastEngine.Options.AddLogarithmicSum(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Adds a sum of (natural) log functions to be used as basis elements.
            </summary><remarks>
            Where each of the elements of the sum given will take the following form:
            
            <p><c>logCoeff * log<sup>n</sup> (coefficient * x + constant))</c></p></remarks><param name="logCoeff">An array where the k-th term is the coefficient of the whole k-th logarithm term within the sum.</param><param name="coefficient">An array where the k-th term is the coefficient of the variable within the k-th logarithm term within the sum (i.e. <c>coefficient</c> as shown above).</param><param name="constant">An array where the k-th term is the constant shift of the logarithm function of the k-th term within the sum (i.e. the <c>constant</c> term as shown above).</param><param name="exponent">An array where the k-th term is the exponent of the logarithm term within the k-th element of the sum (i.e. <c>n</c> as shown above).</param></member><member name="M:dotnetCHARTING.ForecastEngine.Options.AddNonLinearLogarithmicSum(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Adds a sum of (natural) log functions to be used as non-linear basis elements.
            </summary><remarks>
            Where each of the elements of the sum given will take the following form:
            
            <p><c>logCoeff * log<sup>n</sup> (coefficient * x + constant))</c></p></remarks><param name="logCoeff">An array where the k-th term is the coefficient of the whole k-th logarithm term within the sum.</param><param name="coefficient">An array where the k-th term is the coefficient of the variable within the k-th logarithm term within the sum (i.e. <c>coefficient</c> as shown above).</param><param name="constant">An array where the k-th term is the constant shift of the logarithm function of the k-th term within the sum (i.e. the <c>constant</c> term as shown above).</param><param name="exponent">An array where the k-th term is the exponent of the logarithm term within the k-th element of the sum (i.e. <c>n</c> as shown above).</param></member><member name="M:dotnetCHARTING.ForecastEngine.Options.AddExponentialSum(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Adds a sum of exponential functions to be used as basis elements.
            </summary><remarks>
            Where each of the elements of the sum given will take the following form:
            
            <p><c>expCoeff * exp<sup>n</sup> (coefficient * x + constant))</c></p></remarks><param name="expCoeff">An array where the k-th term is the coefficient of the whole k-th exponential term within the sum.</param><param name="coefficient">An array where the k-th term is the coefficient of the variable within the k-th exponential term within the sum (i.e. <c>coefficient</c> as shown above).</param><param name="constant">An array where the k-th term is the constant shift of the exponential function of the k-th term within the sum (i.e. the <c>constant</c> term as shown above).</param><param name="exponent">An array where the k-th term is the exponent of the exponential term within the k-th element of the sum (i.e. <c>n</c> as shown above).</param></member><member name="M:dotnetCHARTING.ForecastEngine.Options.AddNonLinearExponentialSum(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Adds a sum of exponential functions to be used as non-linear basis elements.
            </summary><remarks>
            Where each of the elements of the sum given will take the following form:
            
            <p><c>expCoeff * exp<sup>n</sup> (coefficient * x + constant))</c></p></remarks><param name="expCoeff">An array where the k-th term is the coefficient of the whole k-th exponential term within the sum.</param><param name="coefficient">An array where the k-th term is the coefficient of the variable within the k-th exponential term within the sum (i.e. <c>coefficient</c> as shown above).</param><param name="constant">An array where the k-th term is the constant shift of the exponential function of the k-th term within the sum (i.e. the <c>constant</c> term as shown above).</param><param name="exponent">An array where the k-th term is the exponent of the exponential term within the k-th element of the sum (i.e. <c>n</c> as shown above).</param></member><member name="M:dotnetCHARTING.ForecastEngine.Options.AddAbsoluteSum(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Adds a sum of absolute functions to be used as basis element.
            </summary><remarks>
            Where each of the elements of this sum takes the following form:
            
            <p><c>absCoeff * Abs<sup>n</sup>(coefficient * x + constant)</c></p><p>where the <c>Abs</c> is the absolute functions given by:
            <ol><li><c>Abs(x) = x</c>, if <c>x &gt; 0</c></li><li><c>Abs(x) = -x</c>, if <c>x &lt; 0</c></li></ol></p></remarks><param name="absCoeff">An array where the k-th term is the coefficient of the whole k-th absolute function term within the sum.</param><param name="coefficient">An array where the k-th term is the coefficient of the variable within the k-th absolute function term within the sum (i.e. <c>coefficient</c> as shown above).</param><param name="constant">An array where the k-th term is the constant shift of the absolute function of the k-th term within the sum (i.e. the <c>constant</c> term as shown above).</param><param name="exponent">An array where the k-th term is the exponent of the absolute function term within the k-th element of the sum (i.e. <c>n</c> as shown above).</param></member><member name="M:dotnetCHARTING.ForecastEngine.Options.AddStepSum(System.Double[],System.Double[],System.Double[])"><summary>
            Adds a sum of step functions to be used as a basis element.
            </summary><remarks>
            Where each of the elements of the sum takes the following form:
            
            <p><c>stepCoeff * Step(coefficient * x + constant)</c>,</p><p>where the <c>Step(x)</c> is given by:
            <ol><li><c>Step(x) = 0</c>, if <c>x lequ; 0</c></li><li><c>Step(x) = 1</c>, if <c>x &gt; 0</c></li></ol></p></remarks><param name="stepCoeff">An array where the k-th term is the coefficient of the whole k-th step function term within the sum.</param><param name="coefficient">An array where the k-th term is the coefficient of the variable within the k-th step function term within the sum (i.e. <c>coefficient</c> as shown above).</param><param name="constant">An array where the k-th term is the constant shift of the step function of the k-th term within the sum (i.e. the <c>constant</c> term as shown above).</param></member><member name="M:dotnetCHARTING.ForecastEngine.Options.Reset"><summary>
            Resets the options to default settings.
            </summary></member><member name="P:dotnetCHARTING.ForecastEngine.Options.PopulateSubValues"><summary>
            Gets or sets a static value that determines whether elements derived from series will 
            contain values of the original elements as %dotnetCHARTING.SubValue% objects.
            </summary></member><member name="P:dotnetCHARTING.ForecastEngine.Options.MatchColors"><summary>
            Gets or sets a value that indicates whether calculated elements will use the same colors that are 
            assigned to original series. Both, the original and derived data objects must be placed on the 
            same chart to enable this feature.
            </summary></member><member name="P:dotnetCHARTING.ForecastEngine.Options.ModelFunction"><summary>
            This attribute allows the basis of functions which describes a factor model.
            </summary><remarks>
            A factor model is a real vector space of functions from which a function will 
            be selected in accordance with some criteria. That is, we allow the basis of functions
             <c>f_1(x), f_2(x) , ..., f_n(x)</c>, which span the factor model, i.e. any 
             element of the factor model can be represented as:
            
            <p><c>a_1 * f_1(x) + a_2 * f_2(x) + ... + a_n * f_n(x)</c></p><p>where <c>a_1, ..., a_n</c> are real numbers. Note that the above representation 
            is unique.</p></remarks></member><member name="P:dotnetCHARTING.ForecastEngine.Options.NonLinearModelFunction"><summary>
            This attribute holds the basis of functions which describes a factor model.
            </summary><remarks>
            A factor model is a real vector space of functions from which a function will 
            be selected in accordance with some criteria. That is, we allow the basis 
            of functions <c>f_1, f_2,..., f_n</c>, which span the factor model, i.e. any 
            element of the factor model can be represented as:
            
             <p><c>f_1(x, a_1, ...., a_n) + f_2(x, a'_1,...., a'_n) + ... + f_n(x, a''_1, ....., a''_n)</c></p><p>where <c>x</c> and <c>a_1,..., a_n, a'_1,..., a'_n,..., a''_1,..., a''_n</c> are
             real variables. For example the term <c>f_1(x, a_1, a_2, a_3)</c>, could correspond to:</p><p><c>f_1(x, a_1, a_2, a_3) = a_1 Sin(a_2 x + a_3)</c></p><p>where <c>a_1, a_2, a_3</c>, are the variables which are to be fitted using the
             fitting algorithm.</p><h3>Ordering of the Variables</h3><p>Once the non-linear factor has been built (using this class) and fitted 
             using the the non linear model algorithm, the values of the <c>a_k</c> which 
             generate the best fitted curve in accordance with the least squares approach 
             will be returned within an array. </p></remarks></member><member name="T:dotnetCHARTING.ForecastEngine.Advanced"><summary>
            This class contains advanced methods for calculating the best fitting curve of a data set.
            It allows the user to construct his own function. 
            </summary></member><member name="M:dotnetCHARTING.ForecastEngine.Advanced.GeneralLinear(System.String,dotnetCHARTING.Series,dotnetCHARTING.Series)"><summary>
            Evaluates the greatest likelyhood coefficients of the function of best fit in accordance with the 
            least squares approach for the function basis given.
            </summary><remarks><h3>Further Details</h3><p>In its simplest case this method given a data set <c>(x_i, y_i)</c>, for <c>i=0, ..., m</c>,
            are are able to find the coefficients <c>a_1, ..., a_n</c> such that the function:</p><p><c>f(x) = a_1 * f_1(x) + a_2 * f_2 + ... + x_n * f_n(x)</c></p><p>where <c>f_1,...f_n</c> are the function basis set using SetFunctionBasis method, and the
            function <c>f(x)</c>, is best fit in accordance with the least square approach. That is, coefficients
            are selected such the points <c>(x_i, f(x_i))</c>, for <c>i=1,...,m</c>; are a best fit
            for the given data set <c>(x_i, y_i)</c>, <c>i=1,...,m</c>.</p><h3>Fixing some Coefficients</h3><p>Please note that within this implementation we reserve the right to fix some of the
            coefficients before the function is fitted. In such instances the above described fitting is performed
            with some of the coefficients fixed to the initial value which they are given. The <c>fit</c> parameter
            is used in order to determine which (if any) of the coefficient are kept fixed during the fitting.</p><h3>Measure Errors or Weighted Best Fit</h3><p>In addition as mentioned within the overview of this class you are able to incorporate one of the
            following features when determining the greatest likelyhood coefficients:
            <ol><li><b>Measure Error:</b> You are able to find the greatest likelyhood coefficients when the measure error (i.e.
            the standard deviations of the errors of the observation so the <c>y_i</c>'s). In order to fit the function
            taking into account the measurment error you are required to provide the k-th term of the parameter <c>sigma</c>
            as the measurement error of the <c>y_k</c> (i.e. the value of the y-axis corrdinate of the k-th data point which
            in used within the fitting of the function.
            </li><li><b>Weighted Best Fit:</b> If you wish you are also able to apply this class with the view of finding the
            best weighted fit where the <c>sigma_i</c> corresponds the weight applied to the <c>i</c>-th data point.
            </li></ol></p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><param name="sigma">An array where the k-th term depending on your point of view to one of the following: 
            <ol><li> Measure Error View: is the standard deviation of the value in the y-axis of the k-th data point.</li><li> Weighted Fitting View: is inverse of the weight given to the k-th data point. </li></ol>.
            </param><returns>Returns an array of doubles where the k-th term corresponds to the value of the k-th coefficient within the function of best fit.</returns></member><member name="M:dotnetCHARTING.ForecastEngine.Advanced.GeneralLinear(dotnetCHARTING.Series,dotnetCHARTING.Series)"><summary>
            Evaluates the greatest likelyhood coefficients of the function of best fit in accordance with the 
            least squares approach for the function basis given.
            </summary><remarks><h3>Further Details</h3><p>In its simplest case this method given a data set <c>(x_i, y_i)</c>, for <c>i=0, ..., m</c>,
            are are able to find the coefficients <c>a_1, ..., a_n</c> such that the function:</p><p><c>f(x) = a_1 * f_1(x) + a_2 * f_2 + ... + x_n * f_n(x)</c></p><p>where <c>f_1,...f_n</c> are the function basis set using SetFunctionBasis method, and the
            function <c>f(x)</c>, is best fit in accordance with the least square approach. That is, coefficients
            are selected such the points <c>(x_i, f(x_i))</c>, for <c>i=1,...,m</c>; are a best fit
            for the given data set <c>(x_i, y_i)</c>, <c>i=1,...,m</c>.</p><h3>Fixing some Coefficients</h3><p>Please note that within this implementation we reserve the right to fix some of the
            coefficients before the function is fitted. In such instances the above described fitting is performed
            with some of the coefficients fixed to the initial value which they are given. The <c>fit</c> parameter
            is used in order to determine which (if any) of the coefficient are kept fixed during the fitting.</p><h3>Measure Errors or Weighted Best Fit</h3><p>In addition as mentioned within the overview of this class you are able to incorporate one of the
            following features when determining the greatest likelyhood coefficients:
            <ol><li><b>Measure Error:</b> You are able to find the greatest likelyhood coefficients when the measure error (i.e.
            the standard deviations of the errors of the observation so the <c>y_i</c>'s). In order to fit the function
            taking into account the measurment error you are required to provide the k-th term of the parameter <c>sigma</c>
            as the measurement error of the <c>y_k</c> (i.e. the value of the y-axis corrdinate of the k-th data point which
            in used within the fitting of the function.
            </li><li><b>Weighted Best Fit:</b> If you wish you are also able to apply this class with the view of finding the
            best weighted fit where the <c>sigma_i</c> corresponds the weight applied to the <c>i</c>-th data point.
            </li></ol></p></remarks><param name="s">A statistical series.</param><param name="sigma">An array where the k-th term depending on your point of view to one of the following: 
            <ol><li> Measure Error View: is the standard deviation of the value in the y-axis of the k-th data point.</li><li> Weighted Fitting View: is inverse of the weight given to the k-th data point. </li></ol>.
            </param><returns>Returns an array of doubles where the k-th term corresponds to the value of the k-th coefficient within the function of best fit.</returns></member><member name="M:dotnetCHARTING.ForecastEngine.Advanced.GeneralLinear(dotnetCHARTING.SeriesCollection,dotnetCHARTING.Series)"><summary>
            Evaluates the greatest likelyhood coefficients of the function of best fit in accordance with the 
            least squares approach for the function basis given.
            </summary><remarks><h3>Further Details</h3><p>In its simplest case this method given a data set <c>(x_i, y_i)</c>, for <c>i=0, ..., m</c>,
            are are able to find the coefficients <c>a_1, ..., a_n</c> such that the function:</p><p><c>f(x) = a_1 * f_1(x) + a_2 * f_2 + ... + x_n * f_n(x)</c></p><p>where <c>f_1,...f_n</c> are the function basis set using SetFunctionBasis method, and the
            function <c>f(x)</c>, is best fit in accordance with the least square approach. That is, coefficients
            are selected such the points <c>(x_i, f(x_i))</c>, for <c>i=1,...,m</c>; are a best fit
            for the given data set <c>(x_i, y_i)</c>, <c>i=1,...,m</c>.</p><h3>Fixing some Coefficients</h3><p>Please note that within this implementation we reserve the right to fix some of the
            coefficients before the function is fitted. In such instances the above described fitting is performed
            with some of the coefficients fixed to the initial value which they are given. The <c>fit</c> parameter
            is used in order to determine which (if any) of the coefficient are kept fixed during the fitting.</p><h3>Measure Errors or Weighted Best Fit</h3><p>In addition as mentioned within the overview of this class you are able to incorporate one of the
            following features when determining the greatest likelyhood coefficients:
            <ol><li><b>Measure Error:</b> You are able to find the greatest likelyhood coefficients when the measure error (i.e.
            the standard deviations of the errors of the observation so the <c>y_i</c>'s). In order to fit the function
            taking into account the measurment error you are required to provide the k-th term of the parameter <c>sigma</c>
            as the measurement error of the <c>y_k</c> (i.e. the value of the y-axis corrdinate of the k-th data point which
            in used within the fitting of the function.
            </li><li><b>Weighted Best Fit:</b> If you wish you are also able to apply this class with the view of finding the
            best weighted fit where the <c>sigma_i</c> corresponds the weight applied to the <c>i</c>-th data point.
            </li></ol></p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="sigma">An array where the k-th term depending on your point of view to one of the following: 
            <ol><li> Measure Error View: is the standard deviation of the value in the y-axis of the k-th data point.</li><li> Weighted Fitting View: is inverse of the weight given to the k-th data point. </li></ol>.
            </param><returns>Returns an array of doubles where the k-th term corresponds to the value of the k-th coefficient within the function of best fit.</returns></member><member name="M:dotnetCHARTING.ForecastEngine.Advanced.GeneralLinear(System.String,dotnetCHARTING.Series,dotnetCHARTING.Series,System.Double,System.Double,System.Double)"><summary>
            Evaluates the greatest likelyhood coefficients of the function of best fit in accordance with the 
            least squares approach for the function basis given.
            </summary><remarks><h3>Further Details</h3><p>In its simplest case this method given a data set <c>(x_i, y_i)</c>, for <c>i=0, ..., m</c>,
            are are able to find the coefficients <c>a_1, ..., a_n</c> such that the function:</p><p><c>f(x) = a_1 * f_1(x) + a_2 * f_2 + ... + x_n * f_n(x)</c></p><p>where <c>f_1,...f_n</c> are the function basis set using SetFunctionBasis method, and the
            function <c>f(x)</c>, is best fit in accordance with the least square approach. That is, coefficients
            are selected such the points <c>(x_i, f(x_i))</c>, for <c>i=1,...,m</c>; are a best fit
            for the given data set <c>(x_i, y_i)</c>, <c>i=1,...,m</c>.</p><h3>Fixing some Coefficients</h3><p>Please note that within this implementation we reserve the right to fix some of the
            coefficients before the function is fitted. In such instances the above described fitting is performed
            with some of the coefficients fixed to the initial value which they are given. The <c>fit</c> parameter
            is used in order to determine which (if any) of the coefficient are kept fixed during the fitting.</p><h3>Measure Errors or Weighted Best Fit</h3><p>In addition as mentioned within the overview of this class you are able to incorporate one of the
            following features when determining the greatest likelyhood coefficients:
            <ol><li><b>Measure Error:</b> You are able to find the greatest likelyhood coefficients when the measure error (i.e.
            the standard deviations of the errors of the observation so the <c>y_i</c>'s). In order to fit the function
            taking into account the measurment error you are required to provide the k-th term of the parameter <c>sigma</c>
            as the measurement error of the <c>y_k</c> (i.e. the value of the y-axis corrdinate of the k-th data point which
            in used within the fitting of the function.
            </li><li><b>Weighted Best Fit:</b> If you wish you are also able to apply this class with the view of finding the
            best weighted fit where the <c>sigma_i</c> corresponds the weight applied to the <c>i</c>-th data point.
            </li></ol></p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><param name="sigma">An array where the k-th term depending on your point of view to one of the following: 
            <ol><li> Measure Error View: is the standard deviation of the value in the y-axis of the k-th data point.</li><li> Weighted Fitting View: is inverse of the weight given to the k-th data point. </li></ol>.
            </param><param name="xMin">The XValue of the starting point of the evaluation of best fitting curve.</param><param name="xMax">The XValue of the ending point of the evaluation of best fitting curve.</param><param name="interval">The distance between two points.</param><returns>Returns an array of doubles where the k-th term corresponds to the value of the k-th coefficient within the function of best fit.</returns></member><member name="M:dotnetCHARTING.ForecastEngine.Advanced.GeneralLinear(dotnetCHARTING.Series,dotnetCHARTING.Series,System.Double,System.Double,System.Double)"><summary>
            Evaluates the greatest likelyhood coefficients of the function of best fit in accordance with the 
            least squares approach for the function basis given.
            </summary><remarks><h3>Further Details</h3><p>In its simplest case this method given a data set <c>(x_i, y_i)</c>, for <c>i=0, ..., m</c>,
            are are able to find the coefficients <c>a_1, ..., a_n</c> such that the function:</p><p><c>f(x) = a_1 * f_1(x) + a_2 * f_2 + ... + x_n * f_n(x)</c></p><p>where <c>f_1,...f_n</c> are the function basis set using SetFunctionBasis method, and the
            function <c>f(x)</c>, is best fit in accordance with the least square approach. That is, coefficients
            are selected such the points <c>(x_i, f(x_i))</c>, for <c>i=1,...,m</c>; are a best fit
            for the given data set <c>(x_i, y_i)</c>, <c>i=1,...,m</c>.</p><h3>Fixing some Coefficients</h3><p>Please note that within this implementation we reserve the right to fix some of the
            coefficients before the function is fitted. In such instances the above described fitting is performed
            with some of the coefficients fixed to the initial value which they are given. The <c>fit</c> parameter
            is used in order to determine which (if any) of the coefficient are kept fixed during the fitting.</p><h3>Measure Errors or Weighted Best Fit</h3><p>In addition as mentioned within the overview of this class you are able to incorporate one of the
            following features when determining the greatest likelyhood coefficients:
            <ol><li><b>Measure Error:</b> You are able to find the greatest likelyhood coefficients when the measure error (i.e.
            the standard deviations of the errors of the observation so the <c>y_i</c>'s). In order to fit the function
            taking into account the measurment error you are required to provide the k-th term of the parameter <c>sigma</c>
            as the measurement error of the <c>y_k</c> (i.e. the value of the y-axis corrdinate of the k-th data point which
            in used within the fitting of the function.
            </li><li><b>Weighted Best Fit:</b> If you wish you are also able to apply this class with the view of finding the
            best weighted fit where the <c>sigma_i</c> corresponds the weight applied to the <c>i</c>-th data point.
            </li></ol></p></remarks><param name="s">A statistical series.</param><param name="sigma">An array where the k-th term depending on your point of view to one of the following: 
            <ol><li> Measure Error View: is the standard deviation of the value in the y-axis of the k-th data point.</li><li> Weighted Fitting View: is inverse of the weight given to the k-th data point. </li></ol>.
            </param><param name="xMin">The XValue of the starting point of the evaluation of best fitting curve.</param><param name="xMax">The XValue of the ending point of the evaluation of best fitting curve.</param><param name="interval">The distance between two points.</param><returns>Returns an array of doubles where the k-th term corresponds to the value of the k-th coefficient within the function of best fit.</returns></member><member name="M:dotnetCHARTING.ForecastEngine.Advanced.GeneralLinear(dotnetCHARTING.SeriesCollection,dotnetCHARTING.Series,System.Double,System.Double,System.Double)"><summary>
            Evaluates the greatest likelyhood coefficients of the function of best fit in accordance with the 
            least squares approach for the function basis given.
            </summary><remarks><h3>Further Details</h3><p>In its simplest case this method given a data set <c>(x_i, y_i)</c>, for <c>i=0, ..., m</c>,
            are are able to find the coefficients <c>a_1, ..., a_n</c> such that the function:</p><p><c>f(x) = a_1 * f_1(x) + a_2 * f_2 + ... + x_n * f_n(x)</c></p><p>where <c>f_1,...f_n</c> are the function basis set using SetFunctionBasis method, and the
            function <c>f(x)</c>, is best fit in accordance with the least square approach. That is, coefficients
            are selected such the points <c>(x_i, f(x_i))</c>, for <c>i=1,...,m</c>; are a best fit
            for the given data set <c>(x_i, y_i)</c>, <c>i=1,...,m</c>.</p><h3>Fixing some Coefficients</h3><p>Please note that within this implementation we reserve the right to fix some of the
            coefficients before the function is fitted. In such instances the above described fitting is performed
            with some of the coefficients fixed to the initial value which they are given. The <c>fit</c> parameter
            is used in order to determine which (if any) of the coefficient are kept fixed during the fitting.</p><h3>Measure Errors or Weighted Best Fit</h3><p>In addition as mentioned within the overview of this class you are able to incorporate one of the
            following features when determining the greatest likelyhood coefficients:
            <ol><li><b>Measure Error:</b> You are able to find the greatest likelyhood coefficients when the measure error (i.e.
            the standard deviations of the errors of the observation so the <c>y_i</c>'s). In order to fit the function
            taking into account the measurment error you are required to provide the k-th term of the parameter <c>sigma</c>
            as the measurement error of the <c>y_k</c> (i.e. the value of the y-axis corrdinate of the k-th data point which
            in used within the fitting of the function.
            </li><li><b>Weighted Best Fit:</b> If you wish you are also able to apply this class with the view of finding the
            best weighted fit where the <c>sigma_i</c> corresponds the weight applied to the <c>i</c>-th data point.
            </li></ol></p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="sigma">An array where the k-th term depending on your point of view to one of the following: 
            <ol><li> Measure Error View: is the standard deviation of the value in the y-axis of the k-th data point.</li><li> Weighted Fitting View: is inverse of the weight given to the k-th data point. </li></ol>.
            </param><param name="xMin">The XValue of the starting point of the evaluation of best fitting curve.</param><param name="xMax">The XValue of the ending point of the evaluation of best fitting curve.</param><param name="interval">The distance between two points.</param><returns>Returns an array of doubles where the k-th term corresponds to the value of the k-th coefficient within the function of best fit.</returns></member><member name="M:dotnetCHARTING.ForecastEngine.Advanced.NonLinearModel(System.String,dotnetCHARTING.Series,dotnetCHARTING.Series,System.Double[],System.Boolean[])"><summary>
            Here we offer the Levenberg - Marquardt algorithm which fits a given non-linear 
            function set in accordance with the least squares approach.
            </summary><remarks><p>This examlpe finds the real valued function of best fit, of the type considered
             in accordance with the least squares approach. That is, for the functon f, which
             depends on the parameters (or variables a[]), we find the variables such that:<br></br><br></br>
             E = sum_k {(y[k] - f(x[k],a)) / s[k]}^2
             </p><p>is minimal, where:
             <ol><li> x[] - are the domain points, i.e. the points at which the values of the real
             valued function are evaluated.
             </li><li> y[] - are the values of the data points at the domain values.
             </li><li> a[] - the models parameters, that is the variables which the function which
             is being fitted depends on.
             </li><li> s[] - the scale (or weight) which is applied to each error. That is, s[k] is
             the scale applied the error for the k-th data set point.
             </li></ol></p><p><b>Remark:</b> The implemention of the function interface, implements two
             methods which return the value and the gradient of the function f(x,a), and not
             the functional E given above.</p><h3>Features of the Algorithm</h3><p>The algorithm for the non-linear framework finds the local minimum in
             accordance with the least squares approach. This mean that the initial
             point given from which the minimum is sort lies within the same basin
             of attraction of the global minimum. In practice, this means in
             particularly when a non-linear function with many terms is considered
             that the initial starting point is very carefully chosen. This is not a
             consequence of our implementation but the nature of the algorithm and
             problem at hand. The algorithms is of greedy type and essentially uses
             an abstraction of calculus based methods in which the best point in a
             neighbourhood of a point a chosen at each step.</p><p><b>Remark:</b> As a side note, the reason why the linear algorithm work so well is
             that it is based on a simplex algorithm which is combinatorial in nature.</p></remarks><param name="seriesName">The name of the series which will be displayed on the chart, i.e. its label.</param><param name="s">A statistical series.</param><param name="a">The parameters/state of the model.</param><param name="vary">False to indicate the corresponding <c>modelParameters[k]</c> is to be held fixed.</param><param name="deviations">An array of doubles where the k-th terms corresponding to the weighting given to the model errors associated within the k-th data point.</param></member><member name="M:dotnetCHARTING.ForecastEngine.Advanced.NonLinearModel(dotnetCHARTING.Series,dotnetCHARTING.Series,System.Double[],System.Boolean[])"><summary>
            Here we offer the Levenberg - Marquardt algorithm which fits a given non-linear 
            function set in accordance with the least squares approach.
            </summary><remarks><p>This examlpe finds the real valued function of best fit, of the type considered
             in accordance with the least squares approach. That is, for the functon f, which
             depends on the parameters (or variables a[]), we find the variables such that:<br></br><br></br>
             E = sum_k {(y[k] - f(x[k],a)) / s[k]}^2
             </p><p>is minimal, where:
             <ol><li> x[] - are the domain points, i.e. the points at which the values of the real
             valued function are evaluated.
             </li><li> y[] - are the values of the data points at the domain values.
             </li><li> a[] - the models parameters, that is the variables which the function which
             is being fitted depends on.
             </li><li> s[] - the scale (or weight) which is applied to each error. That is, s[k] is
             the scale applied the error for the k-th data set point.
             </li></ol></p><p><b>Remark:</b> The implemention of the function interface, implements two
             methods which return the value and the gradient of the function f(x,a), and not
             the functional E given above.</p><h3>Features of the Algorithm</h3><p>The algorithm for the non-linear framework finds the local minimum in
             accordance with the least squares approach. This mean that the initial
             point given from which the minimum is sort lies within the same basin
             of attraction of the global minimum. In practice, this means in
             particularly when a non-linear function with many terms is considered
             that the initial starting point is very carefully chosen. This is not a
             consequence of our implementation but the nature of the algorithm and
             problem at hand. The algorithms is of greedy type and essentially uses
             an abstraction of calculus based methods in which the best point in a
             neighbourhood of a point a chosen at each step.</p><p><b>Remark:</b> As a side note, the reason why the linear algorithm work so well is
             that it is based on a simplex algorithm which is combinatorial in nature.</p></remarks><param name="s">A statistical series.</param><param name="a">The parameters/state of the model.</param><param name="vary">False to indicate the corresponding <c>modelParameters[k]</c> is to be held fixed.</param><param name="deviations">An array of doubles where the k-th terms corresponding to the weighting given to the model errors associated within the k-th data point.</param></member><member name="M:dotnetCHARTING.ForecastEngine.Advanced.NonLinearModel(dotnetCHARTING.SeriesCollection,dotnetCHARTING.Series,System.Double[],System.Boolean[])"><summary>
            Here we offer the Levenberg - Marquardt algorithm which fits a given non-linear 
            function set in accordance with the least squares approach.
            </summary><remarks><p>This examlpe finds the real valued function of best fit, of the type considered
             in accordance with the least squares approach. That is, for the functon f, which
             depends on the parameters (or variables a[]), we find the variables such that:<br></br><br></br>
             E = sum_k {(y[k] - f(x[k],a)) / s[k]}^2
             </p><p>is minimal, where:
             <ol><li> x[] - are the domain points, i.e. the points at which the values of the real
             valued function are evaluated.
             </li><li> y[] - are the values of the data points at the domain values.
             </li><li> a[] - the models parameters, that is the variables which the function which
             is being fitted depends on.
             </li><li> s[] - the scale (or weight) which is applied to each error. That is, s[k] is
             the scale applied the error for the k-th data set point.
             </li></ol></p><p><b>Remark:</b> The implemention of the function interface, implements two
             methods which return the value and the gradient of the function f(x,a), and not
             the functional E given above.</p><h3>Features of the Algorithm</h3><p>The algorithm for the non-linear framework finds the local minimum in
             accordance with the least squares approach. This mean that the initial
             point given from which the minimum is sort lies within the same basin
             of attraction of the global minimum. In practice, this means in
             particularly when a non-linear function with many terms is considered
             that the initial starting point is very carefully chosen. This is not a
             consequence of our implementation but the nature of the algorithm and
             problem at hand. The algorithms is of greedy type and essentially uses
             an abstraction of calculus based methods in which the best point in a
             neighbourhood of a point a chosen at each step.</p><p><b>Remark:</b> As a side note, the reason why the linear algorithm work so well is
             that it is based on a simplex algorithm which is combinatorial in nature.</p></remarks><param name="sc">A collection of series objects. For example, to evaluate this indicator for two series 
            you will need to pass a series collection containing this two series.</param><param name="a">The parameters/state of the model.</param><param name="vary">False to indicate the corresponding <c>modelParameters[k]</c> is to be held fixed.</param><param name="deviations">An array of doubles where the k-th terms corresponding to the weighting given to the model errors associated within the k-th data point.</param></member><member name="T:dotnetCHARTING.Forecasting.Line"><summary></summary></member><member name="M:dotnetCHARTING.Forecasting.Line.#ctor"><summary>
            Creates a new Line instance.
            </summary></member><member name="M:dotnetCHARTING.Forecasting.Line.GetConstant"><summary>
            Gets the value of the constant term within the line of best fit, which can be called once the line of est fit has been constructed using <see cref="M:dotnetCHARTING.Forecasting.Line.SetLinearLeastSquares(System.Double[],System.Double[])"></see>.
            </summary><remarks>
            Recall, that the line of best fit takes the form:<br></br><br></br><c>y = Coefficient * x + (Constant Term)</c><br></br><br></br>
            which has been fitted in accordance within the least squares approach.
            </remarks></member><member name="M:dotnetCHARTING.Forecasting.Line.GetCoefficient"><summary>
            Returns the value of the coefficient within the line of best fit, which can be called once the line of est fit has been constructed using <see cref="M:dotnetCHARTING.Forecasting.Line.SetLinearLeastSquares(System.Double[],System.Double[])"></see>.
            </summary><remarks>
            Recall, that the line of best fit takes the form:<br></br><br></br><c>y = Coefficient * x + (Constant Term)</c><br></br><br></br>
            which has been fitted in accordance within the least squares approach.
            </remarks></member><member name="M:dotnetCHARTING.Forecasting.Line.GetUncertaintyOfConstant"><summary>
            Gets the uncertainty of the constant term.
            </summary></member><member name="M:dotnetCHARTING.Forecasting.Line.GetUncertaintyOfCoefficient"><summary>
            Gets the uncertainty of the coefficient.
            </summary></member><member name="M:dotnetCHARTING.Forecasting.Line.GetChiSquare"><summary>
            Gets the Chi-Square of the line of best fit.
            </summary><remarks>
            The Chi-Square is precisely the quantity which
            is required to be minimized when the line of best fit is sort.
            </remarks></member><member name="M:dotnetCHARTING.Forecasting.Line.GetProbabilityOfGoodFit"><summary>
            Gets the probability of a good fit.
            </summary></member><member name="M:dotnetCHARTING.Forecasting.Line.SetLinearLeastSquaresWithWeights(System.Double[],System.Double[],System.Double[],System.Int32)"><summary>
            This is for the statefull version using get data.
            </summary><remarks>
            Given a set of data points x[0..ndata-1],y[0..ndata-1] with individual standard deviations
            sig[0..ndata-1], fit them to a straight line y = a + bx by minimizing ¥ö2. Returned are
            a,b and their respective probable uncertainties siga and sigb, the chi-square chi2, and the
            goodness-of-fit probability q (that the fit would have ¥ö2 this large or larger). If mwt=0 on
            input, then the standard deviations are assumed to be unavailable: q is returned as 1.0 and
            the normalization of chi2 is to unit standard deviation on all points.
            </remarks></member><member name="M:dotnetCHARTING.Forecasting.Line.LinearLeastSquaresWithWeights(System.Double[],System.Double[],System.Double[],System.Int32)"><summary>
            Stateless version of this method.
            </summary><remarks>
            Given a set of data points x[0..ndata-1],y[0..ndata-1] with individual standard deviations
            sig[0..ndata-1], fit them to a straight line y = a + bx by minimizing ¥ö2. Returned are
            a,b and their respective probable uncertainties siga and sigb, the chi-square chi2, and the
            goodness-of-fit probability q (that the fit would have ¥ö2 this large or larger). If mwt=0 on
            input, then the standard deviations are assumed to be unavailable: q is returned as 1.0 and
            the normalization of chi2 is to unit standard deviation on all points.
            </remarks></member><member name="M:dotnetCHARTING.Forecasting.Line.SetLinearLeastSquares(System.Double[],System.Double[])"><summary>
            This is for the statefull version using get data.
            </summary><remarks>
            Given a set of data points x[0..ndata-1],y[0..ndata-1], fit them to a straight line y = a + bx
            by minimizing ¥ö2. Returned are a,b.
            </remarks></member><member name="M:dotnetCHARTING.Forecasting.Line.LinearLeastSquares(System.Double[],System.Double[])"><summary>
            Stateless version of this method.
            </summary><remarks>
            Given a set of data points x[0..ndata-1],y[0..ndata-1], fit them to a straight line y = a + bx
            by minimizing ¥ö2. Returned are a,b.
            </remarks></member><member name="M:dotnetCHARTING.Forecasting.Line.SetLogarithmFit(System.Double[],System.Double[])"><summary>
            Find the best fit for the function f(x) = a + b * ln(x).
            </summary></member><member name="M:dotnetCHARTING.Forecasting.Line.LogarithmFit(System.Double[],System.Double[])"><summary>
            Find the best fit for the function f(x) = a + b * ln(x).
            </summary></member><member name="M:dotnetCHARTING.Forecasting.Line.SetPowerFit(System.Double[],System.Double[])"><summary>
            Find the best fit for the function f(x) = A * pow (x, B ) where B = b and A = pow(e, a).
            </summary></member><member name="M:dotnetCHARTING.Forecasting.Line.PowerFit(System.Double[],System.Double[])"><summary>
            Find the best fit for the function f(x) = A * pow (x, B ) where B = b and A = pow(e, a).
            </summary></member><member name="M:dotnetCHARTING.Forecasting.Line.SetExpFit(System.Double[],System.Double[])"><summary>
            Find the best fit for the function f(x) = A * pow(e, B*x ) where B = b and A = exp( a).
            </summary></member><member name="M:dotnetCHARTING.Forecasting.Line.ExpFit(System.Double[],System.Double[])"><summary>
            Find the best fit for the function f(x) = A * pow(e, B*x ) where B = b and A = exp( a).
            </summary></member><member name="T:dotnetCHARTING.Forecasting.LineStateless"><summary>
            This is a stateless verison of the {.
            </summary><remarks>
            @linear Linear} class.
            </remarks></member><member name="M:dotnetCHARTING.Forecasting.LineStateless.#ctor"><summary>
            Creates a new instance.
            </summary></member><member name="M:dotnetCHARTING.Forecasting.LineStateless.LinearLeastSquaresWithWeights(System.Double[],System.Double[],System.Double[],System.Int32)"><summary>
            Stateless version of this method.
            </summary><remarks>
            Given a set of data points x[0..ndata-1],y[0..ndata-1] with individual standard deviations
             sig[0..ndata-1], fit them to a straight line y = a + bx by minimizing ¥ö2. Returned are
             a,b and their respective probable uncertainties siga and sigb, the chi-square chi2, and the
             goodness-of-fit probability q (that the fit would have ¥ö2 this large or larger). If mwt=0 on
             input, then the standard deviations are assumed to be unavailable: q is returned as 1.0 and
             the normalization of chi2 is to unit standard deviation on all points.
            </remarks></member><member name="M:dotnetCHARTING.Forecasting.LineStateless.LinearLeastSquares(System.Double[],System.Double[])"><summary>
            Stateless version of this method.
            </summary><remarks>
            Given a set of data points x[0..ndata-1],y[0..ndata-1], fit them to a straight line y = a + bx
             by minimizing %v2. Returned are a,b.
            </remarks></member><member name="M:dotnetCHARTING.Forecasting.LineStateless.LogarithmFit(System.Double[],System.Double[])"><summary>
            Find the best fit for the function f(x) = a + b * ln(x).
            </summary></member><member name="M:dotnetCHARTING.Forecasting.LineStateless.PowerFit(System.Double[],System.Double[])"><summary>
            Find the best fit for the function f(x) = A * pow (x, B ) where B = b and A = pow(e, a).
            </summary></member><member name="M:dotnetCHARTING.Forecasting.LineStateless.ExpFit(System.Double[],System.Double[])"><summary>
            Find the best fit for the function f(x) = A * pow(e, B*x ) where B = b and A = exp( a).
            </summary></member><member name="T:dotnetCHARTING.Forecasting.LineWithError"><summary>
            Straight-line fit to input data x[0.
            </summary><remarks>
            .ndat-1] and y[0..ndat-1] with errors in both x and y,
             the respective standard deviations being the input quantities sigx[0..ndat-1] and sigy[0..ndat-1].
             Output quantities are a and b such that y = a + bx minimizes ¥ö2, whose value is returned
             as chi2. The ¥ö2 probability is returned as q, a small value indicating a poor fit (sometimes
             indicating underestimated errors). Standard errors on a and b are returned as siga and sigb.
             These are not meaningful if either (i) the fit is poor, or (ii) b is so large that the data are
             consistent with a vertical (infinite b) line. If siga and sigb are returned as BIG, then the data
             are consistent with all values of b.
            </remarks></member><member name="M:dotnetCHARTING.Forecasting.LineWithError.#ctor"><summary>
            Creates a new LineWithError instance.
            </summary></member><member name="T:dotnetCHARTING.Forecasting.LineWithErrorStateless"><summary>
            Straight-line fit to input data x[0.
            </summary><remarks>
            .ndat-1] and y[0..ndat-1] with errors in both x and y,
             the respective standard deviations being the input quantities sigx[0..ndat-1] and sigy[0..ndat-1].
             Output quantities are a and b such that y = a + bx minimizes ¥ö2, whose value is returned
             as chi2. The ¥ö2 probability is returned as q, a small value indicating a poor fit (sometimes
             indicating underestimated errors). Standard errors on a and b are returned as siga and sigb.
             These are not meaningful if either (i) the fit is poor, or (ii) b is so large that the data are
             consistent with a vertical (infinite b) line. If siga and sigb are returned as BIG, then the data
             are consistent with all values of b.
            </remarks></member><member name="M:dotnetCHARTING.Forecasting.LineWithErrorStateless.#ctor"><summary>
            Creates a new instance.
            </summary></member><member name="T:dotnetCHARTING.Libraries.Statistics.PDistributions.LogNormalProbabilityDistribution"><summary>
            Within this class we deal with the definition and use of the Lognormal Probability Distribution.
            </summary><remarks>
            The Lognormal Probability Distribution is derived from the Normal Probability Distribution.
            The Lognormal distribution plays of significant role within the theory
            of investment analysis and insurance since in general within these
            theories the distributions of investment returns or insurance claim
            sizes are assumed to follow the distribution.
            </remarks></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.LogNormalProbabilityDistribution.#ctor"><summary>
            Creates a new Lognormal Probability Distribution instance with the normal distribution mean and variance both set to zero.
            </summary><remarks>
            In order to specify your own normal distribution mean and variance use the use
            the <c>NormalDistributionMean</c> and <c>NormalDistributionVariance</c> get/set properties.
            </remarks></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.LogNormalProbabilityDistribution.#ctor(System.Double,System.Double)"><summary>
            Creates a new LogNormal Probability Distribution class with the specified initial normal distribution mean and variance.
            </summary><param name="mean">The mean of the normal probability distribution from which it is derived.</param><param name="variance">The variance of the normal probability distribution from which it is derived.</param><exception cref="T:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistributionException">Thrown if the variance is negative.</exception></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.LogNormalProbabilityDistribution.SetNormalDistributionMean(System.Double)"><summary>
            Sets the mean for the Normal Probability Distribution which is associated to the Lognormal Probability distribution.
            </summary><remarks>
            Recall, that if the random variable X has a Lognormal distribution then the
            natural logarithm of X has a Normal probability distribution.
            </remarks><param name="mean">The mean of the Normal Probability Distribution.</param></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.LogNormalProbabilityDistribution.GetNormalDistributionMean"><summary>
            Returns the mean for the Normal Probability Distribution which is associated to the Lognormal Probability distribution.
            </summary><remarks>
            Recall, that if the random variable X has a Lognormal distribution then the
            natural logarithm of X has a Normal probability distribution.
            </remarks></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.LogNormalProbabilityDistribution.SetNormalDistributionVariance(System.Double)"><summary>
            Sets the variance for the Normal Probability Distribution which is associated to the Lognormal Probability distribution.
            </summary><remarks>
            Recall, that if the random variable X has a Lognormal distribution then the
            natural logarithm of X has a Normal probability distribution.
            </remarks><param name="variance">The variance of the Normal Probability Distribution.</param><exception cref="T:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistributionException">Thrown if the variance of the probability distribution is negative.</exception></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.LogNormalProbabilityDistribution.GetNormalDistributionVariance"><summary>
            Returns the variance for the Normal Probability Distribution which is associated to the Lognormal Probability distribution.
            </summary><remarks>
            Recall, that
             if the random variable X has a Lognormal distribution then the
             natural logarithm of X has a Normal probability distribution.
            </remarks></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.LogNormalProbabilityDistribution.Probability(System.Double,System.Double)"><summary>
            Calculates the Lognormal probability for an interval <c>[lowerBound,upperBound]</c>, on the positive real number line.
            </summary><param name="lowerBound">The (positive) lower bound of the interval of the real line.</param><param name="upperBound">The upper bound of the interval of the real line.</param></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.LogNormalProbabilityDistribution.Probability(System.Double)"><summary>
            Calculates the Lognormal probability for the interval <c>[epsilon,upperBound]</c>, where <c>epsilon</c> is a very small strictly positive number and <c>upperBound</c> is the upper bound of the interval.
            </summary><param name="upperBound">A double which represents the real number of the upper bound of the closed interval of the real line over which the probability is calculated.</param></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.LogNormalProbabilityDistribution.ProbabilityUp(System.Double)"><summary>
            Calculates the Lognormal probability for the interval <c>[lowerBound,+infinity]</c>, where <c>+infinity</c> is the <c>plus infinity</c> and <c>lowerBound</c> is the lower bound of the interval.
            </summary><param name="lowerBound">A double which represents the real number of the lower bound of the closed interval of the real line over which the probability is calculated.</param></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.LogNormalProbabilityDistribution.DensityFunction(System.Double)"><summary>
            Calculates the Lognormal probability density function in a given point of the real line.
            </summary><param name="evaluationPoint">The point at which the lognormal probability density function is evaluated.</param></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.LogNormalProbabilityDistribution.DensityFunction(System.Double[],System.Double[])"><summary>
            Calculates the Lognormal Probability Density function in a given set of points.
            </summary><param name="x">The values of the points of the X axis at which the Lognormal Probability Density function is evaluated.</param><param name="y">The values of the points of the Y axis at which the Lognormal Probability Density function is evaluated.</param></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.LogNormalProbabilityDistribution.CalculateMeanAndVariance(System.Double[],System.Double[])"><summary>
            Calculates the mean and variance when a set of points is given.
            </summary><param name="x">The values of the points of the X axis at which the Lognormal Probability Density function is evaluated.</param><param name="y">The values of the points of the Y axis at which the Lognormal Probability Density function is evaluated.</param></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.LogNormalProbabilityDistribution.GetMean"><summary>
            Returns the mean for the Lognormal probability distribution.
            </summary></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.LogNormalProbabilityDistribution.GetVariance"><summary>
            Returns the variance for the Lognormal probability distribution.
            </summary></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.LogNormalProbabilityDistribution.Inverse(System.Double)"><summary>
            Evaluates the inverse of the Lognormal probability distribution represented by this instance.
            </summary><remarks>
            That is, the upper bound on the interval from 0, such that
             the probability function takes a given value.
            
             <p>For further explanation please see the accompanying PDF documentation.</p></remarks><param name="probability">The probability with respect to the Normal Probability distribution.</param></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.LogNormalProbabilityDistribution.Inverse(System.Double,System.Double,System.Int32)"><summary>
            Evaluates the inverse of the Lognormal Probability distribution represented by this instance.
            </summary><remarks>
            That is, the upper bound of the interval from 0, such that
            the probability function takes a given value. Within this method we allow
            the accuracy and the maximum number of iterations to be set.
            
            <p>For further explanation please see the accompanying PDF documentation.</p></remarks><param name="probability">The probability with respect to the Normal Probability distribution.</param><param name="accuracy">The precision required of the return result. For example, if the accuracy is set to 0.001, then assuming that the computation finishes the returned result will be accuracy to three decimal places.</param><param name="maximumSteps">The maximum number of steps which can be performed by the search.</param></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.LogNormalProbabilityDistribution.InverseFromRange(System.Double,System.Double)"><summary>
            Evaluates the inverse of the Lognormal Probability distribution represented by this instance when the lower bound of the solution is known.
            </summary><remarks>
            That is, the value required of the probability density function's variable in order
            to achieve a given value of probability is evaluated.
            
            <p>This method allows the lower bound of the set over which
            a solution can be found. By setting the lower bound the result to be found
            with less iterations and hence faster than the inverse method.</p><p>For further explanation please see the accompanying PDF documentation.</p></remarks><param name="probability">The probability with respect to the Normal Probability distribution.</param><param name="lowerBound">The lower bound on the real line over which the result is searched over.</param></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.LogNormalProbabilityDistribution.GetRandomValue"><summary>
            Generates a random number from the Log Normal Probability function.
            </summary><remarks>
            That is, for a ramdomly generated number within the interval <c>[0,1]</c>, we return
            the value for which the inverse distribution equals this ramdonly generated number.
            </remarks></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.LogNormalProbabilityDistribution.GetRandomValues(System.Int32)"><summary>
            Generates an array of random numbers from the Lognormal Probability function.
            </summary><remarks>
            That is, for sequence of randomly generated numbers within the interval
            <c>[0,1]</c>, we return an array of values for which the inverse
            distribution equals the randomly generated numbers.
            
            <p><b>Remark:</b> This method is identical to the methods <c>getRandomValue()</c>,
            except that here we apply the procedure to an array rather than an individual number.</p></remarks></member><!-- Badly formed XML comment ignored for member "T:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MarketStrength" --><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MarketStrength.#ctor"><summary>
            Creates a new instance.
            </summary></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MarketStrength.BalanceOfPower(System.Double,System.Double,System.Double,System.Double)"><summary>
            Implements the Balance of Power (BOP) indicator, created by Igor Livshin; which captures the struggle between the Bulls and Bears throughout a trading period.
            </summary><remarks><h3>Interpretation</h3><p>The BOP indicator for each trading period lies within the range <c>[-1,1]</c>.
             When the BOP indicator is towards the high if its range it will signifies that the
             Bulls are in control, conversely when the indicator is towards the lows of its range
             it signifies that the bear are in control. If the indicator move from a high positive
             range to a lower positive range it signifies that the buying pressure is decreasing.
             Conversely, if the indicator move from a low negative range to a higher negative range
             it signifies that the selling pressure is decreasing.</p><h3>Evaluation</h3><p>The BOP indicator is evaluated by the following formulae:<br></br><br></br><c>BOP = (Close - Open)/(High - Low)</c><br></br><br></br>
             where <c>close</c> is the periods closing price, <c>open</c> is the periods opening
             price, <c>high</c> is the highest traded price during the period and <c>low</c>
             is the lowest traded price during the period.</p></remarks><param name="open">The opening price of the asset on the trading period under consideration.</param><param name="close">The closing price of the asset on the trading period under consideration.</param><param name="high">The traded high of the asset on the trading period under consideration.</param><param name="low">The traded low of the asset on the trading period under consideration.</param><seealso cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MarketStrength.BalanceOfPowerOverPeriod(System.Double[],System.Double[],System.Double[],System.Double[])">a generalization of this indicator which calculates the values of the Balance Of Power indicator over specified period.</seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MarketStrength.BalanceOfPowerOverPeriod(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Evaluates the Balance of Power (BOP) indicator, created by Igor Livshin; which captures the struggle between the Bulls and Bears over a number of trading periods.
            </summary><remarks>
            An array is
             returned where the first term corresponds to the BOP of the last trading period, the second
             term gives the BOP on the previous trading period and so on.
            
             <h3>Interpretation</h3><p>The BOP indicator for each trading period lies within the range <c>[-1,1]</c>.
             When the BOP indicator is towards the high if its range it will signifies that the
             Bulls are in control, conversely when the indicator is towards the lows of its range
             it signifies that the bear are in control. If the indicator move from a high positive
             range to a lower positive range it signifies that the buying pressure is decreasing.
             Conversely, if the indicator move from a low negative range to a higher negative range
             it signifies that the selling pressure is decreasing.</p><h3>Evaluation</h3><p>The BOP indicator for each trading periods is evaluated by the following formulae:<br></br><br></br><c>BOP = (Close - Open)/(High - Low)</c><br></br><br></br>
             where <c>close</c> is the periods closing price, <c>open</c> is the periods opening
             price, <c>high</c> is the highest traded price during the period and <c>low</c>
             is the lowest traded price during the period.</p></remarks><param name="high">An array of length equal to the number of periods considered in the indicator evaluation where the first element is the high in the last trading period, the second term is the high in the previous period and so on.</param><param name="low">An array of length equal to the number of periods considered in the indicator evaluation where the first element is the low in the last trading period, the second term is the low in the previous period and so on.</param><param name="open">An array of length equal to the number of periods considered in the indicator evaluation where the first element is the opening price in the last trading period, the second term is the opening price in the previous trading period and so on.</param><param name="close">An array of length equal to the number of periods considered in the indicator evaluation where the first element is the closing price in the last trading period, the second term is the closing price in the previous trading period and so on.</param><exception cref="T:System.ArgumentException">Thrown if any elements from the arrays high, low, close or open are strictly negative, or if the length of these arrays are not equal.</exception><returns>An array is returned where the first term corresponds to the BOP of the last trading period, the second term gives the BOP on the previous trading period and so on.</returns><seealso cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MarketStrength.BalanceOfPower(System.Double,System.Double,System.Double,System.Double)">evaluates the Balance of Power (BOP) indicator for a single trading period.</seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MarketStrength.MarketFacilitationIndex(System.Double,System.Double,System.Double)"><summary>
            Market Facilitation Index was developed by Dr. Bill Williams and take into consideration the
             price and volume.
            </summary><remarks><h3>Evaluation</h3><p>The formula for the calculation of MFI is:
             <br></br><c>MFI = (high - low)/volume</c><br></br>
             where <c>high</c> is the highest traded price during the period, <c>low</c>
             is the lowest traded price during the period and, <c>volume</c> is the overall
             volume traded on that period.</p><h3>Interpretation</h3><p>There are four types of trading sessions called:
             <ol><li>Fakes - volume is low but MFI is rising</li><li>Fades - both volume and MFI is down (the price might move in the opposite direction)</li><li>Squats - the volume is up, MFI is down</li><li>Greens - when the MFI and volume are up which represent a strong signal to follow the trendline</li></ol></p></remarks><param name="high">The traded high of the asset on the trading period under consideration.</param><param name="low">The traded low of the asset on the trading period under consideration.</param><param name="volume">The traded volume of the asset on the trading period under consideration.</param><seealso cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MarketStrength.MarketFacilitationIndexOverPeriod(System.Double[],System.Double[],System.Double[])">a generalization of this indicator which calculates the values of the Market Facilitation Index indicator over specified period.</seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MarketStrength.MarketFacilitationIndexOverPeriod(System.Double[],System.Double[],System.Double[])"><summary>
            Market Facilitation Index was developed by Dr.
            </summary><remarks>
            Bill Williams and take into consideration the
             price and volume.
            
             <h3>Evaluation</h3><p>The formula for the calculation of MFI is:
             <br></br><c>MFI = (high - low)/volume</c><br></br>
             where <c>high</c> is the highest traded price during the period, <c>low</c>
             is the lowest traded price during the period and, <c>volume</c> is the overall
             volume traded on that period.</p><h3>Interpretation</h3><p>There are four types of trading sessions called:
             <ol><li>Fakes - volume is low but MFI is rising</li><li>Fades - both volume and MFI is down (the price might move in the opposite direction)</li><li>Squats - the volume is up, MFI is down</li><li>Greens - when the MFI and volume are up which represent a strong signal to follow the trendline</li></ol></p></remarks><param name="high">An array of length equal to the number of periods considered in the indicator evaluation where the first element is the high in the last trading period, the second term is the high in the previous period and so on.</param><param name="low">An array of length equal to the number of periods considered in the indicator evaluation where the first element is the low in the last trading period, the second term is the low in the previous period and so on.</param><param name="volume">An array of length equal to the number of periods considered in the indicator evaluation where the first element is the volume in the last trading period, the second term is the volume in the previous trading period and so on.</param><exception cref="T:System.ArgumentException">Thrown if any elements from the arrays high, low, volume are strictly negative, or if the length of these arrays are not equal.</exception><returns>An array is returned where the first term corresponds to the MFI of the last trading period, the second term gives the MFI on the previous trading period and so on.</returns><seealso cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MarketStrength.MarketFacilitationIndex(System.Double,System.Double,System.Double)">evaluates the Market Facilitation Index (MFI) indicator for a single trading period.</seealso></member><!-- Badly formed XML comment ignored for member "T:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MeanReversion" --><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MeanReversion.#ctor"><summary>
            Creates a new instance.
            </summary></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MeanReversion.CommodityChannelIndex(System.Double[],System.Double[],System.Double[])"><summary>
            Evaluates the Commodity Channel Index (CCI) developed by Donald Lambert.
            </summary><remarks>
            The CCI measures the variation of a security's price from its statistical
             mean. High values show that prices are unusually high compared to
             average prices whereas low values indicate that prices are unusually
             low. The CCI can be used effectively on any type of security, but
             clearly it is most applicable where the security has should a strong
             degree on mean reversion.
            
             <p>Lambert originally commended that the CCI was designed to capture
             the trade cycle (i.e. low-to-low or high-to-high) turns in commodity
             markets. The system assumes that commodities move in cycles
             and uses 1/3 of the cycle period for the evaluation of the CCI. We allow
             the uses to specify the length of the calculation period used but we advise
             that you take the calculation cycle to be approximately one third of
             your estimate for the length of the trade cycle.</p><p><b>Calculation Period:</b> the number of days used in the evaluation of the CCI.
             In Donald Lambert's original system this was taken to be one third of the estimate
             length of the trade cycle.</p><p><b>Remark:</b> Within the evaluation procedure (step 2), we multiply the
             result by the constant 0.015. The constant was originally used in Lambert's
             system and has been found to ensure that around 70-80 percent of all the
             values given by the CCI lie the range [-100,+100]. Hence, the constant
             is just used to calibrate the indicator with respect to the range
             [-100, +100].</p><p><b>Interpretation</b><br></br>
             Significant signals are generated when either the CCI starts to diverge
             from the price action which will signify a correlation in the price,
             or when the CCI extended (typically above 100 or below -100) which
             indicates oversold or over brought conditions.</p><p>Further details concerning the CCI can be found in an article by
             Donald Lambert that appeared in the October 1980 issue of Commodities
             (now known as Futures) Magazine.</p><p><b>Evaluation Procedure</b><br></br>
             We summaries our basic evaluation procedure by the following three steps:
             <nl><li> First evaluate the simple moving average (SMA) of the Typical Price Indicator
             (see Filters) over the calculation period.</li><li> Evaluate the SMA over the calculation period of the absolute value on each
             on the calculation period days between the Typical Price on that day and the
             SMA found in step 1 above, and multiply the result by 0.015.</li><li> Divide todays typical price minus the SMA of the typical price found in
             step 1, by the result given by step 2.</li></nl></p></remarks><param name="high">An array of length equal to the number of periods considered in the indicator evaluation where the first element is the high in the last trading period, the second term is the high in the previous period and so on.</param><param name="low">An array of length equal to the number of periods considered in the indicator evaluation where the first element is the low in the last trading period, the second term is the low in the previous period and so on.</param><param name="closing">An array of length equal to the number of periods considered in the indicator evaluation where the first element is the closing price in the last trading period, the second term is the closing price in the previous trading period and so on.</param><exception cref="T:System.ArgumentException">Thrown if any elements from the arrays high, low or close are strictly negative, or if the length of the arrays is not equal.</exception></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MeanReversion.CommodityChannelIndexOverPeriod(System.Double[],System.Double[],System.Double[],System.Int32)"><summary>
            This indicator is a generalization of the <see cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MeanReversion.CommodityChannelIndex(System.Double[],System.Double[],System.Double[])"><c>CommodityChannelIndex</c></see> indicator and calculates the values of the commodityChannelIndex indicator over all sub-periods of a given length.
            </summary><param name="high">An array of length equal to the number of periods considered in the indicator evaluation where the first element is the high in the last trading period, the second term is the high in the previous period and so on.</param><param name="low">An array of length equal to the number of periods considered in the indicator evaluation where the first element is the low in the last trading period, the second term is the low in the previous period and so on.</param><param name="closing">An array of length equal to the number of periods considered in the indicator evaluation where the first element is the closing price in the last trading period, the second term is the closing price in the previous trading period and so on.</param><param name="lengthOfPeriod">An integer which represents the length of the period over which the indicator will be iteratively evaluated.</param><exception cref="T:System.ArgumentException">Thrown if any elements from the arrays high, low or close are strictly negative, or if the length of the arrays is not equal or the lengthOfPeriod is grater than the length of the array high.</exception></member><member name="T:dotnetCHARTING.Forecasting.Mnbrak"><summary>
            Given a function func, and given distinct initial points ax and bx, this routine searches in
            the downhill direction (defined by the function as evaluated at the initial points) and returns
            new points ax, bx, cx that bracket a minimum of the function. Also returned are the function
            values at the three points, fa, fb, and fc.
            </summary></member><!-- Badly formed XML comment ignored for member "T:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Momentum" --><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Momentum.#ctor"><summary>
            Creates a new instance.
            </summary></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Momentum.MomentumIndicator(System.Double,System.Double)"><summary>
            We evaluate the n-period momentum which is simply the difference between today's closing price and the close price n periods ago.
            </summary><remarks>
            The momentum indicator as the name
             suggests is the velocity with which the price is rising or falling, and hence will
             reflect how aggressively the asset is being purchased or sold.
            
             <p>Extended values and/or turning points of the momentum are good indicators of
             oversold or over brought conditions (respectively).</p></remarks><param name="close">The last closing price of the asset.</param><param name="nperiodPrice">The closing price of the asset n periods ago.</param><exception cref="T:System.ArgumentException">Thrown if either parameter is strictly negative.</exception></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Momentum.MomentumPeriod(System.Double[],System.Int32)"><summary>
            We evaluate the n-period momentum which is simply the difference between today's closing price and the close price n periods ago, for all periods for which sufficient historical data is given.
            </summary><remarks>
            The momentum indicator as the name suggests is the velocity
             with which the price is rising or falling, and hence will reflect how aggressively the
             asset is being purchased or sold.
            
             <p><b>Remark:</b> Extended values and/or turning points of the momentum are good
             indicators of oversold or over brought conditions (respectively).</p></remarks><param name="close">An array of length equal to the number of periods considered in the indicator evaluation where the first element is the closing price in the last trading period, the second term is the closing price in the previous trading period and so on.</param><param name="noOfPeriods">The number of periods before to which the closing price is compared.</param><exception cref="T:System.ArgumentException">Thrown if either parameter is strictly negative.</exception><returns>a double array where the first term is the momentum for the most recent trading period, the second term is the momentum for the previous trading period and so on.</returns></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Momentum.MomentumPct(System.Double,System.Double)"><summary>
            We calculate the momentum percentage which measures the percentage change of the closing price with the price n periods before.
            </summary><remarks><h3>Evaluation and Interpretation</h3><p>The closing (or current) price divided by the price from n periods previous and then
             multiplied to 100, to give the percentage where 1 percent = 1, of the change of the present
             price with the price n periods beforehand. This indicator will oscillate around the long term trend
             rate of the given asset is questions. That is, if the asset is mean reverting then the indicators
             will oscillate around 100, over the log term. However, if the market has a long term up trend such
             as the SP500, then the indicators will oscillator around a value higher than <c>100 + X</c>,
             where <c>X</c> is the long term trend rate of the market in question. </p><p>The application of the indicator to identify a trend is very straight forward. When the values of
             the indicator are less then <c>100</c>, it indicates a down trend and when the values are
             above <c>100</c>, it indicate an up trend.</p></remarks><param name="close">The last closing price of the asset.</param><param name="nperiodPrice">The closing price of the asset n periods ago.</param><exception cref="T:System.ArgumentException">Thrown if either parameter is strictly negative.</exception><returns>a double argument which represents the momentum percentage.</returns></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Momentum.MomentumPctPeriod(System.Double[],System.Int32)"><summary>
            We calculate the momentum percentage over a given period.
            </summary><remarks>
            This is a generalization
             of the <see cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Momentum.MomentumPct(System.Double,System.Double)"><c>momnetumPct</c></see> method. Instead of taking into account only
             one value of the closing price we calculate the momentum percentage over a entire period.
            </remarks><param name="prices">An array of length equal to the number of periods considered in the indicator evaluation where the first element is the closing price in the last trading period, the second term is the closing price in the previous trading period and so on.</param><param name="noOfPeriods">The number of periods before to which the closing price is compared.</param><exception cref="T:System.ArgumentException">Thrown if prices array has strictly negative elements or if the noOfPeriods argument is greater then the length of prices array.</exception><returns>a double array where the first term is the momentum percentage for the most recent trading period, the second term is the momentum percentage for the previous trading period and so on.</returns></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Momentum.Highest(System.Double[],System.Int32)"><summary>
            Returns the highest value of prices over all values given.
            </summary><param name="prices">An array of length equal to the number of periods considered in the indicator evaluation where the first element is the closing price in the last trading period, the second term is the closing price in the previous trading period and so on.</param><param name="noOfPeriods">The number of periods before to which the closing price is compared.</param><exception cref="T:System.ArgumentException">Thrown if prices array has strictly negative elements or if the noOfPeriods argument is greater then the length of prices array.</exception><returns>the highest value of the specified period.</returns></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Momentum.HighestPeriod(System.Double[],System.Int32)"><summary>
            Returns the highest value of prices over all values given.
            </summary><remarks><h3>Further Details</h3><p>Returns an array which contains the higher highs values of prices array within a given
             period considering a look back period of n periods.</p></remarks><param name="prices">An array of length equal to the number of periods considered in the indicator evaluation where the first element is the closing price in the last trading period, the second term is the closing price in the previous trading period and so on.</param><param name="noOfPeriods">The number of periods before to which the closing price is compared.</param><exception cref="T:System.ArgumentException">Thrown if prices array has strictly negative elements or if the noOfPeriods argument is greater then the length of prices array.</exception><returns>a double array where the first term is the high calculated for the most recent trading period, the second term is the high for the previous trading period and so on.</returns></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Momentum.Lowest(System.Double[],System.Int32)"><summary>
            Returns the lowest value of prices array within the given look back period given by the noOfPeriod parameter.
            </summary><param name="noOfPeriods">The number of periods before to which the closing price is compared.</param><param name="prices">An array of length equal to the number of periods considered in the indicator evaluation where the first element is the closing price in the last trading period, the second term is the closing price in the previous trading period and so on.</param><exception cref="T:System.ArgumentException">Thrown if prices array has strictly negative elements or if the noOfPeriods argument is greater then the length of prices array.</exception><returns>the lowest value of the specified period.</returns></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Momentum.LowestPeriod(System.Double[],System.Int32)"><summary>
            Returns an array which contains the lower lows values of prices array within a given period considering a look back period of n periods.
            </summary><param name="prices">An array of length equal to the number of periods considered in the indicator evaluation where the first element is the closing price in the last trading period, the second term is the closing price in the previous trading period and so on.</param><param name="noOfPeriods">The number of periods before to which the closing price is compared.</param><exception cref="T:System.ArgumentException">Thrown if prices array has strictly negative elements or if the noOfPeriods argument is greater then the length of prices array.</exception><returns>a double array where the first term is the low calculated for the most recent trading period, the second term is the low for the previous trading period and so on.</returns></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Momentum.HighestPosition(System.Double[],System.Int32)"><summary>
            Returns the position in which highest value of the prices array for the specified period was recorded.
            </summary><param name="prices">An array of length equal to the number of periods considered in the indicator evaluation where the first element is the closing price in the last trading period, the second term is the closing price in the previous trading period and so on.</param><param name="noOfPeriods">The number of periods before to which the closing price is compared.</param><exception cref="T:System.ArgumentException">Thrown if prices array has strictly negative elements or if the noOfPeriods argument is greater then the length of prices array.</exception><returns>an integer which represent the number of periods before the highest value was registered.</returns></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Momentum.LowestPosition(System.Double[],System.Int32)"><summary>
            Returns the position in which lowest value of the prices array for the specified period was recorded.
            </summary><param name="prices">An array of length equal to the number of periods considered in the indicator evaluation where the first element is the closing price in the last trading period, the second term is the closing price in the previous trading period and so on.</param><param name="noOfPeriods">The number of periods before to which the closing price is compared.</param><exception cref="T:System.ArgumentException">Thrown if prices array has strictly negative elements or if the noOfPeriods argument is greater then the length of prices array.</exception><returns>an integer which represent the number of periods before the lowest value was registered.</returns></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Momentum.TrendIntensityIndex(System.Double[],System.Int32)"><summary>
            Measures the strength of a trend by comparing the deviation of the price with its corresponding moving average.
            </summary><remarks><h3>Evaluation Procedure</h3><p>If the price is above the moving average, a positive deviation is recorded, and if price is below
             the moving average a negative deviation is recorded. The deviation is simply the difference between
             the price and the moving average, and the trend of the trend is given by:</p><br></br><br></br>
             TTI = ( Sum of Positive Deviation ) / ( ( Sum of Positive Deviation ) + ( Sum of Negative Deviation ) ) * 100
            </remarks><param name="prices">An array of length equal to the number of periods considered in the indicator evaluation where the first element is the closing price in the last trading period, the second term is the closing price in the previous trading period and so on.</param><param name="lengthOfMA">The number of periods considered within the evaluation of the moving average of each of the periods on which it can be evaluated.</param><exception cref="T:System.ArgumentException">Thrown if prices array has strictly negative elements or if the lengthOfMA argument is greater then the length of prices array.</exception><returns>an integer which represent the trend intensity index of the given period.</returns></member><member name="T:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MovingAverage"><summary>
            Within this class we offer various types of moving average indicators and associated procedures.
            </summary><remarks><h3>Purpose and Application of Moving Averages</h3><p>Moving Averages in there various forms are used to smooth data so that the underlying trend
             is more discernible. The sensitivity of the moving average measure will depend on the number of
             historical values used. In particular, if relatively few historical values are used (say <c>5</c>
             periods), then the moving average will ascertain trends over that period. Similarly if a moving
             average is considered over a longer time frame (say <c>20</c>, <c>120</c> or <c>200</c>
             periods) then the moving average will ascertain trends over the longer time frame and tend to
             iron out any trends over shorter time frames.</p><p>For this reason it is important to consider the moving average which
             considers the number of periods in accordance with your time horizon
             over which you to trying to discern trends within the underlying time series.
             For example, if you wish to benefit from the longer term general trend
             of say they Dollar/Euro exchange rate then you may wish the evaluate the
             <c>6</c>-month (i.e. <c>120</c> trading period) and <c>200</c>-period
             (i.e. roughly correspondingly to <c>1</c>-years trading periods which
             is general taken to be <c>252</c>) moving averages over a given
             period. Now if the values of the moving averages are generally
             trending higher then the underlying trend is up. Similarly, if the values
             of the moving averages are generally trending lower then the underlying
             trend is down.</p><h3>Standard Periods Used</h3><p>Selecting the type of moving average to use and then the number of
             periods to consider for a given moving average is more of an art than
             a science. Often personal preferences and past experience (good and bad)
             will play a significant part with any selection. Having said that it is
             often advisable to plot the Moving Average over time frames for which
             different sectors of the market are forced to work by, in particular:
             <ol><li><c>5</c> periods (i.e. <c>1</c> trading week): Short term traders
             and market makers often have a weekly outlook on the market and in particular will often
             try at least the square positions before the week-end break. Therefore,
             a <c>5</c>-period average will help to eliminate these short term influences.</li><li><c>25</c> periods (i.e. <c>1</c> month): This indicator may be used by fund managers
             wishing to judge to median term trend for the purpose of making buy and
             sell decisions.</li><li><c>120</c> periods (i.e. <c>6</c> months): Much of the financial reporting which takes
             place is offered on the six monthly basis. Hence, a <c>6</c> monthly moving average
             can be considered as describing the trend over the last reporting period.</li><li><c>200</c> periods (i.e. <c>1</c> year): This moving average would be used to identical
             the long term trend which for example may be due to the influences of the phase
             of the business cycle.</li></ol></p><p>Moreover, even if you are not personally interested in keeping track of
             the moving averages with respect to these particular periods because they are
             so widely used by market participants in order to appreciate others market
             interpretations and market dynamics it is often beneficial to at least view
             them from time to time.</p><h3>Qualitative Differences</h3><p>The qualitative difference between moving averages of differing periods
             is the degree of sensitivity they have to changes in the underlying data.
             When relatively few values are used the moving average may itself oscillate
             rapidly and give many force signals to the start of trending markets. If a
             relatively large number of periods is used used fewer force signals will be
             generated but a trend may in well into its cycle before it is detected and
             conversely when the trend finishes or changes direction the indicator will
             take correspondingly longer to reflect this.</p><p>The exact number of periods which are considered to be a relatively few
             or many periods will naturally depend on the situation and perspective of
             the user and the data set used.</p><h3>Differences Between Types of Moving Averages</h3><p>With the construction of the moving averages themselves the main significant
             difference between the types of moving average (i.e. <see cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MovingAverage.SimpleMovingAverage(System.Double[],System.Int32)"><c>simple</c></see>,
             <see cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MovingAverage.GeometricMovingAverage(System.Double[],System.Int32)"><c>geometric</c></see>, etc) with the exception of the Median
             moving average is the weight assigned to each data element of the data series for
             which the moving average is evaluated. (The Median Moving average in slightly
             different in that it should be seen as the Simple Moving Average on filtered
             data.) Simple moving averages apply equal weight to all historical prices.
             Exponential and weighted averages apply more weight to recent prices. Triangular
             averages apply more weight to prices in the middle of the time period and
             variable moving averages change the weighting based on the volatility of
             prices.</p><h3>Interpretation</h3><p>When the moving average is higher than the underlying data series then the
             underlying data series (for example, price series) is said to be in a bearish
             trend (i.e. trending down) and when the underlying data series asset is above
             the moving average then it is said to be in a bullish trend (i.e. trending
             up-wards).</p><p>Moving Averages are also used in pairs and even triples. When
             using a pair of moving averages of the same type where one moving average
             uses fewer periods and hence is more sensitive, the underlying asset is
             said to be in bullish mode if the moving average using the fewer number
             of periods crosses above the less sensitive moving average which is using
             more periods. Conversely, if the less sensitive moving average crossed above the
             more sensitive moving average then asset is said to be in a bearish mode.</p><p><b>Remark:</b> All moving averages are lagging indicators and hence will miss
             the first part of a trend and over-run the same trend. There is also a play-off
             in the number of periods used which determines the sensitivity of the indicator.</p><h3>Examples</h3><p>Say we are considering a stock price where we are provided with the daily
             closing price series. Now if you decide to use for example the 5-period Simple
             Moving Average to determine the short term trend, then from the following
             values of the moving average we are able to conclude:
             <ol><li> Bullish Trend: MA Value today = 99, MA Value Yesterday = 97, MA Value Day before yesterday = 95</li><li> Bullish Trend: MA Value today = 94, MA Value Yesterday = 95, MA Value Day before yesterday = 99</li><li> No real discernible trend, however a Bullish trend could be developing: MA Value today = 95, MA
             Value Yesterday = 92, MA Value Day before yesterday = 95</li><li> No real discernible trend however a Bearish trend could be developing: MA Value today = 92, MA Value
             Yesterday = 95, MA Value Day before yesterday = 92</li></ol></p></remarks></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MovingAverage.#ctor"><summary>
            Creates a new instance.
            </summary></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MovingAverage.SimpleMovingAverage(System.Double[],System.Int32)"><summary>
            Calculates the arithmetic (or simple) Moving Average (MA) of a given period for all possible data points (i.e. periods) for which there is sufficient historical data provided.
            </summary><remarks><h3>Illustration</h3><p>If we are considering a traded asset and the periods considered are periods then by
             passing an array containing the closing daily prices of a given asset, and by choosing
             to use the 5-period moving average (i.e. passing a length of the MA of <c>5</c>),
             then this method will evaluate the Moving Average (MA) for all periods for which the closing
             price on that period and the four previous periods is known.</p></remarks><param name="historicalValues">An array where the first term is the most recent historical price, the second term is the previous historical price and so on.</param><param name="lengthOfMovingAverage">The number of periods considered within the evaluation of the moving average for each of the periods on which it can be evaluated.</param><exception cref="T:System.ArgumentException">Thrown if the historicalPrices array is empty.</exception><returns>an array where the first term corresponds to the Moving Average on the last period and the previous value is the value of the Moving average on the previous period and so on.</returns></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MovingAverage.GeometricMovingAverage(System.Double[],System.Int32)"><summary>
            Calculates the Geometric Moving Average (GMA) for a given period for all possible data points (i.e. periods) for which there is sufficient historical data provided.
            </summary><remarks><h3>Illustration</h3><p>If we are considering a traded asset and the periods considered are periods then by passing
             an array containing the closing daily prices of a given asset, and by choosing to use the
             5-period Geometric Moving Average (i.e. passing the length of the GMA of <c>5</c>), then
             this method will evaluate the Geometric Moving Average (GMA) for all periods for which the
             closing price on that period and the four previous periods is known.</p></remarks><param name="historicalValues">An array containing the historical values of the time series being considered. Where the first element gives the last historical value, the second term the previous periods value and so on.</param><param name="lengthOfMovingAverage">The number of periods considered within the evaluation of the moving average of each of the periods on which it can be evaluated.</param><exception cref="T:System.ArgumentException">Thrown if the historicalValue array is empty.</exception><returns>an array where the first term corresponds to the Moving Average on the last period and the previous value is the value of the Moving average on the previous period and so on.</returns></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MovingAverage.WeightedXDayMovingAverage(System.Double[],System.Double[])"><summary>
            Here we evaluate the Weighted Moving Average (WMA) where for each period for which the WMA is evaluated the historical terms are weighted in accordance with the same set of weights.
            </summary><remarks>
            I.e. The weights shift with the window of the
             historical values.
            
             <h3>Application</h3><p>Generally speaking the WMA is used in order to allow more weight to be
             assigned to more recent price dynamics. Here the length of the weights array
             is used as the length of the period over which the moving average is calculated.
             If you wish to control the number of periods used within the moving average
             then we refer you to <see cref="!:weightedXDayMovingAverage"><c>(historicalPrices, weights, lengthOfMovingAverage)</c></see>.</p></remarks><param name="historicalPrices">An array of historical values, where the first element corresponds to the market on the last period, the second term to the value on previous period and so on.</param><param name="weights">Array of doubles which assigns weights to the k-th previous historical values for the given period on which the moving average is being evaluated. Here k is just the length of the weights array given.</param><exception cref="T:System.ArgumentException">Thrown if the length of the weights and historicalPrices arrays differ or if either array is empty.</exception><returns>an array where the first term is the value of the moving average corresponding of the latest period, the second term is the value for the previous period and so on.</returns></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MovingAverage.WeightedXDayMovingAverage(System.Double[],System.Double[],System.Int32)"><summary>
            Evaluate the Weighted Moving Average (WMA) where the weights associated to all the elements of the historical values are given and the WMA is evaluated for all periods for which there is sufficient historical data.
            </summary><remarks>
            That is, the weights are fixed for all
             given historical values and the window of length <c>lengthOfMA</c> over which
             the GMA is evaluated is shifted along the series.
            
             <h3>Application</h3><p>Generally speaking the WMA where the weights are all set and the window over which
             GMA is evaluated is shifted is used when you wish to give emphasis to particular dates.</p><p><b>Note:</b> The length of the <c>weights</c> array must equal or be greater
             than the length of the <c>historicalPrices</c> array. If it's greater than we
             ignore the supplementary values.</p></remarks><param name="historicalPrices">An array of historical values, where the first element corresponds to the market on the last period, the second term to the value on previous period and so on.</param><param name="weights">Array of doubles which assigns weights to the k-th previous historical values for the given period on which the moving average is being evaluated. Here k is just the length of the weights array given.</param><param name="lengthOfMA">The number of periods over which the weighted moving average is evaluated.</param><exception cref="T:System.ArgumentException">Thrown if the length of the weights and historicalPrices arrays differ or if either array is empty.</exception><returns>an array where the first term is the value of the moving average corresponding of the latest period, the second term is the value for the previous period and so on.</returns></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MovingAverage.LinearlyWeightedMovingAverage(System.Double[],System.Int32)"><summary>
            Returns the value of the Linearly Weighted Moving Average (LWMA) for all periods for which sufficient historical data is provided.
            </summary><remarks>
            The Linearly Weighted Moving Average (LWMA) weights
             the time series by assigning a weight of 1, to the oldest price and a weight of 2, to the second
             oldest price on so on... Until the weight of the most recent value is assigned to be the parameter
             <c>lengthOfMA</c>, after which the LWMA is given by the sum of the weighted prices divided
             by the sum of the weights. This indicator then shifts the window (one place back) over which the
             MA is evaluated and the indicator is then re-evaluated.
            </remarks><param name="priceSeries">An array where the first element is the price on the earliest period, the second element is the price on the next earliest period and on so.</param><param name="lengthOfMA">The number of periods over which the moving average is evaluated for each period.</param><exception cref="T:System.ArgumentException">Thrown if the array <c>priceSeries</c> is empty or if its length is less than the <c>lengthOfMA</c>.</exception><returns>an array where the first term is the LWMA of length <c>lengthOfMA</c> for the latest period, the second term is the LWMA of length <c>lengthOfMA</c> for the previous period and so on.</returns></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MovingAverage.ExponentiallyWeightedMovingAverage(System.Double[],System.Double,System.Int32)"><summary>
            Evaluates the (<c>x</c>-period) Exponentially Weighted Moving Average (EWMA) of a time series provided where <c>x</c> is the length of the time series array which is provided as a parameter, for all periods for which sufficient data is provided.
            </summary><param name="timeSeries">An array where the first value corresponds to the value of the asset in the <c>t</c>th period, and the second value corresponds to the value of the asset in the <c>t-1</c>-th period and so on.</param><param name="smoothingFactor">The number between 0 and 1 which is known as a smoothing factor. The closer the value is to zero the more influence more resent measurements will have on the EWMA.</param><param name="lengthOfMA">The number of periods over which the moving average is evaluated for each period.</param><exception cref="T:System.ArgumentException">Thrown if the timeSeries is empty or if the value given for the smoothing factor lies outside the closed range [0,1].</exception><returns>an array where the first term is the EWMA for the most recent period, the second term is the EWMA for the previous period and so on.</returns></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MovingAverage.TriangularMovingAverage(System.Double[],System.Int32)"><summary>
            Evaluates the <c>x</c>-period Triangular Moving Average (TMA) where <c>x</c> corresponds to the length of the time series array given as a parameter, for all periods for which sufficient data is provided.
            </summary><remarks><h3>Further Explanation</h3><p>The TMA is a special case of the <see cref="!:WeightedxDayMovingAverage"><c>WeightedxDayMovingAverage</c></see>,
             where the term triangular is motivated by the way in which the weights are chosen for the elements
             of the time series array. For example, for a <c>7</c>-period TMA, that is when the time series
             has length <c>7</c>, the corresponding weights of the time series elements are: <c>1</c>,
             <c>2</c>, <c>3</c>, <c>4</c>, <c>3</c>, <c>2</c>, <c>1</c>. In
             the case of the <c>6</c> period TMA the weights would be <c>1</c>, <c>2</c>,
             <c>3</c>, <c>3</c>, <c>2</c>, <c>1</c>.</p></remarks><param name="timeSeries">An array of double where the first term corresponds to value of the market variable (for example, closing price) in the last period, the second term corresponds to the value of the market variable in the previous period and so on.</param><param name="lengthOfMA">The number of periods over which the moving average is evaluated for each period.</param><returns>an array where the first term is the value of the MA corresponding to the most recent period, the second term is the value of the MA on the previous period and so on.</returns></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MovingAverage.MedianMovingAverage(System.Double[],System.Double[],System.Int32)"><summary>
            Returns the Median Moving Average of a given period of the data series provided for all possible periods for the data given.
            </summary><remarks>
            For example, if we are considering
             a trading asset and the periods considered are periods then by passing an array
             containing the closing daily prices of a given asset, and by choosing to use the
             5-period median moving average (i.e. passing a length of the MA of <c>5</c>),
             then we will evaluate the Median Moving Average (GMA) for all periods for which the
             closing price on that period and the four previous periods is known.
            
             <p><b>Remark:</b> This indicator is particularly appropriate for traded assets where
             the opening and closing prices are unreliable. Such an instance are FTSE stocks
             which in the first hour of trading experience relatively low volumes and the closing
             prices are settled through an auction process. Hence for the FTSE market the quoted market
             price at the beginning and end of the market may not be indicative of where a given
             stock is trading within a given period. In such markets it may be more appropriate
             to use the Median Moving Average which will smooth out the effect of uncharacteristic
             shifts at the ends of the trading period.</p></remarks><param name="high">An array where the first element corresponds to the highest market price during the last trading period, the second element corresponds to the highest market price in the previous period, and so on.</param><param name="low">An array where the first element corresponds to the lowest market price during the last trading period, the second term corresponds to the lowest market price in the previous period, and so on.</param><param name="lengthOfMA">The number of periods considered within the evaluation of the moving average of each of the periods on which it can be evaluated.</param><exception cref="T:System.ArgumentException">Thrown if the arrays historicalHigh and historicalLow are of different lengths or if one of these arrays is empty.</exception><returns>an array where the first term is the value of the Median Moving Average for the most recent period, the second term is the value of the Median Moving Average for the previous period and so on.</returns></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MovingAverage.Kairi(System.Double[],System.Double[])"><summary>
            Calculates the Kairi Indicator measure as a percentage of the price, the divergence between a moving average (generally the simple moving average) of the price and the price itself for each period for which there is sufficient historical values.
            </summary><remarks><p><b>Remark:</b> The Kairi Indicator is often used with conjunction with other moving
             averages within trading systems.</p><h3>Evaluation</h3><p>The formulae for the Kairi Indicator is as follows:<br></br><br></br>
             Kairi Indicator = (MA - price) / price<br></br><br></br>
             where MA is the moving average being considered and price is the present price
             of the underlying asset.</p><h3>Application</h3><p>The Kairi Indicator can be used in order to take advantage of an over extended
             trending market. For example, in an upwardly trending market when the price gets
             say more than 10% above the simple moving average, the asset could be sold and
             repurchased when the next hits the simple moving average again.</p><p>The Kairi Indicator could also be used in order to detect market tops and bottom.
             The idea being that market tops and bottoms often occur when the price is at an extreme
             value in relation to its moving average. That is, the Kairi Indicator should take an
             extreme value at market tops and bottoms.</p></remarks><param name="movingAverage">An array where the first term corresponds to the most recent value of the moving average (generally the simple moving average) of the underlying asset, the second term to the previous value and so on.</param><param name="price">An array where the first term corresponds to the present price of the underlying asset for the most recent period, the second term corresponds to the present price of the underlying asset for the previous period and so on.</param><returns>an array where the first term returns the Kairi indicator expressed as decimal format (i.e. 0.01 = 1 percent) for the most recent period, the second term returns the Kairi indicator for the previous period and so on.</returns></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MovingAverage.SimpleCrossingSignal(System.Double,System.Double,System.Double,System.Double)"><summary>
            Generates of trading signal in accordance with the Simple crossing two moving average trading system.
            </summary><remarks>
            This system uses the classical approach of using the crossing of moving
             averages to generate trading signals.
            
             <h3>Selecting the Moving Averages</h3><p>You will need to select the type of moving average used and the
             different periods over which these moving averages are evaluated. In most,
             instances the simple moving average is used but in principle any
             type of moving average could be used. The periods of moving averages
             must be different. Typical choices of period used correspond roughly
             to convenient time periods, such as: 5 (1 week), 20 (1 month),
             50 (2 months) (i.e. 50), 200 (1 year).</p><p>We will refer to the moving average with the shorter period as
             the Short MA, and the moving average with the longer period
             as the Long MA. Corresponding to the fact that they measure the
             trending behavior on shorter and long time spans.</p><h3>Generation of Trading Signals</h3><p>Trading signals are generated when:
             <ul><li><b>Sell Signal</b> - Short MA crosses below the Long MA.
             </li><li><b>Buy Signal</b> - Short MA crosses above the Long MA.
             </li></ul></p></remarks><param name="lastShortMA">The last value of the Short moving average (i.e. the moving average with the shorter period).</param><param name="previousShortMA">The previous value of the short moving average (i.e. the moving average with the shorter period).</param><param name="lastLongMA">The last value of the Long moving average (i.e. the moving average with the longer period).</param><param name="previousLongMA">The previous value of the long moving average (i.e. the moving average with the long period).</param><returns>this method returns a -1, 0, 1; depending on whether a sell, no signal or buy signal was generate by the system.</returns></member><member name="T:dotnetCHARTING.Forecasting.Mrqcof"><summary>
            Used by mrqmin to evaluate the linearized fitting matrix alpha, and vector beta as in (15.5.8),
            and calculate ¥ö2.
            </summary></member><member name="T:dotnetCHARTING.Forecasting.NonLinearFactorModel"><summary>
            This class allows the basis of functions which describes a factor model.
            </summary><remarks>
            A factor model is a real vector space of functions from which a function will be selected 
            in accordance with some criteria. That is, we allow the basis of functions 
            <c>f_1, f_2,..., f_n</c>, which span the factor model, i.e. any element of the factor model 
            can be represented as:
            
            <p><c>f_1(x, a_1, ...., a_n) + f_2(x, a'_1,...., a'_n) + ... + f_n(x, a''_1, ....., a''_n)</c></p><p>where <c>x</c> and <c>a_1,..., a_n, a'_1,..., a'_n,..., a''_1,..., a''_n</c> are
            real variables. For example the term <c>f_1(x, a_1, a_2, a_3)</c>, could correspond to:</p><p><c>f_1(x, a_1, a_2, a_3) = a_1 Sin(a_2 x + a_3)</c></p><p>where <c>a_1, a_2, a_3</c>, are the variables which are to be fitted using the
            fitting algorithm.</p><h3>Ordering of the Variables</h3><p>Once the non-linear factor has been built (using this class) and fitted using the algorithm
            <see cref="!:NonLinearModel.getNonLinearModel"></see>, the values of the <c>a_k</c> which generate the best
            fitted curve in accordance with the least squares approach will be returned within an array. If the
            factor model is The order of the terms of the array will be determined to the order in which the</p></remarks></member><member name="T:dotnetCHARTING.Forecasting.NonLinearFunctionBasis"><summary> This interface represents a one space variable function. It contains one
            method which returns the value at a certain point of an array of function.
            </summary></member><member name="M:dotnetCHARTING.Forecasting.NonLinearFactorModel.#ctor"><summary>
            Creates a new NonLinearFactorModel instance.
            </summary></member><member name="M:dotnetCHARTING.Forecasting.NonLinearFactorModel.AddConstantTerm(System.Double)"><summary>
            Adds a (linear) constant function on one real variable to the function basis.
            </summary><remarks>
            The constant function takes the form:
            
            <p><c>f(x, a_1) = a_1 * constant</c></p><p>where <c>a_1</c> is a real variable and <c>constant</c> is a real number given.</p></remarks><param name="constant">The constant value taken by the constant function.</param></member><member name="M:dotnetCHARTING.Forecasting.NonLinearFactorModel.AddSumOfPowerTerms(System.Double[],System.Double[])"><summary>
            Adds a sum of power terms as an element of the function basis.
            </summary><remarks>
            The sum of power terms will take the follow form:
            
            <p><c>f(x, a_1,..., a_n, a'_1,..., a'_n) = (b_1 * a_1 * x^(p_1 * a'_1)) + ... + (b_n * a_n x^(p_n * a'_n))</c>,</p><p>where <c>b_1,..., b_n, p_1,..., p_n</c> are arbitrary real numbers and
            <c>x</c> and <c>a_1,..., a_n, a'_1, ..., a'_n</c> are rael varibles.</p><p><b>Remark:</b> This term is a direct generalization of the sum of poqwer terms as contained
            within the Linear Factor model.</p><h3>Ordering of the Variables</h3></remarks><param name="coefficients">An array where the k-th term is the coefficient of the (k+1)-th term of the sum of power terms (i.e. <c>b_k</c>).</param><param name="exponents">An array where the k-th term is the exponent and the variable of the (k+1)-th power term (i.e. <c>p_k</c>).</param></member><member name="M:dotnetCHARTING.Forecasting.NonLinearFactorModel.AddCosineSum(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Adds a sum a Cosine functions as an element of the function basis.
            </summary><remarks>
            Please note that the k-th term of the sum which makes up the basis function will take to form:
            
            <p>k-th Term = <c>r_k * a_(4k) * (Cos<sup>n_k + a_(4k+1)</sup> (b_k * a_(4k+2) * x + c_k + a_(4k+3)))</c>, (*)</p><p>where the Cosine function is in terms of radians, and <c>r_k, n_k, b_k, c_k</c>
            are real numbers which are given by the parameters and <c>a_(4k), a_(4k+1), a_(4k+2), a_(4k+3),
            a_(4k+4)</c>, are the variables which are to be fitted. In order to construct the sum you just sum
            over <c>k</c> starting at <c>0</c>. That is, the term from which the basis elements will
            be constructed is:</p><p><c>f(x, a_0, ..., a_4, ...., a_(4n+3)) = (sum of k of n-terms given by (*) above)</c>,</p><p>where <c>a_0,....., a_(4n+3)</c> are the variables of the function which are to be fitted,
            and <c>x</c> is the variable which will not be fitted.</p><h3>Example</h3><p>In order to clarify the above explanation we provide an explicit example. In particular, in order
            to represent the following sum of cosine terms:</p><p><c>f(x, a_0, a_1, ..., a_7) = a_0 * Cos<sup>2 * a_1</sup> (b_0 * a_2 * x + a_3) + a_4 * Cos<sup>(1 * a_5)</sup> (b_1 * a_6 * x + 2 + a_7)</c>,</p><p>you are required to pass the following parameters:</p><h3>Notes on the Radian measure</h3><p>Radians are a means by which to describe the angle and are related to the more commonly
            used degrees as follows:<br></br><br></br><c>360</c> degrees <c>= 2 * Pi * radians</c><br></br><br></br>
            therefore, <c>1</c> radian <c>= 180 / Pi </c> degrees <c>= 57.295...</c> degrees.</p></remarks><param name="cosCoeff">An array where the k-th term is the coefficient of the (k+1)-th term of the sum of Cosine terms (i.e. <c>a_k</c>).</param><param name="exponent">An array where the k-th term is the exponent of the Cosine term of the (k+1)-th term of the sum of the Cosine terms (i.e. <c>b_k</c>).</param><param name="constant">An array where the k-th term is the constant shift in the x-axis of the Cosine term of the (k+1)-th term of the sum of Cosine terms (i.e. <c>c_k</c>).</param><param name="exponent">An array where the k-th term is the exponent of the Cosine term within the (k+1)-th term of the sum of the Cosine terms (i.e. <c>n_k</c>).</param></member><member name="M:dotnetCHARTING.Forecasting.NonLinearFactorModel.AddSineSum(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Adds a sum of Sine functions to the used as basis elements.
            </summary><remarks>
            Please note that each term of the sum which makes up the basis function will take to form:
            
            <p><c>sinCoeff * (sin<sup>n</sup> (coefficient * x + constant))</c>,</p><p>where the Sine function is in terms of radians.</p><h3>Notes on the Radian measure</h3><p>Radians are a means by which to describe the angle and are related to the
            more commonly used degrees as follows:<br></br><br></br>
            360 degrees = 2 * Pi * radians<br></br><br></br>
            therefore, 1 radian = 180 / Pi degrees = 57.295... degrees.</p></remarks><param name="sinCoeff">An array where the k-th term is the coefficient of the whole k-th cosine term within the sum.</param><param name="coefficient">An array where the k-th term is the coefficient of the variable within the k-th sine term within the sum (i.e. <c>coefficient</c> as shown above).</param><param name="constant">An array where the k-th term is the constant shift of the sine function of the k-th term within the sum (i.e. the <c>constant</c> term as shown above).</param><param name="exponent">An array where the k-th term is the exponent of the sine term within the k-th element of the sum (i.e. <c>n</c> as shown above).</param></member><member name="M:dotnetCHARTING.Forecasting.NonLinearFactorModel.AddTanSum(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Adds a sum of Tangent functions to the used as basis elements.
            </summary><remarks>
            Please note that each term of the cum which makes up the basis function will take to form:
            
            <p><c>tanCoeff * (tan<sup>n</sup> (coefficient * x + constant))</c>,</p><p>where the Tangent function is in terms of radians.</p><h3>Notes on the Radian measure</h3><p>Radians are a means by which to describe the angle and are related to the
            more commonly used degrees as follows:<br></br><br></br>
            360 degrees = 2 * Pi * radians<br></br><br></br>
            therefore, 1 radian = 180 / Pi degrees = 57.295... degrees.</p></remarks><param name="tanCoeff">An array where the k-th term is the coefficient of the whole k-th tangent term within the sum.</param><param name="coefficient">An array where the k-th term is the coefficient of the variable within the k-th tangent term within the sum (i.e. <c>coefficient</c> as shown above).</param><param name="constant">An array where the k-th term is the constant shift of the tangent function of the k-th term within the sum (i.e. the <c>constant</c> term as shown above).</param><param name="exponent">An array where the k-th term is the exponent of the tangent term within the k-th element of the sum (i.e. <c>n</c> as shown above).</param></member><member name="M:dotnetCHARTING.Forecasting.NonLinearFactorModel.AddLogSum(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Adds a sum of (natural) log functions to be used as basis elements.
            </summary><remarks>
            Where each of the elements of the sum given will take the following form:
            
            <p><c>logCoeff * log<sup>n</sup> (coefficient * x + constant))</c></p></remarks><param name="logCoeff">An array where the k-th term is the coefficient of the whole k-th logarithm term within the sum.</param><param name="coefficient">An array where the k-th term is the coefficient of the variable within the k-th logarithm term within the sum (i.e. <c>coefficient</c> as shown above).</param><param name="constant">An array where the k-th term is the constant shift of the logarithm function of the k-th term within the sum (i.e. the <c>constant</c> term as shown above).</param><param name="exponent">An array where the k-th term is the exponent of the logarithm term within the k-th element of the sum (i.e. <c>n</c> as shown above).</param></member><member name="M:dotnetCHARTING.Forecasting.NonLinearFactorModel.AddExpSum(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Adds a sum of exponential functions to be used as basis elements.
            </summary><remarks>
            Where each of the elements of the sum given will take the following form:
            
            <p><c>expCoeff * exp<sup>n</sup> (coefficient * x + constant))</c></p></remarks><param name="logCoeff">An array where the k-th term is the coefficient of the whole k-th exponential term within the sum.</param><param name="coefficient">An array where the k-th term is the coefficient of the variable within the k-th exponential term within the sum (i.e. <c>coefficient</c> as shown above).</param><param name="constant">An array where the k-th term is the constant shift of the exponential function of the k-th term within the sum (i.e. the <c>constant</c> term as shown above).</param><param name="exponent">An array where the k-th term is the exponent of the exponential term within the k-th element of the sum (i.e. <c>n</c> as shown above).</param></member><member name="M:dotnetCHARTING.Forecasting.NonLinearFactorModel.DeleteBasisFunction(System.Int32)"><summary>
            Delete the k-th basis function set.
            </summary></member><member name="M:dotnetCHARTING.Forecasting.NonLinearFactorModel.ClearBasisFunction"><summary>
            Delete all function from the basis elements set.
            </summary></member><member name="M:dotnetCHARTING.Forecasting.NonLinearFactorModel.GetNumberOfBasisFunctions"><summary>
            Returns the number of functions set within the function basis.
            </summary></member><member name="M:dotnetCHARTING.Forecasting.NonLinearFactorModel.GetValueAt(System.Double,System.Double[])"><summary>
            Returns an array where the k-th term is the value of the k-th basis function at the <c>evaluationPoint</c>.
            </summary><param name="evaluationPoint">The point at which each of the basis functions are eventuated.</param></member><member name="M:dotnetCHARTING.Forecasting.NonLinearFactorModel.DisplayFunction(System.Double[])"><summary>
            Returns a string which contains the definition of the function
            </summary><returns></returns></member><member name="T:dotnetCHARTING.Forecasting.NonLinearFunction"><summary> This interface represents a one space variable function.
            It contains one method which returns the value at a certain point. 
            </summary></member><member name="M:dotnetCHARTING.Forecasting.NonLinearFunction.getValueAt(System.Double)"><summary> Returns the value of the function in <c>x</c>.
            </summary></member><member name="M:dotnetCHARTING.Forecasting.NonLinearFuncs.GetValueAt(System.Double,System.Double[])">
            
             @param x the point at which the function is evaluated.
             @param a a double array containing the values of the variables coeficients
            
        </member><member name="T:dotnetCHARTING.Forecasting.NonLinearModel"><summary></summary></member><member name="M:dotnetCHARTING.Forecasting.NonLinearModel.#ctor(System.Int32)"><summary>
            Creates a new NonLinearModel instance.
            </summary></member><!-- Badly formed XML comment ignored for member "M:dotnetCHARTING.Forecasting.NonLinearModel.NonLinearModelImplementation.getNonLinearModel(System.Double[],System.Double[],System.Double[],System.Double[],System.Boolean[],System.Int32)" --><member name="T:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistribution"><summary>
            Within this class we deal with the definition and use of the Normal Probability Distribution.
            </summary><remarks>
            The Normal Probability
             Distribution is used in a wide variety of practical applications
             in which the random variables are heights and weights of people,
             IQ scores, scientific measurements, amounts of rainfall and so on.
            
             <p>The Normal Probability Distribution is completely specified
             only by its mathematical rule. Quite often, the distribution is
             symbolized by a graph of the functional relation generated by the
             rule, and the general picture that a normal distribution presents
             is a bell-shaped curve.</p><h3>Using this class</h3><p>The default constructor of this class will instantiate the
             (standard) Normal Probability distribution which has a mean of zero
             and a variance of one. If you wish to consider of normal distribution
             with a different mean and variance then you will need to set them
             using:
             <ol><li> Setting the Mean: The mean is set using <see cref="M:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistribution.SetMean(System.Double)"></see>, and the
             value set can be read using <see cref="M:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistribution.GetMean"></see>.
             </li><li> Setting the Variance: The variance is set using <see cref="M:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistribution.SetVariance(System.Double)"></see>,
             and the value set can be read using <see cref="M:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistribution.SetVariance(System.Double)"></see>.
             </li></ol></p></remarks></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistribution.#ctor"><summary>
            Creates a Normal Probability Distribution instance with its mean set to zero and variance set to <c>1</c>.
            </summary><remarks>
            In order to specify
             your own normal distribution mean and variance use the use the
             <c>Mean</c> and <c>Variance</c> get/set properties.
            </remarks></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistribution.#ctor(System.Double,System.Double)"><summary>
            Creates a new Normal Probability Distribution instance with the specified initial mean and variance.
            </summary><param name="mean">The mean of the normal probability distribution.</param><param name="variance">The variance of the normal probability distribution.</param><exception cref="T:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistributionException">Thrown if the variance is negative.</exception></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistribution.SetMean(System.Double)"><summary>
            Sets the mean for the Normal Probability Distribution.
            </summary><param name="mean">The mean of the Normal Probability Distribution.</param></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistribution.GetMean"><summary>
            Returns the mean for the normal probability distribution.
            </summary></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistribution.SetVariance(System.Double)"><summary>
            Sets the variance for the Normal Probability Distribution.
            </summary><param name="variance">The variance of the Normal Probability Distribution.</param><exception cref="T:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistributionException">Thrown if the variance of the probability distribution is negative.</exception></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistribution.GetVariance"><summary>
            Returns the variance for the normal probability distribution.
            </summary></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistribution.Probability(System.Double,System.Double)"><summary>
            Calculates the Normal Probability on the interval of the real line <c>[lowerBound, upperBound]</c>.
            </summary><param name="lowerBound">The lower bound of the closed interval of the real line.</param><param name="upperBound">The upper bound of the closed interval of the real line.</param></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistribution.ProbabilityDown(System.Double)"><summary>
            Calculates the Normal Probability for the half line <c>[-infinity,upperBound]</c>, where <c>-infinity</c> is <c>minus infinity</c> and <c>upperBound</c> is the upper bound of the half line over which the normal probability is calculated.
            </summary><remarks><p><b>Remark:</b> This function is often referred to as the cumulative probability function.</p></remarks><param name="upperBound">The upper bound of the half line over which the normal probability in calculated.</param><seealso cref="M:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistribution.Cumulative(System.Double)">Evaluates the same value of the cumulative normal distribution set but uses a direct approach using numerical integration.</seealso></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistribution.ProbabilityUp(System.Double)"><summary>
            Calculates the normal probability for the interval <c>[lowerBound,+infinity]</c>, where <c>+infinity</c> is <c>plus infinity</c> and <c>lowerBound</c> is the lower bound of the half line over which the normal probability of calculated.
            </summary><param name="lowerBound">The lower bound of the half line over which the normal probability is calculated.</param></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistribution.DensityFunction(System.Double)"><summary>
            Calculates the Normal Probability Density function in a given point.
            </summary><param name="evaluationPoint">The point of the real line at which the Normal Probability Density function is evaluated.</param></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistribution.DensityFunction(System.Double[],System.Double[])"><summary>
            Calculates the Normal Probability Density function in a given set of points.
            </summary><param name="x">The values of the points of the X axis at which the Normal Probability Density function is evaluated.</param><param name="y">The values of the points of the Y axis at which the Normal Probability Density function is evaluated.</param></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistribution.CalculateMeanAndVariance(System.Double[],System.Double[])"><summary>
            Calculates the mean and variance when a set of points is given.
            </summary><param name="x">The values of the points of the X axis at which the Normal Probability Density function is evaluated.</param><param name="y">The values of the points of the Y axis at which the Normal Probability Density function is evaluated.</param></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistribution.Cumulative(System.Double)"><summary>
            Calculates the value of the cumulative Normal distribution, using Horner's method.
            </summary><remarks>
            That is, the probability for
             the interval <c>[-infinity, upperBound]</c>, where <c>-infinity</c> is <c>minus infinity</c>
             and <c>upperBound</c> is the upper bound of the half line over which the normal probability
             of calculated.
            </remarks><param name="upperBound">The point on the real line at which the cumulative normal distribution is evaluated.</param><seealso cref="M:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistribution.ProbabilityDown(System.Double)">Evaluates the same value of the cumulative normal distribution set but uses a direct approach using numerical integration.</seealso></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistribution.Inverse(System.Double)"><summary>
            Returns the inverse of the normal distribution represented by this instance.
            </summary><remarks>
            This method returns the value of the upper bound of the
             open half line over which the probability function is equal
             to a given value.
            
             <p>For further explanation and explicit formulae please see the
             accompanying PDF documentation.</p></remarks><param name="probability">The value of the probability for this normal distribution, between <c>0</c> and <c>1</c>.</param></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistribution.Inverse(System.Double,System.Double,System.Int32)"><summary>
            Returns the inverse of the normal distribution represented by this instance.
            </summary><remarks>
            This method returns the value of the upper bound of the
             open half line over which the probability function is equal to a
             given value. Within this method we allow the accuracy and the maximum
             number of iteration used to be set.
            
             <p>For further explanation and explicit formulae please see the
             accompanying PDF documentation.</p></remarks><param name="probability">The value of the probability for this normal distribution, between <c>0</c> and <c>1</c>.</param><param name="accuracy">The precision of the returned result. For example, it this parameters is set to 0.01, then the result will be returned to three decimal places.</param><param name="maximumSteps">The maximum number of steps which can be performed.</param></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistribution.InverseFromValue(System.Double,System.Double)"><summary>
            Returns the inverse of the normal distribution represented by this instance.
            </summary><remarks>
            This method returns the value of the upper bound of an interval
             when the lower bound is known and the probability function evaluated to
             a given value.
            
             <p>For further explanation and explicit formulae please see the
             accompanying PDF documentation.</p></remarks><param name="probability">The value of the probability for this normal distribution, between <c>0</c> and <c>1</c>.</param><param name="startingPoint">The starting point which with the solution is sort.</param></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistribution.InverseAroundMean(System.Double)"><summary>
            Returns the inverse of the normal distribution represented by this instance.
            </summary><remarks>
            This method returns the value of the shift required on either
             side of the mean which will define a interval such that the probability
             distribution evaluated over this interval is equal to a given value.
            
             <p>For further explanation and explicit formulae please see the
             accompanying PDF documentation.</p></remarks><param name="probability">The value of the probability for this normal distribution, between <c>0</c> and <c>1</c>.</param></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistribution.GetRandomValue"><summary>
            Generates a random number from the Normal Probability function.
            </summary><remarks>
            That is,
             for a random number within the interval <c>[0,1]</c>, we return the value
             for which the inverse distribution equals the given number.
            </remarks></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistribution.GetRandomValues(System.Int32)"><summary>
            Generates an array of random numbers from the Normal Probability function.
            </summary><remarks>
            That is, for sequence of random numbers within the interval
             <c>[0,1]</c>, we return an array of values for which the inverse
             distribution equals the given array.
            
             <p><b>Remark:</b> This method is identical to the methods
             <c>getRandomValue()</c>, except that here we apply the procedure
             to an array rather than an individual number.</p></remarks></member><member name="T:dotnetCHARTING.Libraries.Statistics.PDistributions.NormalProbabilityDistributionException"><summary>
            This exception is thrown by the NormalProbabilityDistribution class
            when variance is equal to zero.
            </summary></member><!-- Badly formed XML comment ignored for member "T:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Oscillators" --><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Oscillators.#ctor"><summary>
            Creates a new instance.
            </summary></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Oscillators.MoneyFlowIndex(System.Double[],System.Double[],System.Double[],System.Double[])"><summary>
            Evaluates the Money Flow Index (MFI) measures the strength of money flowing in and out of a security.
            </summary><remarks>
            The MFI is related to the
             Directional Movement Indicator of Wellas Wilder, but the MFI
             system also takes into account the volume as well as the price
             action.
            
             <h3>Interpretation</h3><p>Divergence of the indicator within a continuing trend indicates
             that a reversal is imminent. The MFI also is a good means to
             signal market tops and bottoms. A reasonable rule is a market top
             is given more significance when the MFI is above 80 and a market
             bottom is given more significance when the MFI is below 20.</p><h3>Evaluation</h3><p>The Money Flow Index (MFI) is evaluated over a given user defined
             number of trading periods. The evaluation of the MFI follows the
             below steps:
             <nl><li> Evaluates the Money Flow on each period. The Money Flow is the
             product of the Typical Value Indicator (see Filters) for that period
             and the volume.</li><li> Each period is either classified as either a Positive Money Flow period,
             Negative Money Flow period or no Flow period. If the typical price increases
             then the period is a said to be a Positive Money Period, if it decreasing then
             it is said to be a negative money period and if it stays then same then
             it is said the be a no flow period.</li><li> The Positive Money and Negative Money Flow's are calculated by
             summing the Money Flow over the Positive Money Flow Periods or the Negative
             Money Flow periods respectively.</li><li> The Money Flow Index (MFI) is evaluated by dividing the Positive
             Money Flow by the Negative Money Flow.</li></nl></p></remarks><param name="high">An array where the first terms corresponds the trading high on the last trading period, the second term corresponds to the high on the previous trading period and so on. Where the last term corresponds to the highest traded value on the earliest trading period from the period over which the MFI is evaluated.</param><param name="low">An array where the first terms corresponds the trading low on the last trading period, the second term corresponds to the low on the previous trading period and so on. Where the last term corresponds to the lowest traded value on the earliest trading period from the period over which the MFI is evaluated.</param><param name="closing">An array where the first terms corresponds the closing price on the last trading period, the second term corresponds to the closing price on the previous trading period and so on. Where the last term corresponds to the closing price on the earliest trading period from the period over which the MFI is evaluated.</param><param name="volume">An array where the first terms corresponds the volume on the last trading period, the second term corresponds to the volume on the previous trading period and so on. Where the last term corresponds to the volume on the earliest trading period from the period over which the MFI is evaluated.</param><exception cref="T:System.ArgumentException">Thrown if any of the arrays given as parameters are empty, not equal in length or contain elements which is strictly negative.</exception><seealso cref="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Oscillators.MoneyFlowIndexOverPeriod(System.Double[],System.Double[],System.Double[],System.Double[],System.Int32)">Calculates the values of the Money Flow Index indicator over all (sub)periods of a given length rather than just one.</seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Oscillators.MoneyFlowIndexOverPeriod(System.Double[],System.Double[],System.Double[],System.Double[],System.Int32)"><summary>
            Evaluates the Money Flow Index (MFI) which measures the strength of money flowing in and out of a security over all periods for which sufficient data is provided.
            </summary><remarks>
            The MFI is related to the Directional Movement Indicator of
             Wellas Wilder, but the MFI system also takes into account the volume as well
             as the price action.
            
             <h3>Interpretation</h3><p>Divergence of the indicator within a continuing trend indicates that a
             reversal is imminent. The MFI also is a good means to signal market tops
             and bottoms. A reasonable rule is a market top is given more significance
             when the MFI is above <c>80</c> and a market bottom is given more
             significance when the MFI is below <c>20</c>.</p><h3>Evaluation</h3><p>The Money Flow Index (MFI) is evaluated over a given user defined
             number of trading periods. The evaluation of the MFI follows the
             below steps:
             <nl><li> Evaluates the Money Flow on each period. The Money Flow is the
             product of the Typical Value Indicator (see Filters) for that period
             and the volume.</li><li> Each period is either classified as either a Positive Money Flow period,
             Negative Money Flow period or no Flow period. If the typical price increases
             then the period is a said to be a Positive Money Period, if it decreasing then
             it is said to be a negative money period and if it stays then same then
             it is said the be a no flow period.</li><li> The Positive Money and Negative Money Flow's are calculated by
             summing the Money Flow over the Positive Money Flow Periods or the Negative
             Money Flow periods respectively.</li><li> The Money Flow Index (MFI) is evaluated by dividing the Positive
             Money Flow by the Negative Money Flow.</li></nl></p></remarks><param name="high">An array of length equal to the number of periods considered in the indicator evaluation where the first element is the high in the last trading period, the second term is the high in the previous period and so on.</param><param name="low">An array of length equal to the number of periods considered in the indicator evaluation where the first element is the low in the last trading period, the second term is the low in the previous period and so on.</param><param name="closing">An array of length equal to the number of periods considered in the indicator evaluation where the first element is the closing price in the last trading period, the second term is the closing price in the previous trading period and so on.</param><param name="volume">An array where the first terms corresponds the volume on the last trading period, the second term corresponds to the volume on the previous trading period and so on. Where the last term corresponds to the volume on the earliest trading period from the period over which the MFI is evaluated.</param><param name="lengthOfPeriod">An integer which represents the length of the period over which the indicator will be iteratively evaluated.</param><exception cref="T:System.ArgumentException">Thrown if any elements from the arrays high, low, close or volume are strictly negative, or if the length of the arrays is not equal or the lengthOfPeriod is grater than the length of the array high.</exception></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Oscillators.RateOfChange(System.Double,System.Double)"><summary>
            Calculate the n-period rate of change (ROC) indicator for a given period.
            </summary><remarks>
            The (n-period) rate
             of change (ROC) is just the last closing price divided by the closing price n-periods ago.
            
             <p>As with the case with the momentum indicator the rate of change (ROC) indicator
             on extended values and/or turning points indicates oversold or over brought conditions
             (respectively).</p></remarks><param name="close">The last closing price of the asset.</param><param name="nperiodPrice">The closing price of the asset n periods ago.</param><exception cref="T:System.ArgumentException">Thrown if either parameter is strictly negative.</exception></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Oscillators.RateOfChangePeriod(System.Double[],System.Int32)"><summary>
            Calculate the n-period rate of change (ROC) for all periods for which there is sufficient data.
            </summary><remarks>
            The (n-period) rate of change (ROC) is just the last closing price divided by the closing price
             n-periods ago.
            
             <p>As with the case with the momentum indicator the rate of change (ROC) indicator
             on extended values and/or turning points indicates oversold or over brought conditions
             (respectively).</p></remarks><param name="closes">An array of length equal to the number of periods considered in the indicator evaluation where the first element is the closing price in the last trading period, the second term is the closing price in the previous trading period and so on.</param><param name="numberPeriods">The number of periods before to which the closing price is compared.</param><exception cref="T:System.ArgumentException">Thrown if either parameter is strictly negative.</exception><returns>a double array where the first term is the rate of change for the most recent period, the second term is the rate of change for the previous period and so on.</returns></member><member name="T:dotnetCHARTING.Libraries.Statistics.PDistributions.ParetoProbabilityDistribution"><summary>
            With this class we deal with the definition and use of the Pareto Distribution.
            </summary><remarks>
            The Pareto Distribution is useful for modeling the
             distribution of insurance claims when we wish to be cautious in
             assessing the probability of large claims.
            </remarks></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ParetoProbabilityDistribution.#ctor"><summary>
            Creates a new Pareto Probability Distribution instance with parameter A set to 3 and parameter B set to 3.
            </summary><remarks>
            In order to specify
             your own values for these parameters use the <c>ParameterA</c>
             and <c>ParameterB</c> get/set properties.
            </remarks></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ParetoProbabilityDistribution.#ctor(System.Double,System.Double)"><summary>
            Creates a new Pareto Probability Distribution instance using the specified parameters.
            </summary><param name="a">Parameter A of the Pareto Distribution.</param><param name="b">Parameter B of the Pareto Distribution.</param><exception cref="T:dotnetCHARTING.Libraries.Statistics.PDistributions.ParetoProbabilityDistributionException">Thrown if parameter A of the distribution is not strictly greater than <c>2</c>.</exception></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ParetoProbabilityDistribution.SetParameterA(System.Double)"><summary>
            Sets the real parameter <c>a</c> for the Pareto Distribution.
            </summary><remarks>
            See the PDF documentation for further details.
            </remarks></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ParetoProbabilityDistribution.GetParameterA"><summary>
            Gets the real parameter <c>a</c> for the Pareto Distribution.
            </summary></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ParetoProbabilityDistribution.SetParameterB(System.Double)"><summary>
            Sets the real (non-zero) parameter <c>b</c> for the Pareto Distribution.
            </summary><remarks>
            See the PDF documentation for further details.
            </remarks></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ParetoProbabilityDistribution.GetParameterB"><summary>
            Gets the real (non-zero) parameter <c>b</c> for the Pareto Distribution.
            </summary></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ParetoProbabilityDistribution.Probability(System.Double)"><summary>
            Calculates the probability for the values <c>x</c> of the random variable.
            </summary><exception cref="T:dotnetCHARTING.Libraries.Statistics.PDistributions.ParetoProbabilityDistributionException">Is thrown if the value <c>x</c> is less than parameter <c>b</c>.</exception></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ParetoProbabilityDistribution.ProbabilityUp(System.Double)"><summary>
            Calculates the probability for the half line <c>[lowerBound,+infinity]</c>, where <c>lowerBound</c> is the half line and <c>+infinity</c> is <c>plus infinity</c>.
            </summary><param name="lowerBound">The lower bound of the half line.</param><exception cref="T:dotnetCHARTING.Libraries.Statistics.PDistributions.ParetoProbabilityDistributionException">Is thrown if the value <c>lowerBound</c> is less than parameter <c>b</c>.</exception></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ParetoProbabilityDistribution.Probability(System.Double,System.Double)"><summary>
            Calculates the probability for the interval of the real line <c>[lowerBound,upperBound]</c>, where <c>lowerBound</c> is the lower bound of the interval and <c>upperBound</c> is upper bound of the interval.
            </summary><param name="lowerBound">The lower bound of the interval of the real line.</param><param name="upperBound">The upper bound of the interval of the real line.</param><exception cref="T:dotnetCHARTING.Libraries.Statistics.PDistributions.ParetoProbabilityDistributionException">Is thrown if the values <c>x</c> and <c>y</c> are less than parameter <c>b</c>.</exception></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ParetoProbabilityDistribution.DensityFunction(System.Double)"><summary>
            Calculates the Pareto probability density function in a given point.
            </summary><param name="evaluationPoint">The point at which the Pareto probability density function is evaluated.</param></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ParetoProbabilityDistribution.DensityFunction(System.Double[],System.Double[])"><summary>
            Calculates the Pareto Probability Density function in a given set of points.
            </summary><param name="x">The values of the points of the X axis at which the Pareto Probability Density function is evaluated.</param><param name="y">The values of the points of the Y axis at which the Pareto Probability Density function is evaluated.</param></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ParetoProbabilityDistribution.GetMean"><summary>
            Calculates the mean of the Pareto Probability Distribution.
            </summary></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ParetoProbabilityDistribution.GetVariance"><summary>
            Calculates the variance of the Pareto Probability Distribution.
            </summary></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ParetoProbabilityDistribution.Inverse(System.Double)"><summary>
            Returns the inverse of the Pareto distribution represented by this :instance, for a given level of the given probability.
            </summary><remarks>
            This method
             returns the upper bound of the interval for which the probability
             function takes a given value.
            
             <p>For further explanation and explicit formulae please see the
             accompanying documentation.</p></remarks><param name="probability">The value of the probability for this Pareto distribution, between <c>0</c> and <c>1</c>.</param></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ParetoProbabilityDistribution.Inverse(System.Double,System.Double,System.Int32)"><summary>
            Returns the inverse of the Pareto distribution represented by this instance, for a given level of the probability.
            </summary><remarks>
            This method
             returns the upper bound of the interval for which the probability
             function takes a given value. Within this method the accuracy and
             the maximum number of steps which the method can perform can be set.
            
             <p>For further explanation and explicit formulae please see the
             accompanying PDF documentation.</p></remarks><param name="probability">The value of the probability for this Pareto distribution, between <c>0</c> and <c>1</c>.</param><param name="accuracy">The precision of the solution which is returned. For example, if this parameter is set to 0.01, then the returned result will be accurate to three decimal places.</param><param name="maximumSteps">The maximum number of steps which the method can perform.</param></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ParetoProbabilityDistribution.InverseFromValue(System.Double,System.Double)"><summary>
            Returns the inverse of the Pareto distribution represented by this instance, for a given level of probability.
            </summary><remarks>
            This method evaluates
             the upper bound of an interval of the real line when the lower bound
             of the interval and the value of the probability is known.
            
             <p>This method allows the lower bound over which the solution will be
             search for to be set. By choosing a suitable lower bound of the interval
             the inverse of the Pareto distribution will be able to found using less
             iterations and hence more quickly than the inverse method.</p><p>For further explanation and explicit formulae please see the
             accompanying PDF documentation.</p></remarks><param name="probability">The value of the probability for this Pareto distribution, between <c>0</c> and <c>1</c>.</param><param name="lowerBound">The lower bound of the real line over which the solution is searched for.</param></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ParetoProbabilityDistribution.GetRandomValue"><summary>
            Generates a random number from the Pareto Probability function.
            </summary><remarks>
            That is,
             for a randomly selected number from the interval <c>[0,1]</c>, we return
             the value for which the inverse distribution equals the given ramdomly generated
             number.
            </remarks></member><member name="M:dotnetCHARTING.Libraries.Statistics.PDistributions.ParetoProbabilityDistribution.GetRandomValues(System.Int32)"><summary>
            Generates an array of random numbers from the Pareto Probability function.
            </summary><remarks>
            That is, for sequence of randomly generated numbers within the interval
             <c>[0,1]</c>, we return an array of values for which the inverse
             distribution equals the given random generated numbers.
            
             <p><b>Remark:</b> This method is identical to the methods
             <c>getRandomValue()</c>, except that here we apply the procedure
             to an array rather than an individual number.</p></remarks></member><member name="T:dotnetCHARTING.Libraries.Statistics.PDistributions.ParetoProbabilityDistributionException"><summary>
            This exception is thrown by the ParetoProbabilityDistribution class
            if one of the Pareto distribution conditions of existence is not met.
            </summary></member><member name="T:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl"><summary>
            The QualityControl class provides several procedures commonly used to check the quality of the proces control.
            </summary><remarks><p>Towards this end we offer methods for
            the evaluation of the LCL (lower control limit) and UCL(upper control limit) for
            R Chart, S Chart, XBAR Chart and Median Chart for a finite set of data samples.</p></remarks></member><member name="M:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl.#ctor"><summary>
            Creates a new instance of the QualityControl class with an empty initial data set.
            </summary></member><member name="M:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl.#ctor(System.Double[][])"><summary>
             Creates a new QualityControl instance with a specified initial data set.
            </summary><remarks><p></p><h3>Further Explanation</h3><p>For example we have k successive subgroups where k should be at least 20 for acheiving good results.
             Each subgroup contains n measurements. Typically n is between 1 and 9. As a rule 3,4,5 measurements per
             subgroup is quite common. Each line of the two dimensional array given shoud represent an subgroup,
             and each column represent a measurement. For example the element dataSet[2][3] represents the third
             measurement for the second subgroup from the data sample.</p></remarks><param name="dataSet">A two dimensional array where the k-th array corresponds to the k-th subgroup of the data set.</param></member><member name="M:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl.SetDataSet(System.Double[][])"><summary>
            Registers a new data set used from within the business methods of this class.
            </summary><remarks>
            The data set is passed as a parameter and stored within private fields.
            
             <h3>Example</h3><p>Say we wish to display the results of an experiment which has k successive
             subgroups where k is at least 20, in which there are n measurements in each subgroup;
             within a tabulated form, for examples a R Chart. First step required in order
             to achieve this is to register the data set using this methods. After this you can
             calculate the lower and upper limits of the  R Chart by calling <see cref="M:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl.RChartControlLimits"></see>.</p></remarks><param name="dataSet">The set of values to be registered.</param><exception cref="T:dotnetCHARTING.Libraries.Statistics.Statistics.StatisticsException">Thrown if the data set is null.</exception></member><member name="M:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl.GetDataSet"><summary>
            Retrieves the currently registered data set.
            </summary><remarks>
            Note that before you can get the
             date set it must be set using the <see cref="M:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl.SetDataSet(System.Double[][])"></see>.
            </remarks></member><!-- Badly formed XML comment ignored for member "M:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl.RBAR" --><member name="M:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl.RChartControlLimits"><summary>
            Calcuates the control limits for the R Chart.
            </summary><remarks><h3>Evaluation</h3><p>Find the lower control limits (LCL) and the upper control limits (UCL) with the following formulas:
             <br></br><c>LCL = D(3)RBAR</c><br></br><c>UCL = D(4)RBAR</c><br></br>where RBAR is the centerline for the R Chart calculated by the method <see cref="M:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl.RBAR"></see>.
             D(3) and D(4) are constants which vary according with the number of measurements in the subgroup
             and can be found in the table below:
             <br></br><table border="1"><tr><td>n</td><td>D(3)</td><td>D(4)</td></tr><tr><td>2</td><td>0</td><td>3.267</td></tr><tr><td>3</td><td>0</td><td>2.574</td></tr><tr><td>4</td><td>0</td><td>2.282</td></tr><tr><td>5</td><td>0</td><td>2.114</td></tr><tr><td>6</td><td>0</td><td>2.004</td></tr><tr><td>7</td><td>0.076</td><td>1.924</td></tr><tr><td>8</td><td>0.136</td><td>1.864</td></tr><tr><td>9</td><td>0.184</td><td>1.816</td></tr></table><br></br>where n represents the number of measurements of each subgroup.
             </p></remarks><exception cref="T:dotnetCHARTING.Libraries.Statistics.Statistics.StatisticsException">Thrown if the data set is null.</exception><returns>A double array. The first element of this double array is LCL and second element is UCL.</returns></member><member name="M:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl.RChartStandardDeviation"><summary>
            Calculates the proces standard deviation once the R Chart is in a state of statistical control.
            </summary><remarks><p>
             The R Chart is in a state of statisical control if all the points from the data sample lie within
             the upper control limits (UCL) and the lower control limits (LCL). If a point is outside the control
             limits it means that the process is out of statistical control and a source of special case variation
             is present. You should determine the cause of this variation and eliminate it.</p><h3>Evaluation</h3><p>The standard deviation is evaluated by the following formula:
             <br></br><c>rSigma = RBAR/d(2)</c><br></br> where:
             <ol><li><c>RBAR</c> is the centerline of the R Chart calculated by the method <see cref="M:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl.RBAR"></see>;</li><li><c>d(2)</c> is an array of constants which depends of the number n of measurements in
             the subgroup.</li></ol><br></br><table border="1"><tr><td>n</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr><tr><td>d(2)</td><td>1.128</td><td>1.6932</td><td>2.059</td><td>2.326</td><td>2.524</td><td>2.704</td><td>2.847</td><td>2.970</td></tr></table></p></remarks></member><!-- Badly formed XML comment ignored for member "M:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl.XDBLBAR" --><member name="M:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl.RXBARChartControlLimits"><summary>
            Calcuates the control limits for the XBAR Chart using R Chart.
            </summary><remarks><h3>Evaluation</h3><p>Find the lower contrAol limits (LCL) and the upper control limits (UCL) with the following formulas:
             <br></br><c>LCL= XDBLBAR - A(2)*RBAR</c><br></br><c>UCL= XDBLBAR + A(2)*RBAR</c><br></br>where:
             <ol><li><c>XDBLBAR</c> is the grand mean of all sugroups calculated by the <see cref="M:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl.XDBLBAR"></see> method;</li><li><c>RBAR</c> is the range of all subgroups calculated by the <see cref="M:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl.RBAR"></see> method;</li><li><c>A(2)</c> is an array of constant which depends of the number of measurements within the subgroup.</li></ol><br></br><table border="1"><tr><td>n</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr><tr><td>A(2)</td><td>1.880</td><td>1.023</td><td>0.729</td><td>0.577</td><td>0.483</td><td>0.419</td><td>0.373</td><td>0.337</td></tr></table></p></remarks><exception cref="T:dotnetCHARTING.Libraries.Statistics.Statistics.StatisticsException">Thrown if the data set is null.</exception><returns>A double array.The first element of this double array is LCL and second element is UCL.</returns></member><!-- Badly formed XML comment ignored for member "M:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl.SBAR" --><member name="M:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl.SChartControlLimits"><summary>
            Calcuates the control limits for the S Chart.
            </summary><remarks><h3>Evaluation</h3><p>Find the lower control limits (LCL) and the upper control limits (UCL) with the following formulas:
             <br></br><c>LCL = B(3)SBAR</c><br></br><c>UCL = B(4)SBAR</c><br></br>where SBAR is the centerline for the S Chart calculated by the <see cref="M:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl.SBAR"></see> method.
             B(3) and B(4) are constants which vary according with the number of measurements in the subgroup
             and can be found in the table below:
             <br></br><table border="1"><tr><td>n</td><td>B(3)</td><td>B(4)</td></tr><tr><td>2</td><td>0</td><td>3.267</td></tr><tr><td>3</td><td>0</td><td>2.568</td></tr><tr><td>4</td><td>0</td><td>2.266</td></tr><tr><td>5</td><td>0</td><td>2.089</td></tr><tr><td>6</td><td>0.03</td><td>1.970</td></tr><tr><td>7</td><td>0.118</td><td>1.882</td></tr><tr><td>8</td><td>0.185</td><td>1.815</td></tr><tr><td>9</td><td>0.239</td><td>1.761</td></tr></table><br></br>where n represents the number of measurements of each subgroup.
             </p></remarks><exception cref="T:dotnetCHARTING.Libraries.Statistics.Statistics.StatisticsException">Thrown if the data set is null.</exception><returns>A double array. The first element of this double array is LCL and second element is UCL.</returns></member><!-- Badly formed XML comment ignored for member "M:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl.SChartStandardDeviation" --><member name="M:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl.SXBARChartControlLimits"><summary>
            Calcuates the control limits for the XBAR Chart using S Chart.
            </summary><remarks><h3>Evaluation</h3><p>Find the lower control limits (LCL) and the upper control limits (UCL) with the following formulas:
             <br></br><c>LCL= XDBLBAR - A(3)*SBAR</c><br></br><c>UCL= XDBLBAR + A(3)*SBAR</c><br></br> where:
             <ol><li><c>XDBLBAR</c> is the grand mean of all sugroups calculated by the <see cref="M:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl.XDBLBAR"></see> method;</li><li><c>SBAR</c> is the range of all subgroups calculated by the <see cref="M:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl.SBAR"></see> method;</li><li><c>A(3)</c> is an array of constant which depends of the number of measurements within the subgroup.</li></ol><br></br><table border="1"><tr><td>n</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr><tr><td>A(3)</td><td>2.659</td><td>1.954</td><td>1.628</td><td>1.427</td><td>1.287</td><td>1.182</td><td>1.099</td><td>1.032</td></tr></table></p></remarks><exception cref="T:dotnetCHARTING.Libraries.Statistics.Statistics.StatisticsException">Thrown if the data set is null.</exception><returns>A double array.The first element of this double array is LCL and second element is UCL.</returns></member><member name="M:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl.SMedianChartControlLimits"><summary>
            Calcuates the control limits for the Median Chart using S Chart.
            </summary><remarks><h3>Evaluation</h3><p>Find the lower control limits (LCL) and the upper control limits (UCL) with the following formulas:
             <br></br><c>LCL= XDBLBAR - A(7)*SBAR</c><br></br><c>UCL= XDBLBAR + A(7)*SBAR</c><br></br> where:
             <ol><li><c>XDBLBAR</c> is the grand mean of all sugroups calculated by the <see cref="M:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl.XDBLBAR"></see> method;</li><li><c>SBAR</c> is the range of all subgroups calculated by the <see cref="M:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl.SBAR"></see> method;</li><li><c>A(7)</c> is an array of constant which depends of the number of measurements within the subgroup.</li></ol><br></br><table border="1"><tr><td>n</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr><tr><td>A(7)</td><td>1.880</td><td>1.067</td><td>0.796</td><td>0.660</td><td>0.580</td><td>0.521</td><td>0.477</td><td>0.444</td></tr></table></p></remarks><exception cref="T:dotnetCHARTING.Libraries.Statistics.Statistics.StatisticsException">Thrown if the data set is null.</exception><returns>A double array.The first element of this double array is LCL and second element is UCL.</returns></member><member name="M:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl.RMedianChartControlLimits"><summary>
            Calcuates the control limits for the Median Chart using R Chart.
            </summary><remarks><h3>Evaluation</h3><p>Find the lower control limits (LCL) and the upper control limits (UCL) with the following formulas:
             <br></br><c>LCL= XDBLBAR - A(6)*RBAR</c><br></br><c>UCL= XDBLBAR + A(6)*RBAR</c><br></br> where:
             <ol><li><c>XDBLBAR</c> is the grand mean of all sugroups calculated by the <see cref="M:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl.XDBLBAR"></see> method;</li><li><c>RBAR</c> is the range of all subgroups calculated by the <see cref="M:dotnetCHARTING.Libraries.Statistics.Statistics.QualityControl.RBAR"></see> method;</li><li><c>A(6)</c> is an array of constant which depends of the number of measurements within the subgroup.</li></ol><br></br><table border="1"><tr><td>n</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr><tr><td>A(6)</td><td>1.880</td><td>1.187</td><td>0.796</td><td>0.691</td><td>0.549</td><td>0.509</td><td>0.434</td><td>0.412</td></tr></table></p></remarks><exception cref="T:dotnetCHARTING.Libraries.Statistics.Statistics.StatisticsException">Thrown if the data set is null.</exception><returns>A double array.The first element of this double array is LCL and second element is UCL.</returns></member><member name="T:dotnetCHARTING.Libraries.Finance.Trading.Indicators.ReferencedServiceException"><summary>
            This exception might be thrown by a class to signal an error in another class.
            </summary></member><member name="T:dotnetCHARTING.Forecasting.SingleFactorModel"><summary></summary></member><member name="M:dotnetCHARTING.Forecasting.SingleFactorModel.#ctor"><summary>
            Creates a new Line instance.
            </summary></member><member name="M:dotnetCHARTING.Forecasting.SingleFactorModel.GetConstant"><summary>
            Gets the value of the constant term within the line of best fit, which can be called once the line of est fit has been constructed using <see cref="!:SetLinearLeastSquares"></see>.
            </summary><remarks>
            Recall,
             that the line of best fit takes the form:<br></br><br></br><c>y = Coefficient * x + (Constant Term)</c><br></br><br></br>
             which has been fitted in accordance within the least squares approach.
            </remarks></member><member name="M:dotnetCHARTING.Forecasting.SingleFactorModel.GetCoefficient"><summary>
            Returns the value of the coefficient within the line of best fit, which can be called once the line of est fit has been constructed using <see cref="!:SetLinearLeastSquares"></see>.
            </summary><remarks>
            Recall,
             that the line of best fit takes the form:<br></br><br></br><c>y = Coefficient * x + (Constant Term)</c><br></br><br></br>
             which has been fitted in accordance within the least squares approach.
            </remarks></member><member name="M:dotnetCHARTING.Forecasting.SingleFactorModel.GetUncertaintyOfConstant"><summary>
            Gets the uncertainty of the constant term.
            </summary></member><member name="M:dotnetCHARTING.Forecasting.SingleFactorModel.GetUncertaintyOfCoefficient"><summary>
            Gets the uncertainty of the coefficient.
            </summary></member><member name="M:dotnetCHARTING.Forecasting.SingleFactorModel.GetChiSquare"><summary>
            Gets the Chi-Square of the line of best fit.
            </summary><remarks>
            The Chi-Square is precisely the quantity which
             is required to be minimized when the line of best fit is sort.
            </remarks></member><member name="M:dotnetCHARTING.Forecasting.SingleFactorModel.GetProbabilityOfGoodFit"><summary>
            Gets the probability of a good fit.
            </summary></member><member name="M:dotnetCHARTING.Forecasting.SingleFactorModel.SetLineWithWeights(System.Double[],System.Double[],System.Double[],System.Int32)"><summary>
            This is for the statefull version using get data.
            </summary><remarks>
            Given a set of data points x[0..ndata-1],y[0..ndata-1] with individual standard deviations
             sig[0..ndata-1], fit them to a straight line y = a + bx by minimizing ¥ö2. Returned are
             a,b and their respective probable uncertainties siga and sigb, the chi-square chi2, and the
             goodness-of-fit probability q (that the fit would have ¥ö2 this large or larger). If mwt=0 on
             input, then the standard deviations are assumed to be unavailable: q is returned as 1.0 and
             the normalization of chi2 is to unit standard deviation on all points.
            </remarks></member><member name="M:dotnetCHARTING.Forecasting.SingleFactorModel.LineWithWeights(System.Double[],System.Double[],System.Double[],System.Int32)"><summary>
            Stateless version of this method.
            </summary><remarks>
            Given a set of data points x[0..ndata-1],y[0..ndata-1] with individual standard deviations
             sig[0..ndata-1], fit them to a straight line y = a + bx by minimizing ¥ö2. Returned are
             a,b and their respective probable uncertainties siga and sigb, the chi-square chi2, and the
             goodness-of-fit probability q (that the fit would have ¥ö2 this large or larger). If mwt=0 on
             input, then the standard deviations are assumed to be unavailable: q is returned as 1.0 and
             the normalization of chi2 is to unit standard deviation on all points.
            </remarks></member><member name="M:dotnetCHARTING.Forecasting.SingleFactorModel.SetLine(System.Double[],System.Double[])"><summary>
            This is for the statefull version using get data.
            </summary><remarks>
            Given a set of data points x[0..ndata-1],y[0..ndata-1], fit them to a straight line y = a + bx
             by minimizing ¥ö2. Returned are a,b.
            </remarks></member><member name="M:dotnetCHARTING.Forecasting.SingleFactorModel.Line(System.Double[],System.Double[])"><summary>
            Stateless version of this method.
            </summary><remarks>
            Given a set of data points x[0..ndata-1],y[0..ndata-1], fit them to a straight line y = a + bx
             by minimizing ¥ö2. Returned are a,b.
            </remarks></member><member name="M:dotnetCHARTING.Forecasting.SingleFactorModel.SetLogarithmFit(System.Double[],System.Double[])"><summary>
            Find the best fit for the function f(x) = a + b * ln(x).
            </summary></member><member name="M:dotnetCHARTING.Forecasting.SingleFactorModel.LogarithmFit(System.Double[],System.Double[])"><summary>
            Find the best fit for the function f(x) = a + b * ln(x).
            </summary></member><member name="M:dotnetCHARTING.Forecasting.SingleFactorModel.SetPowerFit(System.Double[],System.Double[])"><summary>
            Find the best fit for the function f(x) = A * pow (x, B ) where B = b and A = pow(e, a).
            </summary></member><member name="M:dotnetCHARTING.Forecasting.SingleFactorModel.PowerFit(System.Double[],System.Double[])"><summary>
            Find the best fit for the function f(x) = A * pow (x, B ) where B = b and A = pow(e, a).
            </summary></member><member name="M:dotnetCHARTING.Forecasting.SingleFactorModel.SetExpFit(System.Double[],System.Double[])"><summary>
            Find the best fit for the function f(x) = A * pow(e, B*x ) where B = b and A = exp( a).
            </summary></member><member name="M:dotnetCHARTING.Forecasting.SingleFactorModel.ExpFit(System.Double[],System.Double[])"><summary>
            Find the best fit for the function f(x) = A * pow(e, B*x ) where B = b and A = exp( a).
            </summary></member><member name="T:dotnetCHARTING.Forecasting.SingleFactorModelStateless"><summary>
            This is a stateless verison of the {.
            </summary><remarks>
            @linear Linear} class.
            </remarks></member><member name="M:dotnetCHARTING.Forecasting.SingleFactorModelStateless.#ctor"><summary>
            Creates a new instance.
            </summary></member><member name="M:dotnetCHARTING.Forecasting.SingleFactorModelStateless.LineWithWeights(System.Double[],System.Double[],System.Double[],System.Int32)"><summary>
            Stateless version of this method.
            </summary><remarks>
            Given a set of data points x[0..ndata-1],y[0..ndata-1] with individual standard deviations
             sig[0..ndata-1], fit them to a straight line y = a + bx by minimizing ¥ö2. Returned are
             a,b and their respective probable uncertainties siga and sigb, the chi-square chi2, and the
             goodness-of-fit probability q (that the fit would have ¥ö2 this large or larger). If mwt=0 on
             input, then the standard deviations are assumed to be unavailable: q is returned as 1.0 and
             the normalization of chi2 is to unit standard deviation on all points.
            </remarks></member><member name="M:dotnetCHARTING.Forecasting.SingleFactorModelStateless.Line(System.Double[],System.Double[])"><summary>
            Stateless version of this method.
            </summary><remarks>
            Given a set of data points x[0..ndata-1],y[0..ndata-1], fit them to a straight line y = a + bx
             by minimizing %v2. Returned are a,b.
            </remarks></member><member name="M:dotnetCHARTING.Forecasting.SingleFactorModelStateless.LogarithmFit(System.Double[],System.Double[])"><summary>
            Find the best fit for the function f(x) = a + b * ln(x).
            </summary></member><member name="M:dotnetCHARTING.Forecasting.SingleFactorModelStateless.PowerFit(System.Double[],System.Double[])"><summary>
            Find the best fit for the function f(x) = A * pow (x, B ) where B = b and A = pow(e, a).
            </summary></member><member name="M:dotnetCHARTING.Forecasting.SingleFactorModelStateless.ExpFit(System.Double[],System.Double[])"><summary>
            Find the best fit for the function f(x) = A * pow(e, B*x ) where B = b and A = exp( a).
            </summary></member><member name="T:dotnetCHARTING.Libraries.Statistics.Statistics.StatisticsException"><summary>
            This exception describes Statistics specific errors occured during
            computations.
            </summary></member><!-- Badly formed XML comment ignored for member "T:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Stochastics" --><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Stochastics.#ctor"><summary>
            Creates a new instance.
            </summary></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Stochastics.KFastStochastic(System.Double[],System.Double[],System.Double)"><summary>
            Evaluation of the Fast %K Stochastic.
            </summary><remarks><h4>Indicator Evaluation</h4><p>The Stochastic %K depends on the following variable:</p><ul><li><b>Periods</b> - the number of previous time periods used over which the
             closing price is compared.</li></ul><p>Within this method these parameters are set indirectly by the length of the
             array's which are passed to the method. That is, if the array's have length 5,
             then the fast Stochastic is evaluated over the last 5 trading period, referred
             to as the 5-day %K Stochastic.</p><p>Now the formulae for the Stochastic %K is:</p><br></br><br></br>
              100 x (Last Close -  Lowest low)/(Highest high - Lowest low)<br></br><br></br><p>where the "lowest low" (respec. "highest high") is the highest (respec.
             lowest) close of the asset over the period under consideration. Since the
             "Last close", will lie between the highest high and lowest low this indicator
             will lie between 0 and 100.</p></remarks><param name="high">An array of trading highs during the previous trading sessions. The length of this array corresponds to the number of periods over which the %K Stochastic is evaluated.</param><param name="low">An array of trading lows during the previous trading sessions. The length of this array corresponds to the number of periods over which the %K Stochastic is evaluated.</param><param name="close">The close price of the asset.</param></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Stochastics.KFastStochasticPeriod(System.Double[],System.Double[],System.Double[],System.Int32)"><summary>
            Evaluation of the Fast %K Stochastic when the number of periods used over which the closing price is compared is given.
            </summary><remarks><h4>Indicator Evaluation</h4><p>The Stochastic %K depends on the following variable:</p><ul><li><b>Periods</b> - the number of previous periods used over which the
             closing price is compared.</li></ul><p>Now the formulae for the Stochastic %K over a is:</p><br></br><br></br>
              100 x (Last Close -  Lowest low)/(Highest high - Lowest low)<br></br><br></br><p>where the "lowest low" (respec. "highest high") is the highest (respec.
             lowest) close of the asset over the period under consideration. Since the
             "Last close", will lie between the highest high and lowest low this indicator
             will lie between 0 and 100.</p></remarks><param name="highs">An array of trading highs during the previous trading sessions. The length of this array should be greater then the number of periods over which the %K Stochastic is evaluated.</param><param name="lows">An array of trading lows during the previous trading sessions. The length of this array should be greater then the number of periods over which the %K Stochastic is evaluated.</param><param name="close">An array containing the closing prices of the asset.</param><param name="noOfPeriods">An integer which represents the number of periods used over which the closing price is compared.</param></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Stochastics.DStochastic(System.Double[],System.Int32)"><summary>
            Evaluate the (general) %D Stochastic.
            </summary><remarks>
            This is just the moving average of the (fast)
             %K Stochastic. When the simple moving average is used and the moving average is
             take over three days, the resulting indicator to referred to as the (slow) %K Stochastic.
            
             <p>As one would expect the Moving Average %D of the %K Stochastic depends on:
             <ul><li><b>%D Periods</b> - The number of periods over which the moving average is
             evaluated.</li><li><b>MA Method</b> - This is the method by which the moving average of the
             Stochastic %K is evaluated. We offer a range of methods for the evaluation of the
             moving average, these include: simple, exponential, geometric, weighted,
             linearly weighted and exponentially weighted.</li></ul></p><p><b>Remark</b> When the simple moving average is used and it is evaluated over
             3-days, then the %D Stochastic reduces to what is known as the slow %K
             Stochastic.</p></remarks><param name="stochastic">The value of the stochastic over the period considered.</param><param name="method">Determines the methods used for the evaluation of the moving average in accordance with the following key: <ol><li> 1 = Simple moving average</li><li> 2 = Geometric moving average</li><li> 3 = Linearly weighted moving average</li><li> 4 = Exponentially Weighted Moving average within smoothing fact set to be 0.5.</li></ol><p>For further details concerning the definition of these moving averages please see the accompanying PDF documentation or the API documentation for <see cref="T:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MovingAverage"></see>.</p>.</param></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Stochastics.DStochastic(System.Double[],System.Int32,System.Int32)"><summary>
            Evaluate the (general) %D Stochastic.
            </summary><remarks>
            This is just the moving average of the (fast)
             %K Stochastic. When the simple moving average is used and the moving average is
             take over three days, the resulting indicator to referred to as the (slow) %K Stochastic.
            
             <p>As one would expect the Moving Average %D of the %K Stochastic depends on:
             <ul><li><b>%D Periods</b> - The number of periods over which the moving average is
             evaluated.</li><li><b>MA Method</b> - This is the method by which the moving average of the
             Stochastic %K is evaluated. We offer a range of methods for the evaluation of the
             moving average, these include: simple, exponential, geometric, weighted,
             linearly weighted and exponentially weighted.</li></ul></p><p><b>Remark</b> When the simple moving average is used and it is evaluated over
             3-days, then the %D Stochastic reduces to what is known as the slow %K
             Stochastic.</p></remarks><param name="stochastic">The value of the stochastic over the period considered.</param><param name="method">Determines the methods used for the evaluation of the moving average in accordance with the following key: <ol><li> 1 = Simple moving average</li><li> 2 = Geometric moving average</li><li> 3 = Linearly weighted moving average</li><li> 4 = Exponentially Weighted Moving average within smoothing fact set to be 0.5.</li></ol><p>For further details concerning the definition of these moving averages please see the accompanying PDF documentation or the API documentation for <see cref="T:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MovingAverage"></see>.</p>.</param><param name="lengthOfMA">The number of periods over which the moving average is considered.</param></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Stochastics.DStochastic(System.Double[],System.Double[],System.Double[],System.Int32,System.Int32,System.Int32)"><summary>
            Evaluate the (general) %D Stochastic.
            </summary><remarks>
            This is just the moving average of the (fast)
             %K Stochastic. When the simple moving average is used and the moving average is
             take over three days, the resulting indicator to referred to as the (slow) %K Stochastic.
            
             <p>As one would expect the Moving Average %D of the %K Stochastic depends on:
             <ul><li><b>%D Periods</b> - The number of periods over which the moving average is
             evaluated.</li><li><b>MA Method</b> - This is the method by which the moving average of the
             Stochastic %K is evaluated. We offer a range of methods for the evaluation of the
             moving average, these include: simple, exponential, geometric, weighted,
             linearly weighted and exponentially weighted.</li></ul></p><p><b>Remark</b> When the simple moving average is used and it is evaluated over
             3-days, then the %D Stochastic reduces to what is known as the slow %K
             Stochastic.</p></remarks><param name="high">An array of trading highs during the previous trading sessions. The length of this array should be greater then the number of periods over which the %K Stochastic is evaluated.</param><param name="low">An array of trading lows during the previous trading sessions. The length of this array should be greater then the number of periods over which the %K Stochastic is evaluated.</param><param name="close">An array containing the closing prices of the asset.</param><param name="noOfPeriods">An integer which represents the number of periods used over which the closing price is compared.</param><param name="method">Determines the methods used for the evaluation of the moving average in accordance with the following key: <ol><li> 1 = Simple moving average</li><li> 2 = Geometric moving average</li><li> 3 = Linearly weighted moving average</li><li> 4 = Exponentially Weighted Moving average within smoothing fact set to be 0.5.</li></ol><p>For further details concerning the definition of these moving averages please see the accompanying PDF documentation or the API documentation for <see cref="T:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MovingAverage"></see>.</p>.</param><param name="lengthOfMA">The number of periods over which the moving average is considered.</param></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Stochastics.ExtremeValueSignal(System.Double,System.Double,System.Double,System.Double)"><summary>
            Implements a general framework for producing extreme value trading signals using Stochastic indicators.
            </summary><remarks>
            Note, that the general ides of this approach
             is to seek points which are oversold or over brought levels which are turning.
            
             <h4>Methodology</h4><p>Buy when the Oscillator (either the Stochastic %K or
             its moving average %D) falls below a specific level (e.g. 20) and then
             rises above that level. Sell when the Oscillator rises above a specific
             level (e.g. 80) and then falls below that level. This approach is the
             preferred method of the Stochastics original creator George Lane.</p></remarks><param name="extremeLow">This is the level at which the Stochastic is believed to indicate an oversold level. The Stochastic always lies between 0 and 100, and a suggested extreme low value to take is 20.</param><param name="extremeHigh">This is the level at which the Stochastic is believed to indicate an over brought level. The Stochastic always lies between 0 and 100, and a suggested extreme high value is 80.</param><param name="lastStochastic">- This is the last value of the Stochastic (either %K or %D).</param><param name="previousStochastic">- This is the previous value of the Stochastic (either %K or %D).</param><returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate that either a sell, no action or buy signal was generated.</returns></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Stochastics.ExtremeValueKSignalPeriod(System.Double,System.Double,System.Double[],System.Double[],System.Double[],System.Int32)"><summary>
            Implements a general framework for producing extreme value trading signals using Stochastic indicators.
            </summary><remarks>
            Note, that the general ideea of this approach
             is to seek points which are oversold or over brought levels which are turning.
            
             <h4>Methodology</h4><p>Buy when the  the Stochastic %K falls below a specific level (e.g. 20) and then
             rises above that level. Sell when the Oscillator rises above a specific
             level (e.g. 80) and then falls below that level. This approach is the
             preferred method of the Stochastics original creator George Lane.</p></remarks><param name="extremeLow">This is the level at which the Stochastic is believed to indicate an oversold level. The Stochastic always lies between 0 and 100, and a suggested extreme low value to take is 20.</param><param name="extremeHigh">This is the level at which the Stochastic is believed to indicate an over brought level. The Stochastic always lies between 0 and 100, and a suggested extreme high value is 80.</param><param name="high">An array of trading highs during the previous trading sessions. The length of this array should be greater then the number of periods over which the %K Stochastic is evaluated.</param><param name="low">An array of trading lows during the previous trading sessions. The length of this array should be greater then the number of periods over which the %K Stochastic is evaluated.</param><param name="close">An array containing the closing prices of the asset.</param><param name="noOfPeriods">An integer which represents the number of periods used over which the closing price is compared.</param><returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate that either a sell, no action or buy signal was generated.</returns><seealso cref="!:Stochastic.ExtremeValueSignal">This indicator is a special case of extremeValueKSignalPeriod and calculates the extremeValueSignal indicator for a single period.</seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Stochastics.ExtremeValueDSignalPeriod(System.Double,System.Double,System.Double[],System.Double[],System.Double[],System.Int32,System.Int32,System.Int32)"><summary>
            Implements a general framework for producing extreme value trading signals using Stochastic indicators.
            </summary><remarks>
            Note, that the general ides of this approach
             is to seek points which are oversold or over brought levels which are turning.
            
             <h4>Methodology</h4><p>Buy when the Oscillator the Stochastic %D falls below a specific level (e.g. 20) and then
             rises above that level. Sell when the Oscillator rises above a specific
             level (e.g. 80) and then falls below that level. This approach is the
             preferred method of the Stochastics original creator George Lane.</p></remarks><param name="extremeLow">This is the level at which the Stochastic is believed to indicate an oversold level. The Stochastic always lies between 0 and 100, and a suggested extreme low value to take is 20.</param><param name="extremeHigh">This is the level at which the Stochastic is believed to indicate an over brought level. The Stochastic always lies between 0 and 100, and a suggested extreme high value is 80.</param><param name="high">An array of trading highs during the previous trading sessions. The length of this array should be greater then the number of periods over which the %D Stochastic is evaluated.</param><param name="low">An array of trading lows during the previous trading sessions. The length of this array should be greater then the number of periods over which the %D Stochastic is evaluated.</param><param name="close">An array containing the closing prices of the asset.</param><param name="noOfPeriods">An integer which represents the number of periods used over which the closing price is compared.</param><param name="method">Determines the methods used for the evaluation of the moving average in accordance with the following key: <ol><li> 1 = Simple moving average</li><li> 2 = Geometric moving average</li><li> 3 = Linearly weighted moving average</li><li> 4 = Exponentially Weighted Moving average within smoothing fact set to be 0.5.</li></ol><p>For further details concerning the definition of these moving averages please see the accompanying PDF documentation or the API documentation for <see cref="T:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MovingAverage"></see>.</p>.</param><param name="lengthOfMA">The number of periods over which the moving average is considered.</param><returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate that either a sell, no action or buy signal was generated.</returns><seealso cref="!:Stochastic.ExtremeValueSignal">This indicator is a special case of extremeValueKSignalPeriod and calculates the extremeValueSignal indicator for a single period.</seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Stochastics.CrossingSignal(System.Double,System.Double,System.Double,System.Double)"><summary>
            Implements a general framework for producing trading signals based on the crossing of two Stochastics.
            </summary><remarks><p><b>Methodology</b></p><p>Buy when the Stochastic %K, crosses above the MA %D and
             sell when the Stochastic %K falls below the MA of Stochastic %D. Since
             this approach is prone to being whip-sawed we use two (general) Stochastics
             so that a MA of the %K Stochastic of the first Stochastic and an even more
             smoothed second Stochastic. In this case a sell signal is generated if the
             first (more sensitive) Stochastic cross below the second (smoothed) Stochastic,
             and a buy signal is generated if the first Stochastic crosses above the second
             Stochastic.</p></remarks><param name="firstStochasticLast">- The last value of the first Stochastic. Where the first Stochastic is either the (fast) %K Stochastic or a smoothed moving average of this indicator.</param><param name="firstStochasticPrevious">- The previous value of the first Stochastic.</param><param name="secondStochasticLast">- The last value of the second Stochastic.</param><param name="secondStochasticPrevious">- The previous value of the second Stochastic is a moving average of the first stochastic.</param><returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate that either a sell, no action or buy signal was generated.</returns></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Stochastics.CrossingSignalPeriod(System.Double[],System.Double[])"><summary>
            Implements a general framework for producing trading signals based on the crossing of two Stochastics.
            </summary><remarks><p><b>Methodology</b></p><p>Buy when the Stochastic %K, crosses above the MA %D and
             sell when the Stochastic %K falls below the MA of Stochastic %D. Since
             this approach is prone to being whip-sawed we use two (general) Stochastics
             so that a MA of the %K Stochastic of the first Stochastic and an even more
             smoothed second Stochastic. In this case a sell signal is generated if the
             first (more sensitive) Stochastic cross below the second (smoothed) Stochastic,
             and a buy signal is generated if the first Stochastic crosses above the second
             Stochastic.</p></remarks><param name="firstStochastic">- A double array of either the (fast) %K Stochastic or a smoothed moving average of this indicator.</param><param name="secondStochastic">- A double array of the %D Stochastic.</param><returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate that either a sell, no action or buy signal was generated.</returns><seealso cref="!:Stochastic.CrossingSignal">This indicator is a special case of crossingSignalPeriod and calculates the crossingSignal for a single period.</seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Stochastics.CrossingSignal(System.Double[],System.Double[],System.Double[],System.Int32,System.Int32,System.Int32)"><summary>
            Implements a general framework for producing trading signals based on the crossing of two Stochastics.
            </summary><remarks><p><b>Methodology</b></p><p>Buy when the Stochastic %K, crosses above the MA %D and
             sell when the Stochastic %K falls below the MA of Stochastic %D. Since
             this approach is prone to being whip-sawed we use two (general) Stochastics
             so that a MA of the %K Stochastic of the first Stochastic and an even more
             smoothed second Stochastic. In this case a sell signal is generated if the
             first (more sensitive) Stochastic cross below the second (smoothed) Stochastic,
             and a buy signal is generated if the first Stochastic crosses above the second
             Stochastic.</p></remarks><param name="high">An array of trading highs during the previous trading sessions. The length of this array should be greater then the number of periods over which the Stochastic is evaluated.</param><param name="low">An array of trading lows during the previous trading sessions. The length of this array should be greater then the number of periods over which the Stochastic is evaluated.</param><param name="close">An array containing the closing prices of the asset.</param><param name="noOfPeriods">An integer which represents the number of periods used over which the closing price is compared.</param><param name="method">Determines the methods used for the evaluation of the moving average in accordance with the following key: <ol><li> 1 = Simple moving average</li><li> 2 = Geometric moving average</li><li> 3 = Linearly weighted moving average</li><li> 4 = Exponentially Weighted Moving average within smoothing fact set to be 0.5.</li></ol><p>For further details concerning the definition of these moving averages please see the accompanying PDF documentation or the API documentation for <see cref="T:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MovingAverage"></see>.</p>.</param><param name="lengthOfMA">The number of periods over which the moving average is considered.</param><returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate that either a sell, no action or buy signal was generated.</returns><seealso cref="!:Stochastic.CrossingSignal">This indicator is a special case of crossingSignalPeriod, calculates the crossingSignal for a single period.</seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Stochastics.CrossingExtremeSignal(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)"><summary>
            This trading system combines the features of the crossing and extremum value trading systems 
            by requiring that a signal will only be generated if the fast %K Stochastic crosses the slow 
            %D Stochastic either above or below the extremal values.
            </summary><remarks><h3>Trading System Rules</h3><p>This system generates buy and sell signals respectively when one of the following is triggered:
             <ol><li> Buy Signal: When the fast %K Stochastic crosses above the slow %D Stochastic and
             this crossing takes place at a value lower than the <c>extremumLow</c>, then a buy signal is generated.
             </li><li> Sell Signal: When the fast %K Stochastic crosses above the slow %D Stochastic and
             this crossing takes place at a value higher than the <c>extremumHigh</c>, then a sell signal in generated.
             </li></ol></p></remarks><param name="extremeLow">This is the level at which the Stochastic is believed to indicate an oversold level. The Stochastic always lies between 0 and 100, and a suggested extreme low value to take is 20.</param><param name="extremeHigh">This is the level at which the Stochastic is believed to indicate an over brought level. The Stochastic always lies between 0 and 100, and a suggested extreme high value is 80.</param><returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate that either a sell, no action or buy signal was generated.</returns><seealso cref="!:Stochastic.CrossingExtremeSignalPeriod">This indicator is a general case of crossingExtremeSignal and calculates the crossingSignal for more periods.</seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Stochastics.CrossingExtremeSignalPeriod(System.Double,System.Double,System.Double[],System.Double[],System.Double[],System.Int32,System.Int32,System.Int32)"><summary>
            This trading system combines the features of the crossing and extremum value trading systems by requiring that a signal will only be generated if the fast %K Stochastic crosses the slow %D Stochastic either above or below the extremal values.
            </summary><remarks><h3>Trading System Rules</h3><p>This system generates buy and sell signals respectively when one of the following is triggered:
             <ol><li> Buy Signal: When the fast %K Stochastic crosses above the slow %D Stochastic and
             this crossing takes place at a value lower than the <c>extremumLow</c>, then a buy signal is generated.
             </li><li> Sell Signal: When the fast %K Stochastic crosses above the slow %D Stochastic and
             this crossing takes place at a value higher than the <c>extremumHigh</c>, then a sell signal in generated.
             </li></ol></p></remarks><param name="high">An array of trading highs during the previous trading sessions. The length of this array should be greater then the number of periods over which the Stochastic is evaluated.</param><param name="low">An array of trading lows during the previous trading sessions. The length of this array should be greater then the number of periods over which the  Stochastic is evaluated.</param><param name="close">An array containing the closing prices of the asset.</param><param name="noOfPeriods">An integer which represents the number of periods used over which the closing price is compared.</param><param name="method">Determines the methods used for the evaluation of the moving average in accordance with the following key: <ol><li> 1 = Simple moving average</li><li> 2 = Geometric moving average</li><li> 3 = Linearly weighted moving average</li><li> 4 = Exponentially Weighted Moving average within smoothing fact set to be 0.5.</li></ol><p>For further details concerning the definition of these moving averages please see the accompanying PDF documentation or the API documentation for <see cref="T:dotnetCHARTING.Libraries.Finance.Trading.Indicators.MovingAverage"></see>.</p>.</param><param name="lengthOfMA">The number of periods over which the moving average is considered.</param><returns>-1, 0, 1 - this method returns either -1, 0, 1 to indicate that either a sell, no action or buy signal was generated.</returns><seealso cref="!:Stochastic.CrossingExtremeSignal">This indicator is a special case of crossingExtremeSignalPeriod and calculates the crossingSignal for a single period.</seealso></member><!-- Badly formed XML comment ignored for member "T:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Volatility" --><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Volatility.#ctor"><summary>
            Creates a new instance.
            </summary></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Volatility.ChaikinVolatility(System.Double[],System.Double[],System.Int32,System.Int32)"><summary>
            Chaikin's Volatility indicator compares the spread between a security's high and low prices.
            </summary><remarks>
            It quantifies volatility as a widening of the range between the high and the low price.
            
             <h3>Indicator Formula</h3><p>The formula for this indicator is:</p><ol><li>chaikinVolatility = ((H-LAverage - H-LAverage_n_periods_ago)/H-LAverage_n_periods_ago)*100</li></ol></remarks><param name="highs">An array of the trading highs over the last n-periods where the k-th terms of the array if the high on the k-th previous period.</param><param name="lows">An array of the trading lows over the last n-periods where the k-th terms of the array if the trading lows on the k-th previous period.</param><param name="lengthOfMovingAverage">The number of periods considered within the evaluation of the moving average for each of the periods on which it can be evaluated.</param><param name="noOfPeriods">An integer which represents the number of previous time periods used over which the comparing moving average is taken.</param><exception cref="T:System.ArgumentException">Thrown if either parameter is strictly negative or arrays closes or volumes are empty.</exception></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Volatility.HistoricalEstimate(System.Double[])"><summary>
            Evaluates the historical estimate of the present volatility.
            </summary><remarks>
            This procedure uses
             the price data at the end of equal time intervals of an investment asset which does
             not pay dividends or interest payments in order to estimate its present volatility
             per interval. The number returned is the estimated (present) volatility per interval
             expressed in decimal format (i.e. 1 percent = 0.01). Hence if daily values of the
             assets price where used then this method will return the historical estimate of the
             daily volatility.
            
             <h3>Choosing the number of historical points used</h3><p>The historical estimate is evaluated using a given number of historical values of
             the assets market price. Care should be taken when deciding on the number of historical
             values to use within the historical estimate of the present volatility. A balance
             needs to be made between using a large sample (resulting in the small standard error)
             and a smaller sample which does not take too distant historical values which
             may not fully reflect the present market dynamics. As a rule of thumb the number of
             periods used in order to historical estimate the present daily volatility should (in
             generally) be between 90 and 180 periods.</p></remarks><param name="assetPrices">An array of the assets price at the end of each interval. Note that if we use daily values of the asset price then this methods will return an estimate of the daily volatility.</param><seealso cref="!:Volatility.HistoricalEstimateWithDividends"></seealso></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Volatility.HistoricalEstimateStandardError(System.Double,System.Double)"><summary>
            Returns the estimate of the standard error of the standard historical estimation given by the functions <see cref="!:Volatility.historicalEstimate"></see> and <see cref="!:volatility.historicalEstimateWithDividends"></see>.
            </summary><remarks><p>Recall that the standard error is the standard deviation of the sampling distribution
             of that statistic. Standard errors are important because they reflect how much sampling
             fluctuations effect the reliability of the statistic, in this case the estimate of the
             volatility. The standard error of a statistic will depend on the sample size where
             generally the larger the sample size the smaller the standard error will be.</p></remarks><param name="numberOfPeriods">The number of periods over which the historical data is used within the estimate of the volatility.</param><param name="volatilityEstimate">Estimate of the volatility per annum.</param></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Volatility.ReturnDuringithPeriod(System.Double,System.Double)"><summary>
            This function returns the continuously compounded return of an asset over one period (for example a period).
            </summary><param name="ithPeriodAssetPrice">This in the asset price at the close of business on the ith period (this period could be a period or a month etc).</param><param name="i_1thPeriodAssetPrice">This is the asset price at the close of business on the i-1th period (this period could be a period or a month etc).</param></member><member name="T:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Volume"><summary>
            Within this class we define the indicators which in one way or another describe the effect of the trading volume of the security being considered.
            </summary><remarks><h3>One Period and Multi Period Versions</h3><p>For many of the indicators we provide essentially two versions of the same
             method. The first version evaluates the indicator over the entire period given and
             the second version evaluates the indicator over all the sub-periods of a given length.
             Moreover, the version which evaluates over all sub-periods of a given
             length will return the results as an array where the 1st term of the array will be the
             value associated with the most resent sub-period, and the previous element corresponding to
             the previous sub-period and so on.</p><p>The naming of these two versions will follow the convention that if the indicator which
             evaluates over the entire period and returns a single element is named <c>ABCIndicator</c>,
             then the corresponding indicator over all sub-periods (of a given length) which returns
             an array will be denoted by <c>ABCIndicatorOverPeriod</c>.</p><p>For example, if our source data has <c>N</c> elements then the two versions
             of a given indicator, where the number of periods used within the sub-periods is
             <c>n</c> would correspond to:
             <ol><li><c>ABCIndicator</c> - Evaluation the indicator over the whole period of length <c>N</c>.</li><li><c>ABCIndicatorOverPeriod</c> - Will return an array where the
             first term is the value of the indicator <c>ABCIndicator</c> on the most recent <c>n</c>
             periods, and the next term is the value of the indicator <c>ABCIndicator</c> on the
             previous <c>n+1</c> periods minus the most recent period and so on. That is,
             for each iterative evaluation `the window of evaluation' is shifted one place back.</li></ol></p></remarks></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Volume.#ctor"><summary>
            Creates a new instance.
            </summary></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Volume.NegativeVolumeIndex(System.Double[],System.Double[])"><summary>
            Implements the Negative Volume Index (NVI) as introduced by Norman Fosback.
            </summary><remarks><h3>Indicators Evaluation</h3><p>The procedure used for the evaluation of this indicator is as follows:
             <ol><li> For any period where the volume is less then the previous periods volume the
             NVI is evaluated using the formula:<br></br><br></br>
             NVI = (Previous Periods NVI) + (((Close - (Previous Close))/(Previous Close)) * (Previous NVI))
             </li><li> If the volume is greater than or equal to the previous periods volume then:<br></br><br></br>
             NVI = Yesterday's NVI
             </li></ol></p></remarks><param name="closes">An array of the trading closing prices over the last n-periods where the k-th terms of the array if the closing price on the k-th previous period.</param><param name="volumes">An array of the trading volumes over the last n-periods where the k-th terms of the array if the trading volume on the k-th previous period.</param><exception cref="T:System.ArgumentException">Thrown if either parameter is strictly negative or arrays closes or volumes are empty.</exception><returns>Returns an array where the first element will be a value of the most recent period considered, and the second element will be the value of the previous period and so on.</returns></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Volume.PositiveVolumeIndex(System.Double[],System.Double[])"><summary>
            Implements the Positive Volume Index (PVI) as introduced by Norman Fosback.
            </summary><remarks><h3>Indicator Evaluation</h3><p>The procedure used for the evaluation of this indicator is as follows:
             <ol><li> For any period where the volume is greater than the previous periods volume the PVI is
             evaluated using the formula:<br></br><br></br>
             PVI = (Previous Periods PVI) + (((Close - Previous Close)/(Previous Close)) * Previous PVI)
             </li><li> If the present periods volume is less than or equal to the previous periods volume then
             we have:<br></br><br></br>
             PVI = Previous Periods PVI
             </li></ol></p></remarks><param name="closes">An array of the trading closing prices over the last n-periods where the k-th terms of the array if the closing price on the k-th previous period.</param><param name="volumes">An array of the trading volumes over the last n-periods where the k-th terms of the array if the trading volume on the k-th previous period.</param><exception cref="T:System.ArgumentException">Thrown if either parameter is strictly negative or arrays closes or volumes are empty.</exception><returns>Returns an array where the first element will be a value of the most recent period considered, and the second element will be the value of the previous period and so on.</returns></member><member name="M:dotnetCHARTING.Libraries.Finance.Trading.Indicators.Volume.OnBalanceVolume(System.Double[])"><summary>
            Implements the On Balance Volume (OBV) indicator which was introduced by Joe Granville within this book New Strategy of Daily Stock Market Timing for Maximum Profits.
            </summary><remarks>
            The indicator relates
             the volume to changes in the price and rests on the assumption that OBV changes precede price
             changes.
            
             <h3>Evaluation Procedure</h3><p>The OBV indicator is evaluated in accordance with the following rules:
             <ol><li> If the present periods closing price is greater than the previous periods close then:<br></br><br></br>
             OBV = Previous OBV + Present Volume
             </li><li> If the present periods closing price is less than the previous periods close then:<br></br><br></br>
             OBV = Previous periods OBV - Present Volume
             </li><li> If the present periods closing price is equal to the previous close then:<br></br><br></br>
             OBV = Yesterday's OBV
             </li></ol></p></remarks><param name="volumes">An array of the trading volumes over the last n-periods where the k-th terms of the array if the trading volume on the k-th previous period.</param><exception cref="T:System.ArgumentException">Thrown if either parameter is strictly negative or arrays volumes is empty.</exception></member><member name="T:dotnetCHARTING.Forecasting.Zbrent"><summary>
            Using Brent¡¯s method, find the root of a function func known to lie between x1 and x2. The
            root, returned as zbrent, will be refined until its accuracy is tol.
            </summary></member><member name="T:dotnetCHARTING.ListCollection"><summary>
            A list dictionary variation that allows adding items of the string type using a
            string.
            </summary><remarks><para>Strings used to add items use the following syntax:</para><para>"Key1=Value2,Key2=Value2"</para></remarks></member><member name="M:dotnetCHARTING.ListCollection.Add(System.String)"><summary>Adds a single or multiple items using a string.</summary></member><member name="M:dotnetCHARTING.ListCollection.FromDictionary(System.Collections.Specialized.ListDictionary)"><summary>Creates a ListCollection object from a ListDictionary.</summary><param name="ld">ListDictionary to instantiate with.</param></member><member name="T:dotnetCHARTING.MyFloatComparer"><summary></summary></member><member name="T:dotnetCHARTING.Chart"><summary><b>The .netCHARTING control.</b></summary></member><member name="M:dotnetCHARTING.Chart.#ctor"><summary>
            Initializes a new empty instance of the Chart control.
            </summary></member><member name="M:dotnetCHARTING.Chart.CreateChildControls"><summary>
            This member overrides <see cref="M:System.Web.UI.Control.CreateChildControls"></see></summary></member><member name="M:dotnetCHARTING.Chart.GetLegendBitmap"><summary>
            Obtains a <see cref="T:System.Drawing.Bitmap"></see> of the legend generated by the chart.
            </summary><remarks>When invoked, the <see cref="P:dotnetCHARTING.Element.Point"></see> properties of all elements 
            drawn on the chart will be populated.</remarks><returns>A <see cref="T:System.Drawing.Bitmap"></see> of the legend.</returns><example><code lang="CS">
            //Save the legend as a separate image file
            System.Web.UI.WebControls.Image ImageLegend = new System.Web.UI.WebControls.Image();
            ImageLegend.ImageUrl = Chart.FileManager.SaveImage(Chart.GetLegendBitmap());
            Controls.Add(ImageLegend);
             
            //For complete code see SaveLegendImage.aspx sample
                </code><code lang="VB">
            ' Save the legend as a separate image file
            Dim ImageLegend As System.Web.UI.WebControls.Image = new System.Web.UI.WebControls.Image()
            ImageLegend.ImageUrl = Chart.FileManager.SaveImage(Chart.GetLegendBitmap())
            Controls.Add(ImageLegend)
             
            'For complete code see SaveLegendImage.aspx sample.
                </code></example></member><member name="M:dotnetCHARTING.Chart.GetChartBitmap"><summary>
            Obtains a <see cref="T:System.Drawing.Bitmap"></see> of the generated chart.
            </summary><remarks>When invoked, the <see cref="P:dotnetCHARTING.Element.Point"></see> properties of all elements 
            drawn on the chart will be populated.</remarks><returns>A <see cref="T:System.Drawing.Bitmap"></see> of the chart.</returns><example><code lang="CS">
            //Get the bitmap and add a line to the image
            Bitmap bmp = Chart.GetChartBitmap();
            Graphics g = Graphics.FromImage(bmp);
            g.DrawLine(Pens.Red,36,150,480,150);
            g.DrawString("This is my line",new Font("Arial",12,FontStyle.Bold),new SolidBrush(Color.Black),new Point(40,150));
            g.Dispose();
             
            //Save the image and set the image path to ImageUrl.
            string ImagePath = Chart.FileManager.SaveImage(bmp);
            Image1.ImageUrl = ImagePath;
             
            //For complete code see PostRenderDrawing.aspx sample
                </code><code lang="VB">
            'Get the bitmap and add a line to the image
            Dim bmp As Bitmap = Chart.GetChartBitmap()
            Dim g As Graphics = Graphics.FromImage(bmp)
            g.DrawLine(Pens.Red, 36, 150, 480, 150)
            g.DrawString("This is my line", new Font("Arial", 12, FontStyle.Bold), new SolidBrush(Color.Black), new PointF(40F, 150F))
            g.Dispose()
             
            'Save the image and set the image path to ImageUrl.
            Dim ImagePath As String = Chart.FileManager.SaveImage(bmp)
            Image1.ImageUrl = ImagePath
             
            'For complete code see PostRenderDrawing.aspx sample
                </code></example></member><member name="M:dotnetCHARTING.Chart.GetMetafile"><summary>
             Returns the metafile contains records that describe a sequence of graphics operations that can be recorded (constructed) and played back (displayed). 
            </summary><returns>A <see cref="T:System.Drawing.Imaging.Metafile"></see> of the chart image.</returns></member><member name="M:dotnetCHARTING.Chart.LoadState(System.String)"><summary>
            Imports a chart object from the specified xml file.
            </summary><param name="xmlDataOrFileName">Path of XML file or XML data to load.</param><returns>A chart object.</returns><remarks>This property takes either a raw xml string or an xml file name. 
            For an xml file name it takes either an absolute path 'c:/inetpub/wwwroot/app/chart.xml',
            a physical UNC path ('\\myUncPath\cahrt.xml'), a relative path ('temp/chart.xml',) 
            or when started with '/' a relative path from c:/inetpub/wwwroot/ ('/app/chart.xml),
            or only a file name 'chart.xml' in the temp directory.
            </remarks><example>
                This examples demonstrate different ways of accessing the same xml file in temp directory:
                'c:/inetpub/wwwroot/app/temp/Chart.xml' when the applications is located in ...wwwroot/app.
                when started with '/' the folder resets to c:/inetpub/wwwroot/.
                <code lang="CS" title="[C#]">
            Chart.LoadState("c://inetpub/wwwroot/app/temp/chart.xml");
            Chart.LoadState("/app/temp/chart.xml");
            Chart.LoadState("chart.xml");
                </code><code lang="VB" title="[Visual Basic]">
            Chart.LoadState("c://inetpub/wwwroot/app/temp/chart.xml")
            Chart.LoadState("/app/temp/chart.xml")
            Chart.LoadState("chart.xml")
                </code></example></member><member name="M:dotnetCHARTING.Chart.LoadState(System.String,System.Boolean)"><summary>
            Imports a chart object from the specified xml file.
            </summary><param name="xmlDataOrFileName">Path of XML file or XML data to load.</param><param name="clear">Determine whether clear the chart object before loading the data.</param><returns>A chart object.</returns><remarks>This property takes either a raw xml string or an xml file name. 
            For an xml file name it takes either an absolute path 'c:/inetpub/wwwroot/app/chart.xml',
            a physical UNC path ('\\myUncPath\cahrt.xml'), a relative path ('temp/chart.xml',) 
            or when started with '/' a relative path from c:/inetpub/wwwroot/ ('/app/chart.xml),
            or only a file name 'chart.xml' in the temp directory.
            </remarks><example>
                This examples demonstrate different ways of accessing the same xml file in temp directory:
                'c:/inetpub/wwwroot/app/temp/Chart.xml' when the applications is located in ...wwwroot/app.
                when started with '/' the folder resets to c:/inetpub/wwwroot/.
                <code lang="CS" title="[C#]">
            Chart.LoadState("c://inetpub/wwwroot/app/temp/chart.xml");
            Chart.LoadState("/app/temp/chart.xml");
            Chart.LoadState("chart.xml");
                </code><code lang="VB" title="[Visual Basic]">
            Chart.LoadState("c://inetpub/wwwroot/app/temp/chart.xml")
            Chart.LoadState("/app/temp/chart.xml")
            Chart.LoadState("chart.xml")
                </code></example></member><member name="M:dotnetCHARTING.Chart.LoadState(System.String,dotnetCHARTING.Chart)"><summary>
            Set the chart object from the specified xml file.
            </summary><remarks>
            This first parameter takes either a raw xml string or an xml file name. For an
            xml file name it takes either an absolute path 'c:/inetpub/wwwroot/app/chart.xml', a
            physical UNC path ('\\myUncPath\cahrt.xml'), a relative path ('temp/chart.xml',) or
            when started with '/' a relative path from c:/inetpub/wwwroot/ ('/app/chart.xml), or
            only a file name 'chart.xml' in the temp directory.
            </remarks><example>
                This examples demonstrate different ways of accessing the same xml file in temp
                directory: 'c:/inetpub/wwwroot/app/temp/Chart.xml' when the applications is located
                in ...wwwroot/app. when started with '/' the folder resets to c:/inetpub/wwwroot/. 
                <code lang="CS" title="[C#]">
            Chart.LoadState("c://inetpub/wwwroot/app/temp/chart.xml");
            Chart.LoadState("/app/temp/chart.xml");
            Chart.LoadState("chart.xml");
                </code><code lang="VB" title="[Visual Basic]">
            Chart.LoadState("c://inetpub/wwwroot/app/temp/chart.xml")
            Chart.LoadState("/app/temp/chart.xml")
            Chart.LoadState("chart.xml")
                </code></example><param name="xmlDataOrFileName">Path of XML file or XML data to load.</param><param name="chartObject">The chart object that be loaded with XML data.</param></member><member name="M:dotnetCHARTING.Chart.LoadState(System.String,dotnetCHARTING.Chart,System.Boolean)"><summary>
            Set the chart object from the specified xml file.
            </summary><remarks>
            This first parameter takes either a raw xml string or an xml file name. For an
            xml file name it takes either an absolute path 'c:/inetpub/wwwroot/app/chart.xml', a
            physical UNC path ('\\myUncPath\cahrt.xml'), a relative path ('temp/chart.xml',) or
            when started with '/' a relative path from c:/inetpub/wwwroot/ ('/app/chart.xml), or
            only a file name 'chart.xml' in the temp directory.
            </remarks><example>
                This examples demonstrate different ways of accessing the same xml file in temp
                directory: 'c:/inetpub/wwwroot/app/temp/Chart.xml' when the applications is located
                in ...wwwroot/app. when started with '/' the folder resets to c:/inetpub/wwwroot/. 
                <code lang="CS" title="[C#]">
            Chart.LoadState("c://inetpub/wwwroot/app/temp/chart.xml",chartObject,false);
            Chart.LoadState("/app/temp/chart.xml",chartObject,false);
            Chart.LoadState("chart.xml",chartObject,false);
                </code><code lang="VB" title="[Visual Basic]">
            Chart.LoadState("c://inetpub/wwwroot/app/temp/chart.xml",chartObject,false)
            Chart.LoadState("/app/temp/chart.xml",chartObject,false)
            Chart.LoadState("chart.xml",chartObject,false)
                </code></example><param name="xmlDataOrFileName">Path of XML file or XML data to load.</param><param name="chartObject">The chart object that be loaded with XML data.</param><param name="clear">Determine whether clear the chart object before loading the data.</param></member><member name="M:dotnetCHARTING.Chart.SaveState(System.String)"><summary>Saves this chart instance to an xml file.</summary><remarks>
            This first parameter takes either an absolute path
            'c:/inetpub/wwwroot/app/chart.xml', a physical UNC path ('\\myUncPath\cahrt.xml'), a
            relative path ('temp/chart.xml',) or when started with '/' a relative path from
            c:/inetpub/wwwroot/ ('/app/chart.xml), or only a file name 'chart.xml' in the temp
            directory.
            </remarks><example>
                This examples demonstrate different ways of saving in the same xml file in temp
                directory: 'c:/inetpub/wwwroot/app/temp/Chart.xml' when the applications is located
                in ...wwwroot/app. when started with '/' the folder resets to c:/inetpub/wwwroot/. 
                <code lang="CS" title="[C#]">
            Chart.SaveState("c://inetpub/wwwroot/app/temp/chart.xml",chartObj); 
            Chart.SaveState("/app/temp/chart.xml",chartObj); 
            Chart.SaveState("chart.xml",chartObj);
                </code><code lang="VB" title="[VB]">
            Chart.SaveState("c://inetpub/wwwroot/app/temp/chart.xml",chartObj)
            Chart.SaveState("/app/temp/chart.xml",chartObj)
            Chart.SaveState("chart.xml",chartObj)
                </code></example><overloads><para>string LoadState()</para><para>void LoadState(string xmlFilePath,Chart chartObject)</para><para>string LoadState(Chart chartObject)</para></overloads><param name="xmlFilePath">Path of XML file.</param></member><member name="M:dotnetCHARTING.Chart.SaveState(System.String,dotnetCHARTING.Chart)"><summary>Saves the chart instance to an xml file.</summary><remarks>
            This first parameter takes either an absolute path
            'c:/inetpub/wwwroot/app/chart.xml', a physical UNC path ('\\myUncPath\cahrt.xml'), a
            relative path ('temp/chart.xml',) or when started with '/' a relative path from
            c:/inetpub/wwwroot/ ('/app/chart.xml), or only a file name 'chart.xml' in the temp
            directory.
            </remarks><example>
                This examples demonstrate different ways of saving in the same xml file in temp
                directory: 'c:/inetpub/wwwroot/app/temp/Chart.xml' when the applications is located
                in ...wwwroot/app. when started with '/' the folder resets to c:/inetpub/wwwroot/. 
                <code lang="CS" title="[C#]">
            Chart.SaveState("c://inetpub/wwwroot/app/temp/chart.xml",chartObj); 
            Chart.SaveState("/app/temp/chart.xml",chartObj); 
            Chart.SaveState("chart.xml",chartObj); 
            </code><code lang="VB" title="[VB]">
            Chart.SaveState("c://inetpub/wwwroot/app/temp/chart.xml",chartObj)
            Chart.SaveState("/app/temp/chart.xml",chartObj)
            Chart.SaveState("chart.xml",chartObj)
                </code></example><overloads><para>string LoadState()</para><para>void LoadState(string xmlFilePath)</para><para>string LoadState(Chart chartObject)</para></overloads><param name="xmlFilePath">Path of the XML file.</param><param name="chartObject">The chart object is being serialized.</param></member><member name="M:dotnetCHARTING.Chart.SaveState"><summary>Saves this chart instance to an xml string.</summary><returns>The xml string which represent the current chart object.</returns><overloads><para>string LoadState(string xmlFilePath)</para><para>void LoadState(string xmlFilePath,Chart chartObject)</para><para>string LoadState(Chart chartObject)</para></overloads></member><member name="M:dotnetCHARTING.Chart.SaveState(dotnetCHARTING.Chart)"><summary>Saves the chart instance to an xml string.</summary><returns>The xml string which represent the chart object.</returns><overloads><para>string LoadState()</para><para>string LoadState(string xmlFilePath)</para><para>void LoadState(string xmlFilePath,Chart chartObject)</para></overloads><param name="chartObject">The chart object is being serialized.</param></member><member name="E:dotnetCHARTING.Chart.PostDataProcessing"><summary>Occurs when the the chart is completed the data processing.</summary><remarks>
            This event is very useful for customizing and displaying the processed
            data specially when using SplitByLimit which generates more than one series from a series.
            </remarks><example>
                The follwoing sample, get a data table and displays with a datagrid. For complete
                sample see features/PostDataProcessing.aspx 
                <code lang="CS" title="[C#]">
            //This line should add in Page_Load method
            Chart.PostDataProcessing +=new PostDataProcessingEventHandler(OnPostDataProcessing);
             
            //The method handling the PostDataProcessing event
            void OnPostDataProcessing(Object sender)
            {
                DataTable dt = Chart.SeriesCollection.GetProcessedDataTable("%YValue");
                chartdatagrid.DataSource = new DataView(dt);
                chartdatagrid.DataBind();
             
            }
                </code><code lang="VB" title="[Visual Basic]">
            'This line should add in Page_Load method
            AddHandler Chart.PostDataProcessing, AddressOf OnPostDataProcessing
             
             
            'The method handling the PostDataProcessing event
            Sub OnPostDataProcessing(sender As [Object])
               Dim dt As DataTable = Chart.SeriesCollection.GetProcessedDataTable("%YValue")
               chartdatagrid.DataSource = New DataView(dt)
               chartdatagrid.DataBind()
            End Sub 'OnPostDataProcessing
                </code></example></member><member name="P:dotnetCHARTING.Chart.TagKey"><summary>
            This member overrides <see cref="T:System.Web.UI.HtmlTextWriterTag"></see>.
            </summary></member><member name="P:dotnetCHARTING.Chart.Dpi"><summary>
            Gets or sets the resolution, in dots per inch, of the chart Bitmap. 
            </summary><example><code lang="CS">
            Chart.Dpi = 300;
                </code><code lang="VB">
            Chart.Dpi = 300
                </code></example></member><member name="P:dotnetCHARTING.Chart.MaximumBubbleSizeValue"><summary>
            Gets or sets the maximum value the bubble size will be based on where a bubble size value of MaximumBubbleSizeValue equals a bubble of size MaximumBubbleSize.
            </summary><example><code lang="CS">
            Chart.MaximumBubbleSizeValue = 120;
                </code><code lang="VB">
            Chart.MaximumBubbleSizeValue = 120
                </code></example></member><member name="P:dotnetCHARTING.Chart.PopulateDateGroupingSubValues"><summary>
            When using date grouping the main value in the element is derived 
            from the actual values in the database or data provided to .netCHARTING.
            This property controls whether these subvalues used in the calculation 
            to determine the element value are added to <see cref="!:SubValues"></see> or not.  
            By default, such values are not added to the element subvalues.
            </summary></member><member name="P:dotnetCHARTING.Chart.LimitPrimarySeries"><summary>
            In a multiple series chart, this property controls the primary series used 
            for the Limit operation. Other series' elements will be matched with 
            the primary series elements and that order will be maintained regardless of
            the values of the other series.  
            For example, if you limit to the top 5 values and set the LimitPrimarySeries 
            to the sales series other series such as dollar amount or quantity 
            would not affect which elements were ultimately selected for the chart.
            </summary></member><member name="P:dotnetCHARTING.Chart.DrillDownIntoSeries"><summary>
            When using automated drill down in conjunction with date grouping 
            and multiple series, this property determines if drill down 
            will occur into a single series or multiple series.
            </summary></member><member name="P:dotnetCHARTING.Chart.DefaultElement"><summary>
            Gets or sets an <see cref="T:dotnetCHARTING.Element"></see> object whose properties will trickle 
            to all other elements on the chart unless otherwise specified. This is a shortcut to the DefaultSeries.DefaultElement property.
            </summary><example><code lang="CS">
            Chart.DefaultElement.SmartLabel.Text = "%Name";
                </code><code lang="VB">
            Chart.DefaultElement.SmartLabel.Text = "%Name"
                </code></example></member><member name="P:dotnetCHARTING.Chart.ExtraChartAreas"><summary>
            Gets a collection of additional %dotnetCHARTING.ChartArea% objects added to the
            chart.
            </summary></member><member name="P:dotnetCHARTING.Chart.ExtraLegendBoxes"><summary>
            Gets a collection of additional %dotnetCHARTING.LegendBox% objects added to the
            chart.
            </summary></member><member name="P:dotnetCHARTING.Chart.DefaultLegendBox"><summary>
            Gets a %dotnetCHARTING.LegendBox% object whose property settings will propagate
            to all other %dotnetCHARTING.LegendBox% objects on the chart image.
            </summary></member><member name="P:dotnetCHARTING.Chart.DefaultTitleBox"><summary>
            Gets a %dotnetCHARTING.Box% object whose property settings will propagate to all
            title boxes on the chart image.
            </summary></member><member name="P:dotnetCHARTING.Chart.DefaultBox"><summary>
            Gets a base box object that is used as a vehicle for property settings which will
            become the defaults settings of all elements on the chart that derive from box.
            </summary></member><member name="P:dotnetCHARTING.Chart.DefaultChartArea"><summary>
            Gets a %dotnetCHARTING.ChartArea% object whose property settings will propagate
            to all other %dotnetCHARTING.ChartArea% objects on the chart image.
            </summary></member><member name="P:dotnetCHARTING.Chart.ChartAreaSpacing"><summary>
            Gets or sets a value in pixels that defines the spacing between boxes like chart
            areas and legends.
            </summary></member><member name="P:dotnetCHARTING.Chart.ChartAreaLayout"><summary>Gets or sets chart area layout options.</summary></member><member name="P:dotnetCHARTING.Chart.DefaultCultureName"><summary>
            Gets or sets the default culture name which determines number and date formatting.
            </summary><remarks>Equivalent to Chart.DefaultAxis.CultureName. 
            See the <see cref="T:System.Globalization.CultureInfo"></see> class for possible names of a culture.</remarks><example><code lang="CS">
            Chart.DefaultCultureName = "en-GB";
                </code><code lang="VB">
            Chart.DefaultCultureName = "en-GB"
                </code></example></member><member name="P:dotnetCHARTING.Chart.DatabaseCultureName"><summary>
            Gets or sets the culture name used when StartDate and EndDate insert to the sql statement. 
            This property only necessary to set if the web server and database server having different culture setting.
            </summary><remarks>See the %CultureInfo% class for possible names of a culture.</remarks><example><code lang="CS" title="[C#]">
            Chart.DataBaseCultureName = "en-GB";
                </code><code lang="VB" title="[Visual Basic]">
            Chart.DataBaseCultureName = "en-GB"
                </code></example></member><member name="P:dotnetCHARTING.Chart.DefaultFormatString"><summary>
            Gets or sets the default format string which determines number and date formatting.<br></br>
            See Chart.<see cref="P:dotnetCHARTING.Chart.DefaultAxis"></see>.<see cref="P:dotnetCHARTING.Axis.FormatString">FormatString</see>.
            </summary><remarks>
            Equivalent to Chart.DefaultAxis.FormatString.<br></br><br></br>
            See 'Formatting Types' in your msdn documentation for a complete list of options.<br></br><br></br>
            Some shortcuts are also provided for specific settings including "C" or "currency" ,
            "E" or "scientific" , "F" or "fixed" , "G" or "general" and "N,2" for normal and the
            number after the comma determines the number of decimal places.
            </remarks><example><code lang="CS">
            Chart.DefaultFormatString = "n,2";
            Chart.DefaultFormatString = "MM";
                </code><code lang="VB">
            Chart.DefaultFormatString = "n,2" 
            Chart.DefaultFormatString = "MM"
                </code></example></member><member name="P:dotnetCHARTING.Chart.NoDataText"><summary>
            See <see cref="P:dotnetCHARTING.Chart.NoDataLabel"></see>.
            </summary><exclude></exclude><excludetoc></excludetoc></member><member name="P:dotnetCHARTING.Chart.NoDataLabel"><summary>
            Gets or sets a label shown on the chart when no data is available.
            </summary><example><code lang="CS">
            Chart.NoDataLabel.Text = "No Data Text";
            Chart.NoDataLabel.Color = Color.Red;
                </code><code lang="VB">
            Chart.NoDataLabel.Text = "No Data Text" 
            Chart.NoDataLabel.Color = Color.Red
                </code></example></member><member name="P:dotnetCHARTING.Chart.TempDirectory"><summary>
            Gets or sets the directory where images generated by the control are temporarily stored.
            </summary><remarks>
            This property takes either an absolute path 'c:/inetpub/wwwroot/app/tmp',
            a relative path ('tmp', '../tmp',) or when started with '/' a relative path
            from c:/inetpub/wwwroot/ ('/app/tmp).
            </remarks><example>
                This examples demonstrate different ways of accessing the same folder:
                'c:/inetpub/wwwroot/app/tmp' when the applications is located in ...wwwroot/app.
                when started with '/' the folder resets to c:/inetpub/wwwroot/.
                <code lang="CS" title="[C#]">
            Chart.TempDirectory = "c://inetpub/wwwroot/app/tmp";
            Chart.TempDirectory = "/app/tmp";
            Chart.TempDirectory = "tmp";
                </code><code lang="VB" title="[Visual Basic]">
            Chart.TempDirectory = "c://inetpub/wwwroot/app/tmp"
            Chart.TempDirectory = "/app/tmp"
            Chart.TempDirectory = "tmp"
                </code></example></member><member name="P:dotnetCHARTING.Chart.Type"><summary>
            Gets or sets the <see cref="T:dotnetCHARTING.ChartType"></see> of this <see cref="T:dotnetCHARTING.Chart"></see>.
            </summary><example><code lang="CS">
            Chart.Type = ChartType.Pie;
                </code><code lang="VB">
            Chart.Type = ChartType.Pie
                </code></example></member><member name="P:dotnetCHARTING.Chart.Title"><summary>
            Gets or sets the chart title.<br></br>
            Equivalent to <c>Chart.TitleBox.Label.Text</c>.
            </summary><example><code lang="CS">
            Chart.Title = "Chart of Sales for 2003";
                </code><code lang="VB">
            Chart.Title = "Chart of Sales for 2003"
                </code></example></member><member name="P:dotnetCHARTING.Chart.URL"><summary>
            Gets or sets the URL of the entinre chart image.
            </summary><example><code lang="CS">
            Chart.URL = "http://www.yahoo.com";
                </code><code lang="VB">
            Chart.URL = "http://www.yahoo.com"
                </code></example></member><member name="P:dotnetCHARTING.Chart.URLTarget"><summary>
            Gets or sets the target of the <see cref="P:dotnetCHARTING.Chart.URL"></see> link.
            </summary><example><code lang="CS">
            Chart.URLTarget = "_blank";
                </code><code lang="VB">
            Chart.URLTarget = "_blank"
                </code></example></member><member name="P:dotnetCHARTING.Chart.HatchStylePaletteName"><summary>
            Gets or sets a predefined <see cref="T:dotnetCHARTING.HatchStylePalette"></see> that defines 
            element and series hatch style.
            </summary><example><code lang="CS">
            Chart.PaletteName = dotnetCHARTING.HatchStylePalette.One;
                </code><code lang="VB">
            Chart.PaletteName = dotnetCHARTING.HatchStylePalette.One
                </code></example></member><member name="P:dotnetCHARTING.Chart.PaletteName"><summary>
            Gets or sets a predefined <see cref="T:dotnetCHARTING.Palette"></see> that defines 
            element and series colors.
            </summary><example><code lang="CS" title="[C#]">
            Chart.PaletteName = dotnetCHARTING.Palette.Spring;
                </code><code lang="VB" title="[Visual Basic]">
            Chart.PaletteName = dotnetCHARTING.Palette.Spring
                </code></example></member><member name="P:dotnetCHARTING.Chart.Height"><summary>
            Gets or sets the height of the chart image.
            </summary><example><code lang="CS">
            Chart.Height = 350;
                </code><code lang="VB">
            Chart.Height = Unit.Parse(350)
                </code></example></member><member name="P:dotnetCHARTING.Chart.Width"><summary>
            Gets or sets the width of the chart image.
            </summary><example><code lang="CS">
            Chart.Width = 600;
                </code><code lang="VB">
            Chart.Width = Unit.Parse(600)
                </code></example></member><member name="P:dotnetCHARTING.Chart.Background"><summary>
            Gets or sets the <see cref="T:dotnetCHARTING.Background"></see> of this chart.
            </summary><example><code lang="CS">
            Chart.Background = new Background(Color.Ivory);
                </code><code lang="VB">
            Chart.Background = new Background(Color.Ivory)
                </code></example></member><member name="P:dotnetCHARTING.Chart.Depth"><summary>
            Gets or sets depth of the chart when <see cref="P:dotnetCHARTING.Chart.Use3D"></see> is true.
            </summary><example><code lang="CS">
            Chart.Depth = 12;
                </code><code lang="VB">
            Chart.Depth = Unit.Parse(12)
                </code></example></member><member name="P:dotnetCHARTING.Chart.Margin"><summary>
            Gets or sets a string which automatically sets multiple margins as a shortcut.
            </summary><remarks> 
            Controls the margins or amount of space in pixels that will be left around 
            the charting elements including the Legend and title box. This property 
            can be used in conjunction with the Chart.Background property to easily 
            implement attractive custom borders or just pad the chart as you please. 
            The property accepts margins "Left, Top, Right, Bottom" in pixels.
            </remarks><example><code lang="CS">
            Chart.Margin = "10"; //set all 4 Margins to 10 
            Chart.Margin = "10,20"; // set MarginLeft and MarginRight to 10 and MarginTop and Bottom to 20 
            Chart.Margin = "5,10,15"; // set MarginLeft to 5, MarginTop to 10 and MarginRight to 15 
            Chart.Margin = "5,10,15,20"; // set MarginLeft to 5, MarginTop to 10, MarginRight to 15 and MarginBottom to 20 
            </code><code lang="VB" title="[New Example]">
            Chart.Margin = "10"    'set all 4 Margins to 10 
            Chart.Margin = "10,20"    'set MarginLeft and MarginRight to 10 and MarginTop and Bottom to 20 
            Chart.Margin = "5,10,15"    'set MarginLeft to 5, MarginTop to 10 and MarginRight to 15 
            Chart.Margin = "5,10,15,20"    'set MarginLeft to 5, MarginTop to 10, MarginRight to 15 and MarginBottom to 20
                </code></example></member><member name="P:dotnetCHARTING.Chart.FileQuality"><summary>
             Gets or sets Jpg file quality. (Worse quality) 0 - 100 (Best quality)
            </summary><example><code lang="CS">
            Chart.FileQuality = 95;
                </code><code lang="VB">
            Chart.FileQuality = 95
                </code></example></member><member name="P:dotnetCHARTING.Chart.ImageFormat"><summary>
            Gets or sets an <see cref="T:dotnetCHARTING.ImageFormat"></see> enumeration specifying 
            the generated image's file type.
            </summary><example><code lang="CS">
            Chart.ImageFormat = ImageFormat.Jpg;
                </code><code lang="VB">
            Chart.ImageFormat = ImageFormat.Jpg
                </code></example></member><member name="P:dotnetCHARTING.Chart.Series"><summary>
            Gets or sets a series which is added to the chart's main <see cref="P:dotnetCHARTING.Chart.SeriesCollection"></see> when
            the Chart.SeriesCollection.Add() method is invoked.
            </summary><example><code lang="CS">
            //Adding series programatically
            Chart.Series.Name="Vancouver";
            Chart.Series.Type = SeriesType.Cylinder;
            Chart.Series.Element  = new Element("Mon",2);
            Chart.Series.Elements.Add();
            Chart.Series.Element = new Element("Tue",4);
            Chart.Series.Elements.Add();
            Chart.Series.Element = new Element("Wed",5);
            Chart.Series.Elements.Add();
            Chart.Series.Element = new Element("Thr",6);
            Chart.Series.Elements.Add();
            Chart.Series.Element = new Element("Fri",5);
            Chart.Series.Elements.Add();
            Chart.SeriesCollection.Add();
                </code><code lang="VB">
            'Adding series programatically
            Chart.Series.Name="Vancouver"
            Chart.Series.Type = SeriesType.Cylinder
            Chart.Series.Element  = new Element("Mon",2)
            Chart.Series.Elements.Add()
            Chart.Series.Element = new Element("Tue",4)
            Chart.Series.Elements.Add()
            Chart.Series.Element = new Element("Wed",5)
            Chart.Series.Elements.Add()
            Chart.Series.Element = new Element("Thr",6)
            Chart.Series.Elements.Add()
            Chart.Series.Element = new Element("Fri",5)
            Chart.Series.Elements.Add()
            Chart.SeriesCollection.Add()
                </code></example></member><member name="P:dotnetCHARTING.Chart.SeriesCollection"><summary>
            Gets a <see cref="T:dotnetCHARTING.SeriesCollection"></see> object which represents the data this chart will render.
            </summary><example><code lang="CS">
            //Adding series programatically
            Series sr =new Series();
            sr.Name ="Vancouver";
            sr.Type = SeriesType.Cylinder;
            Element el= new Element("E 1",2);
            sr.Elements.Add(el);
            Chart.SeriesCollection.Add(sr);
                </code><code lang="VB">
            'Adding series programatically
            Dim sr As Series =new Series()
            sr.Name ="Vancouver"
            sr.Type = SeriesType.Cylinder
            Dim el As Element  = new Element("E 1",2)
            sr.Elements.Add(el)
            Chart.SeriesCollection.Add(sr)
                </code></example></member><member name="P:dotnetCHARTING.Chart.AxisCollection"><summary>
            Contains a collection of calculated <see cref="T:dotnetCHARTING.Axis">Axis</see> objects.
            </summary><remarks>Axes added to this collection must be <see cref="M:dotnetCHARTING.Axis.Calculate(System.String,dotnetCHARTING.ChangeValueDelegate)">calculated</see> from axes on the
            chart, otherwise they are ignored.</remarks><example><code lang="CS">
            //Using the built in axis calculation to convert units and add Fahrenheit temperature axis. 
            Axis F=Chart.YAxis.Calculate("Fahrenheit", Temperature.Celsius,Temperature.Fahrenheit);
            F.Orientation = Orientation.Right;
            Chart.AxisCollection.Add(F);
             
            //For complete code see UnitConversion.aspx sample.
                </code><code lang="VB">
            'Using the built in axis calculation to convert units and add Fahrenheit temperature axis. 
            Dim F As Axis
            F=Chart.YAxis.Calculate("Fahrenheit", Temperature.Celsius,Temperature.Fahrenheit)
            F.Orientation = Orientation.Right
            Chart.AxisCollection.Add(F)
             
            'For complete code see UnitConversion.aspx sample.
                </code></example></member><member name="P:dotnetCHARTING.Chart.RadarLabelMode"><summary>
            See <see cref="P:dotnetCHARTING.SmartLabel.RadarLabelMode">DefaultSeries.DefaultElement.SmartLabel.RadarLabelMode</see>.
            </summary><example><code lang="CS">
            Chart.RadarLabelMode = RadarLabelMode.Outside;
                </code><code lang="VB">
            Chart.RadarLabelMode = RadarLabelMode.Outside
                </code></example></member><member name="P:dotnetCHARTING.Chart.HatchStylePalette"><summary>
            Gets or sets a hatch style palette that will trickle to all series on the chart. The
            hatch patterns will not show on chart elements if a hatch color is not specified.
            The default hatch color can be specified with the Chart.DefaultSeries.DefaultElement.HatchColor property.
            </summary><example><code lang="CS" title="[C#]">
            Chart.HatchStylePalette = new HatchStylePalette [] {HatchStyle.Cross,HatchStyle.Divot,HatchStyle.Horizontal};
                </code><code lang="VB" title="[Visual Basic]">
            Chart.HatchStylePalette = New HatchStylePalette [] {HatchStyle.Cross,HatchStyle.Divot,HatchStyle.Horizontal}
                </code></example><remarks>
            For a complete list of hatch styles see
            <a href="ms-help://MS.VSCC/MS.MSDNQTR.2003APR.1033/cpref/html/frlrfSystemDrawingDrawing2DHatchStyleClassTopic.htm">
            HatchStyle</a> enumeration.
            </remarks></member><member name="P:dotnetCHARTING.Chart.Palette"><summary>
            Gets or sets an array of colors that define element and series colors.
            </summary><example><code lang="CS">
            Color[] MyColorObjectArray = new Color[3]{Color.Red,Color.Blue,Color.Yellow};
            Chart.Palette = MyColorObjectArray;
                </code><code lang="VB">
            Dim MyColorObjectArray() As Color  = {Color.Red,Color.Blue,Color.Yellow}
            Chart.Palette = MyColorObjectArray
                </code></example></member><member name="P:dotnetCHARTING.Chart.ToolTipTemplate"><summary>
            See Chart.<see cref="T:dotnetCHARTING.Series">DefaultSeries</see>.<see cref="P:dotnetCHARTING.Series.DefaultElement">DefaultElement</see>.<see cref="P:dotnetCHARTING.Element.ToolTip">ToolTip</see>.
            </summary><example><code lang="CS">
            Chart.ToolTipTemplate = "Value: %YValue";
                </code><code lang="VB">
            Chart.ToolTipTemplate = "Value: %YValue"
                </code></example><exclude></exclude><excludetoc></excludetoc></member><member name="P:dotnetCHARTING.Chart.DataGridTranspose"><summary>
            Gets or sets a value indicating whether the data with which the specified <see cref="P:dotnetCHARTING.Chart.DataGrid"></see> control
            is populated will be transposed.
            </summary><example><code lang="CS">
            Chart.DataGridTranspose = true;
                </code><code lang="VB">
            Chart.DataGridTranspose = true
                </code></example></member><member name="P:dotnetCHARTING.Chart.OverlapFooter"><summary>
            Gets or sets a value indicating whether the 'unlicensed chart' footer overlaps the
            chart or moves it up. 
            </summary><remarks>If set to false, the rendered chart will exactly match that of a production 
            licensed chart (which does not have the footer or branding in the top right). If set to true, 
            the chart will be resized slightly so that the footer does not overlap the chart. In all cases 
            the final rendered image will be exactly what you set for Chart.Size or Chart.Height and 
            Chart.Width. </remarks><example><code lang="CS">
            Chart.OverlapFooter = true;
                </code><code lang="VB">
            Chart.OverlapFooter = true
                </code></example></member><member name="P:dotnetCHARTING.Chart.SmartLabelLine"><summary>
            See <see cref="P:dotnetCHARTING.SmartLabel.Line">Chart.DefaultSeries.DefaultElement.SmartLabel.Line</see>.
            </summary><example><code lang="CS">
            //Import Drawing2D namespace: &lt;%@ Import Namespace="System.Drawing.Drawing2D" %&gt;
            Line LineObj = new Line(Color.Red);
            LineObj.DashStyle = DashStyle.DashDot;
            LineObj.EndCap = LineCap.ArrowAnchor;
            Chart.SmartLabelLine = LineObj;
                </code><code lang="VB">
            'Import Drawing2D namespace: &lt;%@ Import Namespace="System.Drawing.Drawing2D" %&gt;
            Dim LineObj As Line  = new Line(Color.Red)
            LineObj.DashStyle = DashStyle.DashDot
            LineObj.EndCap = LineCap.ArrowAnchor
            Chart.SmartLabelLine = LineObj
                </code></example></member><member name="P:dotnetCHARTING.Chart.PriceTimeInterval"><summary>
            Gets or sets a time interval used to blend financial data shown in the <see cref="P:dotnetCHARTING.Chart.PriceArea"></see> of a financial chart.
            </summary><example><code lang="CS">
            Chart.PriceTimeInterval = TimeInterval.Days;
                </code><code lang="VB">
            Chart.PriceTimeInterval = TimeInterval.Days
                </code></example><exclude></exclude><excludetoc></excludetoc></member><member name="P:dotnetCHARTING.Chart.VolumeTimeInterval"><summary>
            Gets or sets a time interval used to aggregate financial volume data shown 
            in the <see cref="P:dotnetCHARTING.Chart.VolumeArea"></see> of a financial chart.
            </summary><example><code lang="CS">
            Chart.VolumeTimeInterval = TimeInterval.Days;
                </code><code lang="VB">
            Chart.VolumeTimeInterval = TimeInterval.Days
                </code></example><exclude></exclude><excludetoc></excludetoc></member><member name="P:dotnetCHARTING.Chart.ExtraLegendEntries"><summary>
            Gets a collection of additional <see cref="T:dotnetCHARTING.LegendEntry"></see> objects added 
            to the legend. 
            </summary><remarks>This collection allows you to add any number of custom legend
             entries to the legend of your chart.</remarks><example><code lang="CS">
            LegendEntry singleLegendEntry = new LegendEntry();
            singleLegendEntry.Name="Sales more than $3500";
            singleLegendEntry.Background.Color=Color.Red;
            Chart.ExtraLegendEntries.Add(singleLegendEntry);
             
            //For complete code see InvisibleLegendEntry.aspx sample.
                </code><code lang="VB">
            Dim singleLegendEntry As New LegendEntry()
            singleLegendEntry.Name = "Sales more than $3500"
            singleLegendEntry.Background.Color = Color.Red
            Chart.ExtraLegendEntries.Add(singleLegendEntry)
             
            'For complete code see InvisibleLegendEntry.aspx sample.
                </code></example><exclude></exclude><excludetoc></excludetoc></member><member name="P:dotnetCHARTING.Chart.CorrectionWarnings"><summary>
            See <see cref="P:dotnetCHARTING.Chart.Debug"></see></summary><remarks>When data is corrected for example the selected axis.scale is not 
            appropriate for the data included in the chart this property will be populated with a 
            descriptive message. </remarks><exclude></exclude><excludetoc></excludetoc></member><member name="P:dotnetCHARTING.Chart.VolumeSizeRatio"><summary>
            Gets or sets the size ratio between the <see cref="P:dotnetCHARTING.Chart.VolumeArea"></see> and <see cref="P:dotnetCHARTING.Chart.PriceArea"></see> 
            of a financial chart.
            </summary><value>Value Range: 0 - 1</value><remarks>A value of .3 makes the <see cref="P:dotnetCHARTING.Chart.VolumeArea"></see> 30% while the 
            <see cref="P:dotnetCHARTING.Chart.PriceArea"></see>  is 70%.</remarks><example><code lang="CS">
            Chart.VolumeSizeRatio = 0.7;
                </code><code lang="VB">
            Chart.VolumeSizeRatio = 0.7
                </code></example><exclude></exclude><excludetoc></excludetoc></member><member name="P:dotnetCHARTING.Chart.ShadingEffect"><summary>
            See <see cref="P:dotnetCHARTING.Chart.ShadingEffectMode"></see>.
            </summary><example><code lang="CS">
            Chart.ShadingEffect = true;
                </code><code lang="VB">
            Chart.ShadingEffect = true
                </code></example></member><member name="P:dotnetCHARTING.Chart.GanttCompleteHatchStyle"><summary>
            Gets or sets the hatch style drawn on columns and cylinders when 
            an element's <see cref="P:dotnetCHARTING.Element.Complete"></see> value is set. 
            </summary><remarks>Typically used with Gantt charts to indicate what percentage
             of a task has been completed.</remarks><example><code lang="CS">
            //Import Drawing2D : &lt;%@ Import Namespace="System.Drawing.Drawing2D" %&gt;
            Chart.GanttCompleteHatchStyle = HatchStyle.DiagonalCross;
                </code><code lang="VB">
            'Import Drawing2D : &lt;%@ Import Namespace="System.Drawing.Drawing2D" %&gt;
            Chart.GanttCompleteHatchStyle = HatchStyle.DiagonalCross
                </code></example></member><member name="P:dotnetCHARTING.Chart.Use3D"><seealso cref="P:dotnetCHARTING.Chart.Depth"></seealso><summary>
            Gets or sets a value indicating whether chart elements are rendered in 3D. <seealso cref="P:dotnetCHARTING.Chart.Depth"></seealso></summary><example><code lang="CS">
            Chart.Use3D = true;
                </code><code lang="VB">
            Chart.Use3D = true
                </code></example></member><member name="P:dotnetCHARTING.Chart.Debug"><summary>
            Gets or sets a value that indicates whether debug messages are displayed below the chart.
            </summary><remarks>This property controls if error text is returned below the generated 
            image if a problem occurs. This is typically used for debug purposes when initially 
            developing charts. This is provided as a property so that your end users are not exposed 
            to developer level errors. This property defaults to false
            </remarks><example><code lang="CS">
            Chart.Debug = true;
                </code><code lang="VB">
            Chart.Debug = true
                </code></example></member><member name="P:dotnetCHARTING.Chart.PrinterOptimizedText"><summary>
            Gets or sets a value that indicates whether text rendered on the chart optimized for printing.
            </summary><isnew></isnew><example><code lang="CS">
            Chart.PrinterOptimizedText = true;
                </code><code lang="VB">
            Chart.PrinterOptimizedText = true
                </code></example></member><member name="P:dotnetCHARTING.Chart.Transpose"><seealso cref="M:dotnetCHARTING.SeriesCollection.Transpose(dotnetCHARTING.SeriesCollection)"></seealso><summary>
            Gets or sets a value indicating whether data added to this chart's <see cref="P:dotnetCHARTING.Chart.SeriesCollection"></see> property
            is automatically transposed.<seealso cref="M:dotnetCHARTING.SeriesCollection.Transpose(dotnetCHARTING.SeriesCollection)"></seealso></summary><example><code lang="CS">
            Chart.Transpose = true;
                </code><code lang="VB">
            Chart.Transpose = true
                </code></example></member><member name="P:dotnetCHARTING.Chart.VolumeArea"><summary>
            Gets or sets a <see cref="T:dotnetCHARTING.ChartArea"></see> object which represents the volume 
            chart area on a financial chart.
            </summary><remarks>Setting <c>Chart.VolumeArea.Visible = false</c> hides the volume chart area.</remarks><example><code lang="CS">
            ChartArea chartAreaObj= new ChartArea();
             chartAreaObj.Background.Color = Color.LightBlue;
             chartAreaObj.Line.Color=Color.Yellow;
             chartAreaObj.InteriorLine.Color=Color.Blue;
             chartAreaObj.Label.Text="Customized volume area";
             Chart.VolumeArea = chartAreaObj;
                </code><code lang="VB">
            Dim chartAreaObj As ChartArea = new ChartArea()
            chartAreaObj.Background.Color = Color.LightBlue
            chartAreaObj.Line.Color=Color.Yellow
            chartAreaObj.InteriorLine.Color=Color.Blue
            chartAreaObj.Label.Text="Customized volume area"
            Chart.VolumeArea = chartAreaObj
                </code></example><exclude></exclude><excludetoc></excludetoc></member><member name="P:dotnetCHARTING.Chart.PriceArea"><summary>
            Gets or sets a <see cref="P:dotnetCHARTING.Chart.ChartArea"></see> object which represents the price 
            chart area on a financial chart.
            </summary><example><code lang="CS">
            ChartArea chartAreaObj= new ChartArea();
             chartAreaObj.Background.Color = Color.LightBlue;
             chartAreaObj.Line.Color=Color.Yellow;
             chartAreaObj.InteriorLine.Color=Color.Blue;
             chartAreaObj.Label.Text="Customized price area";
             Chart.PriceArea = chartAreaObj;
                </code><code lang="VB">
            Dim chartAreaObj As ChartArea = new ChartArea()
            chartAreaObj.Background.Color = Color.LightBlue
            chartAreaObj.Line.Color=Color.Yellow
            chartAreaObj.InteriorLine.Color=Color.Blue
            chartAreaObj.Label.Text="Customized price area"
            Chart.PriceArea = chartAreaObj
                </code></example><exclude></exclude><excludetoc></excludetoc></member><member name="P:dotnetCHARTING.Chart.ChartArea"><summary>
            Gets or sets the main <see cref="P:dotnetCHARTING.Chart.ChartArea"></see> of the image. 
            </summary><example><code lang="CS">
            ChartArea chartAreaObj= new ChartArea();
             chartAreaObj.Background.Color = Color.LightBlue;
             chartAreaObj.Line.Color=Color.Yellow;
             chartAreaObj.InteriorLine.Color=Color.Blue;
             chartAreaObj.Label.Text="Customized chart area";
             Chart.ChartArea = chartAreaObj;
                </code><code lang="VB">
            Dim chartAreaObj As ChartArea = new ChartArea()
            chartAreaObj.Background.Color = Color.LightBlue
            chartAreaObj.Line.Color=Color.Yellow
            chartAreaObj.InteriorLine.Color=Color.Blue
            chartAreaObj.Label.Text="Customized chart area"
            Chart.ChartArea = chartAreaObj
                </code></example></member><member name="P:dotnetCHARTING.Chart.XAxis"><summary><para>Gets or Sets the main XAxis which all series inherit by default.</para></summary><example><code lang="CS">
            //Import Drawing2D : &lt;%@ Import Namespace="System.Drawing.Drawing2D" %&gt;
             Axis xAxisObj = new Axis();
             xAxisObj.Line.StartCap = LineCap.RoundAnchor;    
             xAxisObj.Line.EndCap = LineCap.ArrowAnchor;
             xAxisObj.Line.Width =3;
             xAxisObj.Label.Text="customized xAxis";
             Chart.XAxis = xAxisObj;
                </code><code lang="VB">
            'Import Drawing2D : &lt;%@ Import Namespace="System.Drawing.Drawing2D" %&gt;
             Dim xAxisObj As Axis  = new Axis()
            xAxisObj.Line.StartCap = LineCap.RoundAnchor  
            xAxisObj.Line.EndCap = LineCap.ArrowAnchor
            xAxisObj.Line.Width = 3
            xAxisObj.Label.Text="customized xAxis"
            Chart.XAxis = xAxisObj
                </code></example></member><member name="P:dotnetCHARTING.Chart.YAxis"><summary><para>Gets or Sets the main YAxis which all series inherit by default.</para></summary><example><code lang="CS">
            //Import Drawing2D : &lt;%@ Import Namespace="System.Drawing.Drawing2D" %&gt;
             Axis yAxisObj = new Axis();
             yAxisObj.Line.StartCap = LineCap.RoundAnchor;    
             yAxisObj.Line.EndCap = LineCap.ArrowAnchor;
             yAxisObj.Line.Width =3;
             yAxisObj.Label.Text="customized yAxis";
             Chart.YAxis = yAxisObj;
                </code><code lang="VB">
            'Import Drawing2D : &lt;%@ Import Namespace="System.Drawing.Drawing2D" %&gt;
            Dim yAxisObj As Axis  = new Axis()
            yAxisObj.Line.StartCap = LineCap.RoundAnchor  
            yAxisObj.Line.EndCap = LineCap.ArrowAnchor
            yAxisObj.Line.Width = 3
            yAxisObj.Label.Text="customized yAxis"
            Chart.YAxis = yAxisObj
                </code></example></member><member name="P:dotnetCHARTING.Chart.LegendBox"><summary>Gets or sets a %LegendBox% object that represents the legend box.</summary><remarks><b>Notes</b><br></br>- To hide the legend box use
            <c>Chart.LegendBox.Position = LegendBoxPosition.None</c>. <br></br>
            - When <c>Chart.TitleBox.Position = TitleBoxPosition.FullWithLegend</c> is set
            the legend box will disappear.
            </remarks><example><code lang="CS">
            Chart.LegendBox.Background = new Background(System.Drawing.Color.SkyBlue);
            Chart.LegendBox.CornerBottomLeft = BoxCorner.Square;
            Chart.LegendBox.CornerBottomRight = BoxCorner.Square;
            Chart.LegendBox.CornerTopLeft = BoxCorner.Square;
            Chart.LegendBox.CornerTopRight = BoxCorner.Cut;
            Chart.LegendBox.IconPath="icon.gif";
            Chart.LegendBox.Label =  new dotnetCHARTING.Label("",new Font("Arial",10),Color.DarkSlateBlue);
            Chart.LegendBox.Line = new Line(Color.Blue);
            Chart.LegendBox.Position = LegendBoxPosition.Top;
             
            //For complete code, see LegendBox.aspx sample
                </code><code lang="VB">
            Chart.LegendBox.Background = new Background(System.Drawing.Color.SkyBlue)
            Chart.LegendBox.CornerBottomLeft = BoxCorner.Square
            Chart.LegendBox.CornerBottomRight = BoxCorner.Square
            Chart.LegendBox.CornerTopLeft = BoxCorner.Square
            Chart.LegendBox.CornerTopRight = BoxCorner.Cut
            Chart.LegendBox.IconPath="icon.gif"
            Chart.LegendBox.Label =  new dotnetCHARTING.Label("",new Font("Arial",10),Color.DarkSlateBlue)
            Chart.LegendBox.Line = new Line(Color.Blue)
            Chart.LegendBox.Position = LegendBoxPosition.Top
             
            'For complete code, see LegendBox.aspx sample
                </code></example></member><member name="P:dotnetCHARTING.Chart.TitleBox"><summary>
            Gets or sets a <see cref="T:dotnetCHARTING.Box"></see> object that represents the title box.
            </summary><remarks><b>Notes</b><br></br>- To hide the title box use
            <c>Chart.TitleBox.Position = TitleBoxPosition.None</c>. <br></br>
            - Setting <c>Chart.TitleBox.Icon = "...IconPath..."</c> draws the image inside the 
            title box.
            <br></br>
            - When no title, or icon is provided and TitleBoxPosition.FullWithLegend is not set, 
            the title box is automatically hidden.
            </remarks><example><code lang="CS">
            Chart.TitleBox.Background = new Background(System.Drawing.Color.SkyBlue);
            Chart.TitleBox.CornerBottomLeft = BoxCorner.Square;
            Chart.TitleBox.CornerBottomRight = BoxCorner.Square;
            Chart.TitleBox.CornerTopLeft = BoxCorner.Cut;
            Chart.TitleBox.CornerTopRight = BoxCorner.Cut;
            Chart.TitleBox.IconPath="icon.gif";
            Chart.TitleBox.Label =  new dotnetCHARTING.Label("Orders By Customers",new Font("Arial",10),Color.DarkSlateBlue);
            Chart.TitleBox.Line = new Line(Color.Blue);
            Chart.TitleBox.Position = TitleBoxPosition.Center;
            Chart.TitleBox.Shadow.Color = Color.LightBlue;
            Chart.TitleBox.Shadow.Depth=40;
             
            //For complete code, see TitleBox.aspx sample
                </code><code lang="VB">
            Chart.TitleBox.Background = new Background(System.Drawing.Color.SkyBlue)
            Chart.TitleBox.CornerBottomLeft = BoxCorner.Square
            Chart.TitleBox.CornerBottomRight = BoxCorner.Square
            Chart.TitleBox.CornerTopLeft = BoxCorner.Cut
            Chart.TitleBox.CornerTopRight = BoxCorner.Cut
            Chart.TitleBox.IconPath="icon.gif"
            Chart.TitleBox.Label =  new dotnetCHARTING.Label("Orders By Customers",new Font("Arial",10),Color.DarkSlateBlue)
            Chart.TitleBox.Line = new Line(Color.Blue)
            Chart.TitleBox.Position = TitleBoxPosition.Center
            Chart.TitleBox.Shadow.Color = Color.LightBlue
            Chart.TitleBox.Shadow.Depth=40
             
            'For complete code, see TitleBox.aspx sample
                </code></example></member><member name="P:dotnetCHARTING.Chart.Annotations"><summary>
            A collection of <see cref="T:dotnetCHARTING.Annotation"></see> objects drawn on the chart.
            </summary><example>
                The following code snippet demonstrates how an annotation is added to the
                chart. 
                <code lang="CS">
            Annotation a2 = new Annotation("Annotation text.");
             
            //set the position
            a2.Position = new Point(60,40);
             
            // We'll add a link so when this text is clicked it takes us to a web site.
            a2.URL = "http://www.dotnetcharting.com";
             
            // Make sure the annotation doesn't create a rectangle for the text and wrap it.
            a2.DynamicSize = false;
             
            // In order for the annotation not to draw the background, outline and so 
            // on... We'll use a shortcut to clear the colors.
            a2.ClearColors();
             
            // Add the annotation to a chart.
            Chart.Annotations.Add(a2);
                </code><code lang="VB">
            Dim a2 As Annotation  = new Annotation("Annotation text.")
             
            'set the position
            a2.Position = new Point(60,40)
             
            'We'll add a link so when this text is clicked it takes us to a web site.
            a2.URL = "http://www.dotnetcharting.com"
             
            ' Make sure the annotation doesn't create a rectangle for the text and wrap it.
            a2.DynamicSize = false
             
            'In order for the annotation not to draw the background, outline and so 
            'on... We'll use a shortcut to clear the colors.
            a2.ClearColors()
             
            'Add the annotation to a chart.
            Chart.Annotations.Add(a2)
                </code></example></member><member name="P:dotnetCHARTING.Chart.FileManager"><summary>
            Gets or sets the chart's instance of the <see cref="T:dotnetCHARTING.FileManager"></see> which 
            facilitates saving images.
            </summary><example><code lang="CS">
            //Get the bitmap and add a line to the image
            Bitmap bmp = Chart.GetChartBitmap();
            Graphics g = Graphics.FromImage(bmp);
            g.DrawLine(Pens.Red,36,150,480,150);
            g.DrawString("This is my line",new Font("Arial",12,FontStyle.Bold),new SolidBrush(Color.Black),new Point(40,150));
            g.Dispose();
             
            //Save the image and set the image path to ImageUrl.
            string ImagePath = Chart.FileManager.SaveImage(bmp);
            Image1.ImageUrl = ImagePath;
                </code><code lang="VB">
            'Get the bitmap and add a line to the image
            Dim bmp As Bitmap = Chart.GetChartBitmap()
            Dim g As Graphics = Graphics.FromImage(bmp)
            g.DrawLine(Pens.Red, 36, 150, 480, 150)
            g.DrawString("This is my line", new Font("Arial", 12, FontStyle.Bold), new SolidBrush(Color.Black), new PointF(40F, 150F))
            g.Dispose()
             
            'Save the image and set the image path to ImageUrl.
            Dim ImagePath As String = Chart.FileManager.SaveImage(bmp)
            Image1.ImageUrl = ImagePath
                </code></example></member><member name="P:dotnetCHARTING.Chart.ErrorMessage"><summary>
            See <see cref="P:dotnetCHARTING.Chart.Debug"></see>.
            </summary><exclude></exclude><excludetoc></excludetoc></member><member name="P:dotnetCHARTING.Chart.UseFile"><summary>
            Gets or sets a value indicating whether the generated image is saved as a file in the <see cref="P:dotnetCHARTING.Chart.TempDirectory"></see>
            folder or streamed directly to the browser.
            </summary><remarks>
            .netCHARTING supports streaming images in addition to returning a reference to a
            generated file. There are differences in the way the control can be used between these
            two image return methods. When using a file reference, you are free to treat the page
            as you normally would, including HTML and any other web content on the page.<br></br><br></br>
            If you are streaming the image back, only the control call should exist on the page
            because no other HTML will render. This is not a limitation of .netCHARTING but rather
            specific to the HTTP implementation which serves each request separately (as such a
            request to a web site with 3 images is actually 4 unique requests and the browser does
            the job of assembling those 4 items into the web page you see.<br></br><br></br>
            Becauase streaming images does not allow HTML, setting url and tooltip properties of
            elements on the chart will have no effect.
            </remarks><example><code lang="CS">
            Chart.UseFile = true;
                </code><code lang="VB">
            Chart.UseFile = true
                </code></example></member><member name="P:dotnetCHARTING.Chart.ShowDateInTitle"><summary>
            Gets or sets a value which indicates whether specified dates are shown in the title.
            </summary><remarks>Applicable when Chart.DefaultSeries.Start/EndDate or Chart.Series.Start/EndDate are set.</remarks><example><code lang="CS">
            Chart.ShowDateInTitle = true;
                </code><code lang="VB">
            Chart.ShowDateInTitle = true
                </code></example></member><member name="P:dotnetCHARTING.Chart.CalculateEmptyElement"><summary>
            Gets or sets a value indicating whether the values of empty elements are percieved as 0 
            or omitted in calculations performed with the Chart.SeriesCollection.Add(Calculation calc) 
            shortcut.
            </summary><remarks>If this property is set to false, in all calculations (average,min,median,mode etc.) 
            only the applicable elements are counted. If set to true, such elements are given 0 
            values and included in the calculation. This case occurs when you have multiple series 
            and are calculating derived series from them. Defaults to true. </remarks><example><code lang="CS">
            Chart.CalculateEmptyElement = true;
                </code><code lang="VB">
            Chart.CalculateEmptyElement = true
                </code></example></member><member name="P:dotnetCHARTING.Chart.CleanupPeriod"><summary>
            Gets or sets the number of minutes images are stored
            in the <see cref="P:dotnetCHARTING.Chart.TempDirectory"></see> folder before they are deleted.
            </summary><remarks>
            When .netCHARTING renders a chart a temporary file is created in the directory
            set by the TempDirectory property. The CleanUpPeriod property determines how frequently
            (in minutes) this directory is cleaned by deleting old temporary files. The default is
            15 minutes and the property can be set to 0 in order to disable the cleanup in which
            case temp files are not automatically deleted.<br></br><br></br>
            Any files that start with 'dnc-' will be deleted in the temp directory.
            </remarks><example><code lang="CS">
            //delete old files every 30 minutes
            Chart.CleanupPeriod = 30;
                </code><code lang="VB">
            'delete old files every 30 minutes
            Chart.CleanupPeriod = 30
                </code></example></member><member name="P:dotnetCHARTING.Chart.CleanupMinimumAge"><summary>
            Gets or sets the minimum number of minutes images are stored in
            the <see cref="P:dotnetCHARTING.Chart.TempDirectory"></see> before they are deleted.
            </summary><remarks>When .netCHARTING renders a chart a temporary 
            file is created in the directory set by the TempDirectory property.
            The CleanupMinimumAge ensures that only files older than this age,
            in minutes, will be deleted.</remarks><example><code lang="CS">
            //delete all temp files older than 10 minutes
            Chart.CleanupMinimumAge = 10;
                </code><code lang="VB">
            'delete all temp files older than 10 minutes
            Chart.CleanupMinimumAge = 10
                </code></example></member><member name="P:dotnetCHARTING.Chart.CacheDuration"><seealso cref="P:dotnetCHARTING.FileManager.CachePeriod"></seealso><seealso cref="P:dotnetCHARTING.FileManager.CachePeriod"></seealso><summary>
            Gets or sets the number of minutes an image is cached
            and displayed on a page before a new one is generated.
            <seealso cref="P:dotnetCHARTING.FileManager.CachePeriod"></seealso></summary><remarks>
            When set, a given chart image will be generated on the first hit and on all subsequent hits within 
            the cache duration period the same image will be returned with no rendering 
            work by the chart control. </remarks><example><code lang="CS">
            //Used the already generated image for upto 45 minutes.
            Chart.CacheDuration = 45;
                </code><code lang="VB">
            'Used the already generated image for upto 45 minutes.
            Chart.CacheDuration = 45
                </code></example></member><member name="P:dotnetCHARTING.Chart.ReloadPeriod"><summary>
            Gets or sets a <see cref="T:System.TimeSpan"></see> object that
            determines how often the page containing this chart will
            automatically reload.
            </summary><example><code lang="CS">
            //Reload the page each one minute
            Chart.ReloadPeriod = new TimeSpan(0,1,0)
                </code><code lang="VB">
            'Reload the page each one minute
            Chart.ReloadPeriod = new TimeSpan(0,1,0)
                </code></example></member><member name="P:dotnetCHARTING.Chart.DataGrid"><summary>
            Gets or sets the control ID of a datagrid control that will be populated with the charted data.
            </summary><remarks>This property accepts a control ID for a datagrid. If set, the data represented 
            in the chart is populated in the datagrid of the same name. You must also define 
            a datagrid control with an appropriately named ID within the same script. This 
            property is useful when displaying tabular chart data along with your charts.</remarks><example><code lang="CS">
            Chart.DataGrid = "myChartData";
                </code><code lang="VB">
            Chart.DataGrid = "myChartData"
                </code></example></member><member name="P:dotnetCHARTING.Chart.PieLabelMode"><summary>
            See <see cref="P:dotnetCHARTING.SmartLabel.PieLabelMode">DefaultSeries.DefaultElement.SmartLabel.PieLabelMode</see>.
            </summary><example><code lang="CS">
            //Dispalys label inside the pie slice.
            Chart.PieLabelMode = PieLabelMode.Inside;
                </code><code lang="VB">
            'Dispalys label inside the pie slice.
            Chart.PieLabelMode = PieLabelMode.Inside
                </code></example></member><member name="P:dotnetCHARTING.Chart.DonutHoleSize"><summary>
            Gets or sets a percentage value which determines the relative thickness of the donut ring when ChartType.Donut is used.
            </summary><example><code lang="CS">
            Chart.DonutHoleSize = 60;
                </code><code lang="VB">
            Chart.DonutHoleSize = 60
                </code></example></member><member name="P:dotnetCHARTING.Chart.TotalSeries"><summary>
            Return the total number of series in the seriesCollection. This property usually
            used in conjunction with
            <a href="dotnetCHARTING~dotnetCHARTING.Series~SplitByLimit.html">SplitByLimit</a>.
            </summary><example><code lang="CS">
            int pageSize=3;
                int totalPage = Chart.Total%pageSize==0?Chart.Total/pageSize:(Chart.Total/pageSize)+1;
                if(totalPage&gt;currentPage)
                {
                    //Display "Next" button.
                }
                </code><code lang="VB">
            Dim pageSize As Integer = 3
                Dim totalPage As Integer = Chart.Total / pageSize;
                If Chart.Total Mod pageSize &gt; 0 Then 
                    totalPage = totalPage + 1) 
                End If
                If totalPage &gt; currentPage Then
                    'Display "Next" button.
                End If
                </code></example></member><member name="P:dotnetCHARTING.Chart.ExplodedSliceAmount"><seealso cref="P:dotnetCHARTING.Element.ExplodeSlice">ExplodeSlice</seealso><summary>
            Gets or sets the relative percentage an exploded slice should be pulled out from the pie or donut.
            </summary><example><code lang="CS">
            Chart.ExplodedSliceAmount = 30;
                </code><code lang="VB">
            Chart.ExplodedSliceAmount = 30
                </code></example></member><member name="P:dotnetCHARTING.Chart.DataGridSeriesHeader"><summary>
            Gets or sets the header label of the DataGrid control specified by the <see cref="P:dotnetCHARTING.Chart.DataGrid"></see> property.
            </summary><remarks>This property controls the header label used for the datagrid series name 
            column. If set to "none" the series name column will be removed. If set to "%XAxisLabel", 
            xAxis label set as the header label of the datagrid. </remarks><example><code lang="CS">
            Chart.DataGridSeriesHeader = "Sales for 2003";
                </code><code lang="VB">
            Chart.DataGridSeriesHeader = "Sales for 2003"
                </code></example></member><member name="P:dotnetCHARTING.Chart.AutoNameLabels"><summary>
            Gets or sets a value which indicates whether elements and series are automatically named when no names are provided.
            </summary><example><code lang="CS">
            Chart.AutoNameLabels = true;
                </code><code lang="VB">
            Chart.AutoNameLabels = true
                </code></example></member><member name="P:dotnetCHARTING.Chart.FileName"><summary>
            See <see cref="P:dotnetCHARTING.FileManager.FileName">Chart.FileManager.FileName</see>.
            </summary><example><code lang="CS">
            Chart.FileName = "sales1";
             
            //With default image format, the generated file will be "sales1.png"
                </code><code lang="VB">
            Chart.FileName = "sales1"    
             
            'With default image format, the generated file will be "sales1.png"
                </code></example></member><member name="P:dotnetCHARTING.Chart.DrillDownChain"><summary><para>Gets or sets the drill down chain which activates automatic <b>time based</b>
                drill down if date grouping used.</para><para>If Limit or SplitByLimit used with ShowOther option, setting drill down chain
                to "Other" or "OtherAll" activates automatic drill down to other elements or
                series.</para><para>"OtherAll" shows all other elements or series in the second level.<br></br>
                "Other" shows the next number of elements or series has been set in limit or
                splitByLimit propertes.</para></summary><remarks>When using automated drill down with <see cref="P:dotnetCHARTING.Chart.DateGrouping"></see>, this property controls the drill down chain, 
            or hierarchy, that is followed. In addition you can override names to be displayed for the different drill down levels.</remarks><example><para>This samples demonstrate drill down with dategrouping.</para><para>For complete drill down samples see Features/Drilldown samples.</para><code lang="CS">
            Chart.DrillDownChain = "Year,Month,Day";
            Chart.DrillDownChain = "Year=Current Year,Month=My Month,Day=One day";
                </code><code lang="VB">
            Chart.DrillDownChain = "Year,Month,Day" 
            Chart.DrillDownChain = "Year=Current Year,Month=My Month,Day=One day"
                </code></example></member><member name="P:dotnetCHARTING.Chart.EmptyElementText"><summary>
            Gets or sets the default text of empty element labels.
            See <see cref="P:dotnetCHARTING.EmptyElement.SmartLabel">Chart.DefaultSeries.DefaultElement.SmartLabel</see></summary><example><code lang="CS">
            Chart.EmptyElementText = "N/A";
                </code><code lang="VB">
            Chart.EmptyElementText = "N/A"
                </code></example></member><member name="P:dotnetCHARTING.Chart.AlternateText"><summary>
            Gets or sets text displayed in place of a chart when images can't be viewed. This property can also be used as a tooltip for the chart in browsers that support this feature. 
            </summary><example><code lang="CS">
            Chart.AlternateText = "The image can't be displayed.";
                </code><code lang="VB">
            Chart.AlternateText = "The image can't be displayed."
                </code></example></member><member name="P:dotnetCHARTING.Chart.DateGrouping"><seealso cref="P:dotnetCHARTING.DataEngine.DateGrouping"></seealso><seealso cref="P:dotnetCHARTING.DataEngine.DateGrouping"></seealso><summary>
            Gets or sets a <see cref="T:dotnetCHARTING.TimeInterval"></see> enumeration which determines
            how the values of a given series are aggregated by date when retrieved from a database.
            <seealso cref="P:dotnetCHARTING.DataEngine.DateGrouping"></seealso></summary><remarks>Controls how the values of a given series are grouped by date. 
            In order to use this option the first column returned by the SqlStatement must be a 
            date/time. Options include Minutes, Hours, Days, Weeks, Months, Quarters and Years 
            where any StartDate and EndDate can be used and the chart will show all values 
            sequentially. There are additional options for Hour/Minute, Day/Hour, Week/Day, 
            Month/Day, Year/Quarter and Year/Month in these cases there are 2 special 
            considerations 1) only a single day / week / month / or year is charted and 2) 
            if the date range is greater than the period type (e.g. 1 day / 1 week / 1 month / 1 year) 
            values are totalled over that period. There are also shortcuts for the grouping 
            cases of Hour (Hours/Minute), Day (Day/Hour), Week(Week/Day), Month (Month/Day) 
            and Year (Year/Month). See all time interval options. This feature automatically 
            groups multiple data points over a given date range into the specific date grouping 
            you select. When DateGrouping is enabled you must ensure that each series within a 
            given chart returns date/time data for the first column returned by the SqlStatement.</remarks><example><code lang="CS">
            Chart.DateGrouping = TimeInterval.Days;
                </code><code lang="VB">
            Chart.DateGrouping = TimeInterval.Days
                </code></example></member><member name="P:dotnetCHARTING.Chart.DefaultSeries"><summary>
            Gets or sets a <see cref="T:dotnetCHARTING.Series"></see> object whose properties will trickle 
            to all other series on the chart unless otherwise specified.
            </summary><example><code lang="CS">
            Chart.DefaultSeries.Type = SeriesType.AreaLine;
                </code><code lang="VB">
            Chart.DefaultSeries.Type = SeriesType.AreaLine
                </code></example></member><member name="P:dotnetCHARTING.Chart.DefaultAxis"><summary>
            Gets or sets an <see cref="T:dotnetCHARTING.Axis"></see> object whose properties will 
            trickle down to all other axes on the chart unless otherwise specified.
            </summary><example><code lang="CS">
            Axis AxisObj = new Axis();
             AxisObj.Line.Color = Color.Yellow;    
             AxisObj.Line.Width = 3;
             Chart.DefaultAxis = AxisObj;
                </code><code lang="VB">
            Dim AxisObj As Axis  = new Axis()
            AxisObj.Line.Color = Color.Yellow  
            AxisObj.Line.Width = 3
            Chart.DefaultAxis = AxisObj
                </code></example></member><member name="P:dotnetCHARTING.Chart.DefaultShadow"><summary>
            Gets or sets a shadow object whose properties will trickle to all other objects with shadows.
            </summary><example><code lang="CS">
            Shadow shadowObj = new Shadow();
            shadowObj.Color = Color.Blue;
            shadowObj.Depth = 5;
            shadowObj.Soft =true;
            Chart.DefaultShadow = shadowObj;
                </code><code lang="VB">
            Dim shadowObj As Shadow  = new Shadow()
            shadowObj.Color = Color.Blue
            shadowObj.Depth = 5
            shadowObj.Soft =true
            Chart.DefaultShadow = shadowObj
                </code></example></member><member name="P:dotnetCHARTING.Chart.MarginLeft"><summary>
            Gets or sets the left margin of the chart image.
            </summary><example><code lang="CS">
            Chart.MarginLeft = 20;
                </code><code lang="VB">
            Chart.MarginLeft = 20
                </code></example></member><member name="P:dotnetCHARTING.Chart.MarginBottom"><summary>
            Gets or sets the bottom margin of the chart image.
            </summary><example><code lang="CS">
            Chart.MarginBottom = 20;
                </code><code lang="VB">
            Chart.MarginBottom = 20
                </code></example></member><member name="P:dotnetCHARTING.Chart.MarginRight"><summary>
            Gets or sets the right margin of the chart image.
            </summary><example><code lang="CS">
            Chart.MarginRight = 20;
                </code><code lang="VB">
            Chart.MarginRight = 20
                </code></example></member><member name="P:dotnetCHARTING.Chart.MarginTop"><summary>
            Gets or sets the top margin of the chart image.
            </summary><example><code lang="CS">
            Chart.MarginTop = 20;
                </code><code lang="VB">
            Chart.MarginTop = 20
                </code></example></member><member name="P:dotnetCHARTING.Chart.Size"><summary>
            Sets a string that automatically sets the <see cref="P:dotnetCHARTING.Chart.Height"></see> and <see cref="P:dotnetCHARTING.Chart.Width"></see> of the chart image.
            </summary><value>This property accepts a string formatted 
            as "WidthXHeight". </value><example><code lang="CS">
            Chart.Size = "640X480";
                </code><code lang="VB">
            Chart.Size = "640X480"
                </code></example></member><member name="P:dotnetCHARTING.Chart.MaximumBubbleSize"><summary>
            Gets or sets a value which controls the maximum size of bubbles when ChartType.Bubble is used.
            </summary><remarks>When not set, the maximum size is determined dynamically.</remarks><example><code lang="CS">
            Chart.MaximumBubbleSize = 120;
                </code><code lang="VB">
            Chart.MaximumBubbleSize = 120
                </code></example></member><member name="P:dotnetCHARTING.Chart.ShadingEffectMode"><summary>
            Gets or sets a <see cref="P:dotnetCHARTING.Chart.ShadingEffectMode"></see> enumeration indicating how elements on the chart are shaded.
            </summary><remarks>2D Columns, and Bubbles can use mode One, Two, and Three. 3D Columns, 2D Pies, and 2D Donuts can only use mode 'One'.</remarks><example><code lang="CS">
            Chart.ShadingEffectMode = ShadingEffectMode.One;
                </code><code lang="VB">
            Chart.ShadingEffectMode = ShadingEffectMode.One
                </code></example></member><member name="P:dotnetCHARTING.Chart.StartDayOfWeek"><summary>
            Gets or sets a <see cref="T:System.DayOfWeek"></see> enumeration 
            that indicates the starting day of the week when <see cref="P:dotnetCHARTING.Chart.DateGrouping"></see> is used. 
            </summary><example><code lang="CS">
            Chart.DateGrouping = TimeInterval.Weeks;
            Chart.StartDayOfWeek = DayOfWeek.Monday;
             
            //For complete code, see StartDayOfWeek.aspx sample.
                </code><code lang="VB">
            Chart.DateGrouping = TimeInterval.Weeks
            Chart.StartDayOfWeek = DayOfWeek.Monday
             
            'For complete code, see StartDayOfWeek.aspx sample.
                </code></example></member><member name="P:dotnetCHARTING.Chart.StartDateOfYear"><summary>
            Gets or sets a DateTime object to determine the start month of the year when
               <a href="dotnetCHARTING~dotnetCHARTING.DataEngine~DateGrouping.html">DateGrouping</a>
               is used.
            </summary><remarks>
            This property determine the start month of the year. The default is
            January.
            </remarks><example>
                This example change the year duration from Jan-Dec to Mar-Feb. Beside month, other
                values are ignored. 
                <code lang="CS">
            de.StartDateOfYear = new DateTime(2004,3,1);
                </code><code lang="VB" title="[Visual Basic]">
            de.StartDateOfYear = New DateTime(2004, 3, 1)
                </code></example><seealso cref="P:dotnetCHARTING.Chart.DateGrouping">DateGrouping Property</seealso></member><member name="P:dotnetCHARTING.Chart.DateGroupingSort"><summary>
            Gets or sets a value indicating whether to maintain the sort order of the data as it is provided. 
            </summary><remarks>When dategrouping is used and StartDate or EndDate is not set, the data is sorted by the xAxis field by default.  Setting this property to true will maintain the sort order of the data as it is provided.</remarks><example><code lang="CS">
            Chart.DateGroupingSort = true;
                </code><code lang="VB">
            Chart.DateGroupingSort = true
                </code></example></member><member name="P:dotnetCHARTING.Chart.DateGroupingCalculation"><summary>
            Gets or sets an enum which determines how values are grouped to create a single element value.
            </summary><remarks>When dategrouping is used, if an element has more than one value, 
            a <see cref="T:dotnetCHARTING.Calculation"></see> is performed on those values. </remarks><example><code lang="CS">
            Chart.DateGroupingCalculation = Calculation.Average;
                </code><code lang="VB">
            Chart.DateGroupingCalculation = Calculation.Average
                </code></example></member><member name="P:dotnetCHARTING.Chart.ClipGauges"><summary>
            Gets or sets a value which determines if gauges should be clipped (cut) to display only the active area.</summary><example><code lang="CS">
            Chart.ClipGauges = false;
                </code><code lang="VB">
            Chart.ClipGauges = false
                </code></example></member><member name="P:dotnetCHARTING.Chart.ImageMapText"><summary>
            Returns a string for the image map generated for the current chart image. </summary><example><code lang="CS">
            ImageMapLabel.Text = Chart.ImageMapText //read only
                </code><code lang="VB">
            ImageMapLabel.Text = Chart.ImageMapText //read only
                </code></example></member><member name="P:dotnetCHARTING.Chart.ImageMapName"><summary>
            Returns a string for the image map name generated for the current chart image. </summary><example><code lang="CS">
            ImageMapLabel.Text = Chart.ImageMapName; //read only
                </code><code lang="VB">
            ImageMapLabel.Text = Chart.ImageMapName //read only
                </code></example></member><member name="P:dotnetCHARTING.Chart.DataGridFormatString"><summary>
            Gets or sets the format string which determines number formatting in the datagrid.<br></br></summary><remarks>See 'Formatting Types' in your msdn documentation for a complete list of options.<br></br><br></br>
            Some shortcuts are also provided for specific settings including "C" or "currency" , 
            "E" or "scientific" , "F" or "fixed" , "G" or "general" and "N,2" for normal and the 
            number after the comma determines the number of decimal places.</remarks></member><member name="P:dotnetCHARTING.Chart.DisableBrowserCache"><summary>
            Gets or sets a value indicating whether disable browser cache.
            </summary><example><code lang="CS">
            Chart.DisableBrowserCache = true;
                </code><code lang="VB">
            Chart.DisableBrowserCache = true
                </code></example></member><member name="P:dotnetCHARTING.Chart.ToolTip"><summary>
            Gets or sets the Tooltip of the entinre chart image.
            </summary><example><code lang="CS">
            Chart.ToolTip = "Sales Report";
                </code><code lang="VB">
            Chart.ToolTip = "Sales Report"
                </code></example></member><member name="P:dotnetCHARTING.Chart.Mentor"><summary>
             Gets or sets a value that indicates whether the mentor is shown under the chart control.
            <remarks>The mentor also requires that Chart.Debug is set to true.</remarks></summary></member><member name="P:dotnetCHARTING.Chart.Hotspot"><summary>
            Gets or sets the %dotnetCHARTING.Hotspot% property of the chart image.
            </summary></member><member name="P:dotnetCHARTING.Chart.SmartPalette"><summary>
            Gets or sets a NameColorCollection object that specifies the colors of elements and series with specific names.
            </summary></member><member name="P:dotnetCHARTING.Chart.SmartPaletteAutoSync"><summary>
            Gets or sets a boolean which controls smart palette synchronization.
            </summary></member><member name="T:dotnetCHARTING.ChartXmlSerializer"><summary>
            Summary description for ChartXmlSerializer.
            </summary></member><member name="T:dotnetCHARTING.DataEngine"><summary>
            Acquires and manipulates data from databases or other sources, then creates a 
            <see cref="T:dotnetCHARTING.SeriesCollection"></see> which is consumed by the chart control.
            </summary></member><member name="M:dotnetCHARTING.DataEngine.#ctor"><summary>
            Initializes a new instance of the DataEngine class.
            </summary></member><member name="M:dotnetCHARTING.DataEngine.#ctor(System.Object)"><summary>
            Initializes a new instance of the DataEngine class with a <see cref="P:dotnetCHARTING.DataEngine.Data">data object</see>.
            </summary><param name="dataObj"><b>Supported Data Objects</b><br></br><br></br>
            DataSet <br></br>
            DataTable <br></br>
            DataView <br></br>
            OleDbDataReader <br></br>
            SqlDataReader <br></br>
            IDataReader <br></br>
            String (xml file name) <br></br></param></member><member name="M:dotnetCHARTING.DataEngine.#ctor(System.Object,System.String)"><summary>
            Initializes a new instance of the DataEngine class with a <see cref="P:dotnetCHARTING.DataEngine.Data">data object</see> 
            and mapped <see cref="P:dotnetCHARTING.DataEngine.DataFields"></see>.
            </summary><param name="dataObj"><b>Supported Data Objects</b><br></br><br></br>
            DataSet <br></br>
            DataTable <br></br>
            DataView <br></br>
            OleDbDataReader <br></br>
            SqlDataReader <br></br>
            IDataReader <br></br>
            String (xml file name) <br></br></param><param name="dataFields">See Gettings Started &gt; Tutorials &gt; Data Fields</param></member><member name="M:dotnetCHARTING.DataEngine.#ctor(System.String)"><summary>
            Initializes a new instance of the DataEngine class with a connection string.
            </summary><param name="conn">Initial connection string.</param></member><member name="M:dotnetCHARTING.DataEngine.#ctor(System.String,System.String)"><summary>
            Initializes a new instance of the DataEngine class with a <see cref="P:dotnetCHARTING.DataEngine.ConnectionString"></see> and <see cref="P:dotnetCHARTING.DataEngine.SqlStatement"></see>.
            </summary><param name="conn"></param><param name="sqlStatement"></param></member><member name="M:dotnetCHARTING.DataEngine.#ctor(System.String,System.String,System.String)"><summary>
            Initializes a new instance of the DataEngine class with a <see cref="P:dotnetCHARTING.DataEngine.ConnectionString"></see>, <see cref="P:dotnetCHARTING.DataEngine.SqlStatement"></see>, and <see cref="P:dotnetCHARTING.DataEngine.DataFields"></see>.
            </summary><param name="conn">Connection String</param><param name="sqlStatement">Sql statement</param><param name="dataFields">Data fields</param></member><member name="M:dotnetCHARTING.DataEngine.#ctor(System.String,System.String,dotnetCHARTING.TimeInterval)"><summary>
            Initializes a new instance of the DataEngine class with a <see cref="P:dotnetCHARTING.DataEngine.ConnectionString"></see>, <see cref="P:dotnetCHARTING.DataEngine.SqlStatement"></see>, and <see cref="P:dotnetCHARTING.DataEngine.DateGrouping"></see>.
            </summary><param name="conn">Connection String</param><param name="sqlStatement">Sql statement</param><param name="dateGrouping">DateGrouping</param></member><member name="M:dotnetCHARTING.DataEngine.AddParameter(System.String,System.String,dotnetCHARTING.FieldType)"><summary>
            Adds a stored procedure when to use in conjunction with <see cref="P:dotnetCHARTING.DataEngine.StoredProcedure"></see>.
            </summary><remarks> This method is optionally used in conjunction with the StoredProcedure property to specify any number of parameters for the stored proc.
             A number of field types are supported. 
            <c>de.AddParameter("MyParameter","MyValue",FieldType.Text)</c></remarks><param name="paramName">String specifying the parameter name.</param><param name="paramValue">String pecifying the parameter value.</param><param name="paramType">A <see cref="T:dotnetCHARTING.FieldType"></see> enumeration specifying the parameter type.</param></member><member name="M:dotnetCHARTING.DataEngine.GetFinancialSeries"><summary>
            See <see cref="M:dotnetCHARTING.DataEngine.GetSeries(System.Object)"></see>.
            </summary><returns></returns></member><member name="M:dotnetCHARTING.DataEngine.GetSeries(System.Object)"><summary>
            Initiates data acquisition and processing based on the specified <see cref="P:dotnetCHARTING.DataEngine.Data">data object</see>.
            </summary><param name="dataObj">A <see cref="P:dotnetCHARTING.DataEngine.Data">data object</see>.</param><returns>A <see cref="T:dotnetCHARTING.SeriesCollection"></see> containting the resulting chart data.</returns></member><member name="M:dotnetCHARTING.DataEngine.GetSeries"><summary>
            Initiates data acquisition and processing based on the specified data engine settings.
            </summary><remarks>When <see cref="P:dotnetCHARTING.DataEngine.ChartType"></see> is set to Financial and <see cref="P:dotnetCHARTING.DataEngine.DateGrouping"></see> is 
            specified, high, low, open, and close element values will be calculated based on the price field. Otherwise 
            they will not be generated.</remarks><returns>A <see cref="T:dotnetCHARTING.SeriesCollection"></see> containting the resulting chart data.</returns></member><member name="P:dotnetCHARTING.DataEngine.PopulateDateGroupingSubValues"><summary>
            When using date grouping the main value in the element is derived 
            from the actual values in the database or data provided to .netCHARTING.
            This property controls whether these subvalues used in the calculation 
            to determine the element value are added to <see cref="!:SubValues"></see> or not.  
            By default, such values are not added to the element subvalues.
            </summary></member><member name="P:dotnetCHARTING.DataEngine.LimitPrimarySeries"><summary>
            In a multiple series chart, this property controls the primary series used 
            for the Limit operation. Other series' elements will be matched with 
            the primary series elements and that order will be maintained regardless of
            the values of the other series.  
            For example, if you limit to the top 5 values and set the LimitPrimarySeries 
            to the sales series other series such as dollar amount or quantity 
            would not affect which elements were ultimately selected for the chart.
            </summary></member><member name="P:dotnetCHARTING.DataEngine.DrillDownIntoSeries"><summary>
            When using automated drill down in conjunction with date grouping 
            and multiple series, this property determines if drill down 
            will occur into a single series or multiple series.
            </summary></member><member name="P:dotnetCHARTING.DataEngine.ChartObject"><summary>
            Sets the <see cref="T:dotnetCHARTING.Chart"></see> object.
            </summary></member><member name="P:dotnetCHARTING.DataEngine.ChartType"><summary>
            Gets or sets the <see cref="T:dotnetCHARTING.ChartType"></see> enumeration that sets the
            default <see cref="P:dotnetCHARTING.DataEngine.DataFields"></see> for each type.
            </summary><remarks>See Getting Started &gt; Tutorials &gt; DataFields for more info.</remarks></member><member name="P:dotnetCHARTING.DataEngine.ErrorMessage"><summary>
            Gets an error message which will be available if this %DataEngine% instance fails
            after a call to <b>GetSeries()</b>.
            </summary></member><member name="P:dotnetCHARTING.DataEngine.CultureName"><summary>
            Gets or sets the culture name used when element names are populated with values 
            such as dates.
            </summary><remarks>See the %CultureInfo% class for possible names of a culture.</remarks><example><code lang="CS" title="[C#]">
            Chart.CultureName = "en-GB";
                </code><code lang="VB" title="[Visual Basic]">
            Chart.CultureName = "en-GB"
                </code></example></member><member name="P:dotnetCHARTING.DataEngine.DatabaseCultureName"><summary>
            Gets or sets the culture name used when StartDate and EndDate insert to the sql statement. 
            This property only necessary to set if the web server and database server having different culture setting.
            </summary><remarks>See the %CultureInfo% class for possible names of a culture.</remarks><example><code lang="CS" title="[C#]">
            de.DataBaseCultureName = "en-GB";
                </code><code lang="VB" title="[Visual Basic]">
            de.DataBaseCultureName = "en-GB"
                </code></example></member><member name="P:dotnetCHARTING.DataEngine.ShowOther"><summary>
            Gets or sets a value that indicates whether the additional series not shown due to 
            the use of  <see cref="P:dotnetCHARTING.DataEngine.SplitByLimit"></see>, or elements not shown due to the use 
            of <see cref="P:dotnetCHARTING.DataEngine.Limit"></see>, are aggregated into a single series or element.
            </summary><remarks>See Gettings Started &gt; Tutorials &gt; Data Engine for more info.
            <br></br>The default is false. </remarks><example><code lang="CS" title="[C#]">
            de.ShowOther=true;
                </code><code lang="VB" title="[Visual Basic]">
            de.ShowOther=true
                </code></example></member><member name="P:dotnetCHARTING.DataEngine.StartDayOfWeek"><summary>
            Gets or sets a <see cref="T:System.DayOfWeek"></see> enumeration that determines the day which 
            will be used as the starting day of the week for the dategrouping functionality. 
            </summary><example><code lang="CS" title="[C#]">
            de.DateGrouping = TimeInterval.Weeks;
            de.StartDayOfWeek = DayOfWeek.Monday;
                </code><code lang="VB" title="[Visual Basic]">
            de.DateGrouping = TimeInterval.Weeks
            de.StartDayOfWeek = DayOfWeek.Monday
                </code></example><remarks>
            This property used with conjunction of date grouping by weeks. The default is
            Sunday.
            </remarks></member><member name="P:dotnetCHARTING.DataEngine.StartDateOfYear"><summary>
            Gets or sets a DateTime object to determine the start month of the year when
               <a href="dotnetCHARTING~dotnetCHARTING.DataEngine~DateGrouping.html">DateGrouping</a>
               is used.
            </summary><remarks>
            This property determine the start month of the year. The default is
            January.
            </remarks><example>
                This example change the year duration from Jan-Dec to Mar-Feb. Beside month, other
                values are ignored.
                <code lang="CS" title="[C#]">
            de.StartDateOfYear = new DateTime(2004,3,1);
                </code><code lang="VB" title="[Visual Basic]">
            de.StartDateOfYear = New DateTime(2004, 3, 1)
                </code></example><seealso cref="P:dotnetCHARTING.DataEngine.DateGrouping">DateGrouping Property</seealso></member><member name="P:dotnetCHARTING.DataEngine.FormatString"><summary>
            Gets or sets the format string used when element names are populated with values 
            such as dates.
            </summary><example>
                The following example shows the tick labels in xAxis as full month name.
                <code lang="CS" title="[C#]">
            de.FormatString ="MMMM";
                </code><code lang="VB" title="[Visual Basic]">
            de.FormatString ="MMMM"
                </code></example><remarks><para>This property usually used with conjunction of date grouping. If it doesn't
                set, use an appropriate format for the date grouping. For format information see
                DateTimeFormatInfo or NumberFormatInfo</para></remarks></member><member name="P:dotnetCHARTING.DataEngine.CommandTimeout"><summary>
            Gets or sets the wait time before terminating the attempt to execute a command
            and generating an error.
            </summary><remarks>
            The time (in seconds) to wait for the command to execute. The default value is 30
            seconds.
            </remarks><example>
                The follwoing example set the command timeout to 45 seconds.
                <code lang="CS" title="[C#]">
            de.CommandTimeout=45;
                </code><code lang="VB" title="[Visual Basic]">
            de.CommandTimeout=45
                </code></example></member><member name="P:dotnetCHARTING.DataEngine.OtherElementLabel"><summary>
            Gets or sets the label used for the element or series created when using <see cref="P:dotnetCHARTING.DataEngine.Limit"></see> 
            or <see cref="P:dotnetCHARTING.DataEngine.SplitByLimit"></see> and setting <see cref="P:dotnetCHARTING.DataEngine.ShowOther"></see> to true. 
            </summary><remarks>See Getting Started &gt; Tutorials &gt; Data Engine for more info.</remarks></member><member name="P:dotnetCHARTING.DataEngine.SqlStatement"><summary>
            The SQL statement used to obtain the charting data. 
            </summary><remarks><para>The first column returned is used for the X values, and the second for the Y
                values. The first also has special handling if dates are returned as the
                DateGrouping property can be used for intelligent date handling and grouping. The
                third column is optional and is used only for SplitBy. When a third column is set
                it is used automatically to create a unique series based on each unique value in
                this column.</para><para>NOTE: All date values in your SQL statements should be wrapped with the pound
                symbol: #10/25/2002#, regardless if Access or SQL server is used. Also the
                #StartDate# and #EndDate# tokens can be used in which case the dates set for these
                properties will be set in place of the tokens before the SqlStatement is
                executed.</para><para>See Getting Started &gt; Tutorials &gt; Queries for more info.</para></remarks><example><code lang="CS" title="[C#]">
            de.Series.SqlStatement = "SELECT OrderDate,Total FROM Orders";
             
            //If you are doing a SplitBy you would need another field to correspond to your SplitBy value i.e. 
            de.Series.SqlStatement = "SELECT OrderDate,Total,Customer FROM Orders";
                </code><code lang="VB" title="[Visual Basic]">
            de.Series.SqlStatement = "SELECT OrderDate,Total FROM Orders"
             
            'If you are doing a SplitBy you would need another field To correspond To your SplitBy value i.e. 
            de.Series.SqlStatement = "SELECT OrderDate,Total,Customer FROM Orders"
                </code></example></member><member name="P:dotnetCHARTING.DataEngine.StoredProcedure"><summary>
            This property accepts the name of a stored procedure to be used in place of the <see cref="P:dotnetCHARTING.DataEngine.SqlStatement"></see> 
            property in order to obtain data for the chart. 
            </summary><remarks> Stored Procedures also work with parameters, see the 
            <see cref="M:dotnetCHARTING.DataEngine.AddParameter(System.String,System.String,dotnetCHARTING.FieldType)"></see> method.<br></br>
            See Getting Started &gt; Tutorials &gt; Connecting to Data for more info.</remarks></member><member name="P:dotnetCHARTING.DataEngine.ParameterCollection"><summary>
            Gets or sets a collection of <see cref="T:dotnetCHARTING.Parameter"></see> objects used in conjunction 
            with the <see cref="P:dotnetCHARTING.DataEngine.StoredProcedure"></see> property. 
            <seealso cref="M:dotnetCHARTING.DataEngine.AddParameter(System.String,System.String,dotnetCHARTING.FieldType)"></seealso><seealso cref="P:dotnetCHARTING.DataEngine.StoredProcedure"></seealso></summary></member><member name="P:dotnetCHARTING.DataEngine.ConnectionString"><summary>
            Gets or sets the string used to open a SQL Server, Access, or Excel database.
            </summary><remarks> Access, Excel and SQL server are supported and automatically detected 
            based on the connection string specified. <br></br>
            See <b>Getting Started &gt; Tutorials &gt; Connecting to data</b>.
            </remarks></member><member name="P:dotnetCHARTING.DataEngine.Limit"><summary>
            Gets or sets the limit number of elements returned for each series when data is
            generated. Gets or sets the limit number of elements returned for each series when data
            is generated. This property determines the number of elements to include in the limited
            return. The limit string can be a number "3" or "2x3". In the second format, the first
            number determines the group position and the second number is the limit. By setting
            "2x3" with top limit mode, it only return the second "3" maximum elements.
            </summary><remarks><para>If DateGrouping is used, limit has no effect. In such a case, %StartDate% and
                %EndDate% must be used to limit the generated element count.</para><para><br></br><br></br>
                See <b>Getting Started &gt; Tutorials &gt; Data Engine</b>.</para></remarks><example><code lang="CS" title="[C#]">
            de.Limit="3";
            de.Limit="2x3";
                </code><code lang="VB" title="[Visual Basic]">
            de.Limit="3"
            de.Limit="2x3"
                </code></example><seealso cref="P:dotnetCHARTING.DataEngine.LimitMode">LimitMode Property</seealso></member><member name="P:dotnetCHARTING.DataEngine.LimitMode"><summary>Determine the type of limitation. Default is Top.</summary><remarks>
            This property works in conjunction with <see cref="P:dotnetCHARTING.DataEngine.Limit">Limit</see> or
                 <see cref="P:dotnetCHARTING.DataEngine.SplitByLimit">SplitByLimit</see> to determine which elements or
                 series should be included or excluded.
            </remarks><example><code lang="CS" title="[New Example]">
            de.LimitMode =&lt;see cref="LimitMode"&gt;LimitMode&lt;/see&gt;.Bottom;
                </code><code lang="VB" title="[New Example]">
            de.LimitMode =&lt;see cref="LimitMode"&gt;LimitMode&lt;/see&gt;.Bottom
                </code></example><seealso cref="P:dotnetCHARTING.DataEngine.Limit">Limit Property</seealso></member><member name="P:dotnetCHARTING.DataEngine.SplitByLimit"><seealso cref="P:dotnetCHARTING.DataEngine.LimitMode">LimitMode Property</seealso><summary>Gets or sets the number of series created using SplitBy.</summary><remarks><para>This property works with conjunction of
                <a href="dotnetCHARTING~dotnetCHARTING.DataEngine~LimitMode.html">LimitMode</a>
                property and determines the number of series to include in the return. The limit
                string can be a number "3" or "2x3". In the second format, the first number
                determines the group positon and the second number is the limit. By setting "2x3"
                with top limit mode, it only return the second "3" maximum series.</para><para>See Getting Started &gt; Tutorials &gt; Data Engine.</para></remarks><example><code lang="CS" title="[C#]">
            de.SplitByLimit="3";
            de.SplitByLimit="2x3";
                </code><code lang="VB" title="[Visual Basic]">
            de.SplitByLimit="3";
            de.SplitByLimit="2x3";
                </code></example></member><member name="P:dotnetCHARTING.DataEngine.StartDate"><seealso cref="P:dotnetCHARTING.DataEngine.SqlStatement">SqlStatement</seealso><summary>
            Gets or sets the starting date used with <see cref="P:dotnetCHARTING.DataEngine.SqlStatement"></see> to query filtered data from a database.
            </summary>summary&gt;<remarks>
            This property is used for the %SqlStatement% property where the
            <c>#StartDate#</c> token is replaced with the value set to this property.<br></br><br></br><b>See: Getting Started &gt; Tutorials &gt; Data Engine</b></remarks><example><code lang="CS" title="[C#]">
            de.StartDate = new DateTime(2004,12,10);
                </code><code lang="VB" title="[Visual Basic]">
            de.StartDate = new DateTime(2004,12,10)
                </code></example></member><member name="P:dotnetCHARTING.DataEngine.EndDate"><summary>
             Gets or sets the ending date used with <see cref="P:dotnetCHARTING.DataEngine.SqlStatement"></see> to query filtered data from a database.
            </summary><remarks>
            This property is used for the %SqlStatement% property where the <c>#EndDate#</c>
            token is replaced with the value set to this property.<br></br><br></br><b>See: Getting Started &gt; Tutorials &gt; Data Engine</b></remarks><example><code lang="CS" title="[C#]">
            de.EndDate = new DateTime(2004,12,30);
                </code><code lang="VB" title="[Visual Basic]">
            de.EndDate = new DateTime(2004,12,30)
                </code></example><seealso cref="P:dotnetCHARTING.DataEngine.SqlStatement">SqlStatement</seealso></member><member name="P:dotnetCHARTING.DataEngine.Data"><summary>
            Gets or sets a DataTable, DataSet, DataView, OleDbDataReader, SqlDataReader, IDataReader, XML file name, 
            or an object that implement IEnumerable, ArrayList or HashTable used to generate a SeriesCollection. 
            </summary><remarks>
            When not connecting to a database directly using ConnectionString and
            SqlStatement, this property offers an alternative method for obtaining database
            data.
            </remarks><example>
                This example sets the data property to a dataTable and defines data fields mapping.
                <code lang="CS" title="[C#]">
            DataEngine de = new DataEngine();
            de.Data = myDataTable;
            de.DataFields = "XAxis=FirstCol,YAxis=SecondCol";
            Chart.SeriesCollection.Add(de.GetSeries());
                </code><code lang="VB" title="[Visual Basic]">
            Dim de As New DataEngine()
            de.Data = myDataTable
            de.DataFields = "XAxis=FirstCol,YAxis=SecondCol"
            Chart.SeriesCollection.Add(de.GetSeries())
                </code></example></member><member name="P:dotnetCHARTING.DataEngine.DataFields"><summary>Gets or sets a value that specifies the 'database column' to 'element value' relationship. 
            </summary><remarks><b>See Getting Started &gt; Tutorials &gt; Data Fields for more
            info.</b></remarks><example><code lang="CS" title="[C#]">
            de.DataFields="xAxis=field1,yAxis=field2,splitby=field3,bubblesize=field4";
                </code><code lang="VB" title="[Visual Basic]">
            de.DataFields="xAxis=field1,yAxis=field2,splitby=field3,bubblesize=field4"
                </code></example></member><member name="P:dotnetCHARTING.DataEngine.DateGrouping"><summary>
            Gets or sets the date grouping of data returned from your database.
            </summary><remarks>
            Controls how the values of a given series are grouped by date. In order to use
            this option the first column returned by the SqlStatement must be a date/time. Options
            include Minutes, Hours, Days, Weeks, Months, Quarters and Years where any StartDate and
            EndDate can be used and the chart will show all values sequentially. There are
            additional options for Hour/Minute, Day/Hour, Week/Day, Month/Day, Year/Quarter and
            Year/Month in these cases there are 2 special considerations 1) only a single day /
            week / month / or year is charted and 2) if the date range is greater than the period
            type (e.g. 1 day / 1 week / 1 month / 1 year) values are totalled over that period.
            There are also shortcuts for the grouping cases of Hour (Hours/Minute), Day (Day/Hour),
            Week(Week/Day), Month (Month/Day) and Year (Year/Month). See all time interval options.
            This feature automatically groups multiple data points over a given date range into the
            specific date grouping you select. When DateGrouping is enabled you must ensure that
            each series within a given chart returns date/time data for the first column returned
            by the SqlStatement.<br></br>
            Controls how the values of a given series are grouped by date. In order to use this
            option the first column returned by the SqlStatement must be a date/time. Options
            include Minutes, Hours, Days, Weeks, Months, Quarters and Years where any StartDate and
            EndDate can be used and the chart will show all values sequentially. There are
            additional options for Hour/Minute, Day/Hour, Week/Day, Month/Day, Year/Quarter and
            Year/Month in these cases there are 2 special considerations 1) only a single day /
            week / month / or year is charted and 2) if the date range is greater than the period
            type (e.g. 1 day / 1 week / 1 month / 1 year) values are totalled over that period.
            There are also shortcuts for the grouping cases of Hour (Hours/Minute), Day (Day/Hour),
            Week(Week/Day), Month (Month/Day) and Year (Year/Month). See all time interval options.
            This feature automatically groups multiple data points over a given date range into the
            specific date grouping you select. When DateGrouping is enabled you must ensure that
            each series within a given chart returns date/time data for the first column returned
            by the SqlStatement.<br></br><br></br><br></br><br></br>
            See <b>Getting Started &gt; Tutorials &gt; Data Engine</b></remarks></member><member name="P:dotnetCHARTING.DataEngine.DateGroupingSort"><summary>
            Gets or sets a value indicating whether to maintain the sort order of the data as it is provided. 
            </summary><remarks>When dategrouping is used and StartDate or EndDate is not set, the data is sorted by the xAxis field by default.  Setting this property to true will maintain the sort order of the data as it is provided.</remarks></member><member name="P:dotnetCHARTING.DataEngine.DateGroupingCalculation"><summary>
            Gets or sets an enum which determines how values are grouped to create a single element value.
            </summary><remarks>When dategrouping is used, if an element has more than one value, 
            a <see cref="T:dotnetCHARTING.Calculation"></see> is performed on those values. </remarks><seealso cref="P:dotnetCHARTING.DataEngine.DateGrouping">DateGrouping Property</seealso></member><member name="T:dotnetCHARTING.SeriesCollection"><summary>
            Contains a collection of <see cref="T:dotnetCHARTING.Series">Series</see> objects.
            </summary><remarks><para>This class can also perform calculations and data manipulation on the series
                it contains.</para><para><strong>See also:</strong><a href="http://www.dotnetcharting.com/documentation/v3_2/Data%20Model.html">Data
                Model Tutorial</a></para></remarks></member><member name="M:dotnetCHARTING.SeriesCollection.Add"><summary>
            Provided as a shortcut for adding elements, series, and series collections the chart <see cref="P:dotnetCHARTING.Chart.SeriesCollection">SeriesCollection</see>.
            </summary><example>
                Adds an element using the shortcut.
                <code lang="CS">
            [C#]
            Chart.Series.Element.YValue = 10;
            Chart.Series.Element.Name = "Element 1";
            Chart.Series.Elements.Add();
            Chart.SeriesCollection.Add();
                </code><code lang="CS">
            [Visual Basic]
            Chart.Series.Element.YValue = 10
            Chart.Series.Element.Name = "Element 1"
            Chart.Series.Elements.Add()
            Chart.SeriesCollection.Add()
                </code></example></member><member name="M:dotnetCHARTING.SeriesCollection.Add(dotnetCHARTING.Calculation)"><summary>
            Adds a series to the collection based on the specified calculation.
            </summary><param name="calc">Calculation to perform on the collection.</param></member><member name="M:dotnetCHARTING.SeriesCollection.Add(dotnetCHARTING.Calculation,System.String)"><summary>
            Adds a series calculated from a specified series.
            </summary><param name="calc">Calculation to perform</param><param name="fromSeries">Name of the series to derrive a series from.</param><returns></returns></member><member name="M:dotnetCHARTING.SeriesCollection.GetProcessedDataTable(System.String)"><summary>
            Returns a DataTable of processed data.
            </summary><returns>Returns a data table of the processed data.</returns><remarks>
            This method usually called in PostDataProcessing event handler method when data
            generated dynamically from a database. Then, the datatable can be displayed with
            dataGrid or other controls.
            </remarks><example>
                The follwoing sample, get a data table and displays with a datagrid. For complete
                sample see features/PostDataProcessing.aspx
                <code lang="CS" title="[C#]">
            //This line should add in Page_Load method
            Chart.PostDataProcessing +=new PostDataProcessingEventHandler(OnPostDataProcessing);
             
            //The method handling the PostDataProcessing event
            void OnPostDataProcessing(Object sender)
            {
                DataTable dt = Chart.SeriesCollection.GetProcessedDataTable("%YValue");
                chartdatagrid.DataSource = new DataView(dt);
                chartdatagrid.DataBind();
             
            }
                </code><code lang="VB" title="[Visual Basic]">
            'This line should add in Page_Load method
            AddHandler Chart.PostDataProcessing, AddressOf OnPostDataProcessing
             
             
            'The method handling the PostDataProcessing event
            Sub OnPostDataProcessing(sender As [Object])
               Dim dt As DataTable = Chart.SeriesCollection.GetProcessedDataTable("%YValue")
               chartdatagrid.DataSource = New DataView(dt)
               chartdatagrid.DataBind()
            End Sub 'OnPostDataProcessing
                </code></example><returns>Returns a data table of the processed data.</returns></member><member name="M:dotnetCHARTING.SeriesCollection.GetProcessedDataTable(System.String,System.Boolean)"><summary>
            Returns a DataTable of processed data.
            </summary><returns>Returns a data table of the processed data.</returns><remarks>
            This method usually called in PostDataProcessing event handler method when data
            generated dynamically from a database. Then, the datatable can be displayed with
            dataGrid or other controls.
            </remarks><example>
                The follwoing sample, get a data table and displays with a datagrid. For complete
                sample see features/PostDataProcessing.aspx
                <code lang="CS" title="[C#]">
            //This line should add in Page_Load method
            Chart.PostDataProcessing +=new PostDataProcessingEventHandler(OnPostDataProcessing);
             
            //The method handling the PostDataProcessing event
            void OnPostDataProcessing(Object sender)
            {
                DataTable dt = Chart.SeriesCollection.GetProcessedDataTable("%YValue",true);
                chartdatagrid.DataSource = new DataView(dt);
                chartdatagrid.DataBind();
             
            }
                </code><code lang="VB" title="[Visual Basic]">
            'This line should add in Page_Load method
            AddHandler Chart.PostDataProcessing, AddressOf OnPostDataProcessing
             
             
            'The method handling the PostDataProcessing event
            Sub OnPostDataProcessing(sender As [Object])
               Dim dt As DataTable = Chart.SeriesCollection.GetProcessedDataTable("%YValue", True)
               chartdatagrid.DataSource = New DataView(dt)
               chartdatagrid.DataBind()
            End Sub 'OnPostDataProcessing
                </code></example><returns>Returns a data table of the processed data.</returns></member><member name="M:dotnetCHARTING.SeriesCollection.GetProcessedDataTable(System.String,System.Boolean,System.Boolean)"><summary>
            Returns a DataTable of processed data.
            </summary><returns>Returns a data table of the processed data.</returns><remarks>
            This method usually called in PostDataProcessing event handler method when data
            generated dynamically from a database. Then, the datatable can be displayed with
            dataGrid or other controls.
            </remarks><example>
                The follwoing sample, get a data table and displays with a datagrid. For complete
                sample see features/PostDataProcessing.aspx
                <code lang="CS" title="[C#]">
            //This line should add in Page_Load method
            Chart.PostDataProcessing +=new PostDataProcessingEventHandler(OnPostDataProcessing);
             
            //The method handling the PostDataProcessing event
            void OnPostDataProcessing(Object sender)
            {
                DataTable dt = Chart.SeriesCollection.GetProcessedDataTable("%YValue",true,true);
                chartdatagrid.DataSource = new DataView(dt);
                chartdatagrid.DataBind();
             
            }
                </code><code lang="VB" title="[Visual Basic]">
            'This line should add in Page_Load method
            AddHandler Chart.PostDataProcessing, AddressOf OnPostDataProcessing
             
             
            'The method handling the PostDataProcessing event
            Sub OnPostDataProcessing(sender As [Object])
               Dim dt As DataTable = Chart.SeriesCollection.GetProcessedDataTable("%YValue", True, True)
               chartdatagrid.DataSource = New DataView(dt)
               chartdatagrid.DataBind()
            End Sub 'OnPostDataProcessing
                </code></example><returns>Returns a data table of the processed data.</returns></member><member name="M:dotnetCHARTING.SeriesCollection.GetProcessedDataTable(System.String,System.Boolean,System.Boolean,System.String)"><summary>
            Returns a DataTable of processed data.
            </summary><returns>Returns a data table of the processed data.</returns><remarks>
            This method usually called in PostDataProcessing event handler method when data
            generated dynamically from a database. Then, the datatable can be displayed with
            dataGrid or other controls.
            </remarks><example>
                The follwoing sample, get a data table and displays with a datagrid. For complete
                sample see features/PostDataProcessing.aspx
                <code lang="CS" title="[C#]">
            //This line should add in Page_Load method
            Chart.PostDataProcessing +=new PostDataProcessingEventHandler(OnPostDataProcessing);
             
            //The method handling the PostDataProcessing event
            void OnPostDataProcessing(Object sender)
            {
                DataTable dt = Chart.SeriesCollection.GetProcessedDataTable("%YValue",true,true,"Sales");
                chartdatagrid.DataSource = new DataView(dt);
                chartdatagrid.DataBind();
             
            }
                </code><code lang="VB" title="[Visual Basic]">
            'This line should add in Page_Load method
            AddHandler Chart.PostDataProcessing, AddressOf OnPostDataProcessing
             
             
            'The method handling the PostDataProcessing event
            Sub OnPostDataProcessing(sender As [Object])
               Dim dt As DataTable = Chart.SeriesCollection.GetProcessedDataTable("%YValue", True, True, "Sales")
               chartdatagrid.DataSource = New DataView(dt)
               chartdatagrid.DataBind()
            End Sub 'OnPostDataProcessing
                </code></example></member><member name="M:dotnetCHARTING.SeriesCollection.#ctor"><summary>
            Initializes a new instance of the SeriesCollection class.
            </summary></member><member name="M:dotnetCHARTING.SeriesCollection.#ctor(dotnetCHARTING.Series[])"><summary>
            Initializes a new instance of the SeriesCollection class and adds the specified series to it.
            </summary><param name="seriesList">List of <see cref="T:dotnetCHARTING.Series"></see> to add to the collection.</param></member><member name="M:dotnetCHARTING.SeriesCollection.Add(dotnetCHARTING.Series)"><summary>
            Adds a specified <see cref="T:dotnetCHARTING.Series">Series</see> class to this collection.
            </summary><param name="series">The <see cref="T:dotnetCHARTING.Series">Series</see> to add.</param><returns>The zero-based index of the added <see cref="T:dotnetCHARTING.Series">Series</see>.</returns></member><member name="M:dotnetCHARTING.SeriesCollection.Add(dotnetCHARTING.SeriesCollection)"><summary>
            Adds a specified SeriesCollection to this collection.
            </summary><param name="seriesCollection">The SeriesCollection to add.</param></member><member name="M:dotnetCHARTING.SeriesCollection.Add(dotnetCHARTING.Series[])"><summary> Adds the specified <see cref="T:dotnetCHARTING.Series"></see> objects to this collection.</summary><param name="seriesList">A list of <see cref="T:dotnetCHARTING.Series"></see> objects to add.</param></member><member name="M:dotnetCHARTING.SeriesCollection.Add(dotnetCHARTING.SeriesCollection[])"><summary> Adds <see cref="T:dotnetCHARTING.Series"></see> of the specified <see cref="T:dotnetCHARTING.SeriesCollection"></see> objects to this collection.</summary><param name="seriesCollectionList">A list of <see cref="T:dotnetCHARTING.SeriesCollection"></see> objects to add.</param></member><member name="M:dotnetCHARTING.SeriesCollection.Insert(System.Int32,dotnetCHARTING.Series)"><summary>
            Inserts a series into this collection at a specified index.
            </summary><param name="index">The zero-based index into the collection at which to insert the series.</param><param name="series">The series to insert into this collection.</param></member><member name="M:dotnetCHARTING.SeriesCollection.Remove(dotnetCHARTING.Series)"><summary>
            Removes a specified series from this collection.
            </summary><param name="series">The series to remove.</param></member><member name="M:dotnetCHARTING.SeriesCollection.Contains(dotnetCHARTING.Series)"><summary>
            Determines whether this collection contains a specified <see cref="T:dotnetCHARTING.Series">Series</see>.
            </summary><param name="series">The <see cref="T:dotnetCHARTING.Series">Series</see> to find.</param><returns>true if the specified <see cref="T:dotnetCHARTING.Series">Series</see> belongs to this collection; otherwise, false.</returns></member><member name="M:dotnetCHARTING.SeriesCollection.GetElement(System.Int32,System.Int32)"><summary>
            Gets an <see cref="T:dotnetCHARTING.Element"></see> at the specified series and element index.
            </summary><param name="seriesIndex">Index of the series.</param><param name="elementIndex">Indes of the element.</param><returns>Returns an <see cref="T:dotnetCHARTING.Element"></see> at the specified series and element index.</returns></member><member name="M:dotnetCHARTING.SeriesCollection.GetElement(System.String,System.String)"><summary>Gets an %Element% with the specified name from a named series.</summary><returns>Returns an <see cref="T:dotnetCHARTING.Element"></see> with a specified name from a named series.</returns><param name="seriesName">Series name.</param><param name="elementName">Element name.</param></member><member name="M:dotnetCHARTING.SeriesCollection.GetSeries(System.String)"><summary>
            Retrieves the named <see cref="T:dotnetCHARTING.Series"></see>.
            </summary><param name="seriesName">Name of the series to get</param><returns>The named series.</returns></member><member name="M:dotnetCHARTING.SeriesCollection.Transpose"><summary>
            Transposes the data of this series collection. Data is transposed by converting the series in this collection to 
            elements and the element groups into series.
            </summary></member><member name="M:dotnetCHARTING.SeriesCollection.Transpose(dotnetCHARTING.Axis)"><summary>
            Transposes the data bound to a specified axis. Data is transposed by converting the series in this collection to 
            elements and the element groups into series.
            </summary><param name="xAxis">The axis bound to data that is to be transposed.</param></member><member name="M:dotnetCHARTING.SeriesCollection.GroupByElements"><summary>
            Groups series into even element groups where every element will have a matching element in all other series.
            </summary><remarks>The result will be series of even number of elements with the same names.</remarks></member><member name="M:dotnetCHARTING.SeriesCollection.GetSmartPalette(dotnetCHARTING.Palette)"><summary>
            Generates a
            <a href="dotnetCHARTING~dotnetCHARTING.SmartPalette.html">SmartPalette</a> object that
            contains the names of series in this <strong>SeriesCollection</strong> matched with the
            specified Palette enumeration.
            </summary><isnew>6/24/2005</isnew><param name="palette">Palette used to generate the SmartPalette object.</param></member><member name="M:dotnetCHARTING.SeriesCollection.GetSmartPalette(System.Drawing.Color[])"><summary>
            Generates a
            <a href="dotnetCHARTING~dotnetCHARTING.SmartPalette.html">SmartPalette</a> object that
            contains the names of series in this <strong>SeriesCollection</strong> matched with the
            specified array of color objects.
            </summary><isnew>6/24/2005</isnew><param name="colors">Array of colors used to generate the SmartPalette.</param></member><member name="M:dotnetCHARTING.SeriesCollection.Calculate(System.String,dotnetCHARTING.Calculation)"><summary>
            Performs a calculation on this collection.
            </summary><param name="calc">The calculation to perform on this collection.</param><param name="label">Name of the returned series.</param><returns>Returns a series based on the specified calculation.</returns></member><member name="M:dotnetCHARTING.SeriesCollection.CalculateElement(System.String,dotnetCHARTING.Calculation)"><summary>
            Performs a calculation on this collection.
            </summary><param name="calc">The calculation to perform on this collection.</param><param name="label">Name of the returned element.</param><returns>Returns an element based on the specified calculation.</returns></member><member name="M:dotnetCHARTING.SeriesCollection.Calculate(System.String,dotnetCHARTING.Calculation,System.Int32)"><summary>
            Performs a calculation on this collection with an extra parameter.
            </summary><remarks>Calculation.TrendLineLinear and Calculation.TrendLineLinearScatter will yield result
            with extra elements which simulate the continuance of a trend. Supplying the ExtraParam parameter
            denotes the number of extra elements to create.
            </remarks><param name="label">Name of the returned series.</param><param name="calc">The calculation to perform on this collection.</param><param name="ExtraParam">Extra parameter.</param><returns>Returns a series based on the specified calculation.</returns></member><member name="M:dotnetCHARTING.SeriesCollection.Calculate(System.String,dotnetCHARTING.Calculation,dotnetCHARTING.Axis)"><summary>
            Performs a calculation on series in this collection that are bound to the specified axis.
            </summary><param name="calc">The calculation to perform.</param><param name="label">The label of the returned series.</param><param name="xAxis">The axis bound to data on which the calculation is performed.</param><returns>Returns a series based on the specified calculation.</returns></member><member name="M:dotnetCHARTING.SeriesCollection.GetAxisSeries(dotnetCHARTING.Axis)"><summary>Gets a collection of series associated with the specified axis.</summary><returns>Returns a series collection.</returns><param name="a">The axis bound to data which will be returned in a series collection.</param></member><member name="M:dotnetCHARTING.SeriesCollection.Sort(dotnetCHARTING.ElementValue,System.String)"><summary>
            Sorts the <see cref="T:dotnetCHARTING.Series"></see> based on an element property and order.
            </summary><param name="ev"><see cref="T:dotnetCHARTING.ElementValue"></see> to sort by.</param><param name="order">Takes "Desc" or "Asc" as inputs. If the string is not recognized 
            "Asc" will be used.</param></member><member name="P:dotnetCHARTING.SeriesCollection.Item(System.Int32)"><summary>
            Gets or sets the <see cref="T:dotnetCHARTING.Series"></see> at a specified index. 
            </summary></member><member name="P:dotnetCHARTING.SeriesCollection.SmartPalette"><summary>
            Gets or sets a
            <a href="dotnetCHARTING~dotnetCHARTING.SmartPalette.html">SmartPalette</a> object that
            will determine the colors of series in this <strong>SeriesCollection</strong>.
            </summary></member><member name="T:dotnetCHARTING.SeriesCollection.SqPair"><summary>
            For GroupBySequence Use
            </summary></member><member name="M:dotnetCHARTING.SeriesCollection.SqPair.#ctor(System.DateTime,System.String,dotnetCHARTING.Element)"><summary></summary><param name="d">xDateTIme</param><param name="n">Element Name</param><param name="e">Element</param></member><member name="F:dotnetCHARTING.SeriesCollection.SqPair.dt"><summary>
            Element's XDateTime
            </summary></member><member name="F:dotnetCHARTING.SeriesCollection.SqPair.name"><summary>
            Element's name
            </summary></member><member name="F:dotnetCHARTING.SeriesCollection.SqPair.eRef"><summary>
            Element Reference
            </summary></member><member name="T:dotnetCHARTING.Series"><summary>Encapsulates a group of elements.</summary><remarks>
                The series represents a group of elements and also: 
                <list type="bullet"><item>Provides a mechanism for setting default properties of all elements
                    within it.</item><item>Controls all series specific properties such as it's LegendEntry or 2D
                    line dash style (if applicable).</item><item>Derives an element based on a Calculation performed on the elements
                    within it.</item><item>Provides data manipulation methods such as sorting and trimming of it's
                    elements.</item></list><br></br><strong>See also:</strong><a href="http://www.dotnetcharting.com/documentation/v3_2/Data%20Model.html">Data
                Model Tutorial</a></remarks></member><member name="M:dotnetCHARTING.Series.AddElements(dotnetCHARTING.Series)"><summary>Adds the elements of the specified series to this series.</summary><param name="fromSeries">Series whose elements will be added.</param></member><member name="M:dotnetCHARTING.Series.AddElements(dotnetCHARTING.Element[])"><summary>Adds the specified elements to this series.</summary><param name="elementList">A list of elements to add</param></member><member name="M:dotnetCHARTING.Series.AddParameter(System.String,System.String,dotnetCHARTING.FieldType)"><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><summary>
            Adds a stored procedure when to use in conjunction with <see cref="P:dotnetCHARTING.Series.StoredProcedure"></see>.
            <seealso cref="T:dotnetCHARTING.DataEngine"></seealso></summary><remarks> This method is optionally used in conjunction with the StoredProcedure property to specify any number of parameters for the stored proc.
             A number of field types are supported. 
            <c>de.AddParameter("MyParameter","MyValue",FieldType.Text)</c></remarks></member><member name="M:dotnetCHARTING.Series.FromYValues(System.String,System.Double[])"><summary>Creates a named series of element with the specified y values.</summary><param name="name">Name of resulting Series.</param><param name="yValues">YValues of resulting elements.</param></member><member name="M:dotnetCHARTING.Series.FromYValues(System.Double[])"><summary>Creates a series of element with the specified y values.</summary><param name="yValues">YValues of resulting elements.</param></member><member name="M:dotnetCHARTING.Series.#ctor(System.String,dotnetCHARTING.Element[])"><summary>
            Initializes a new instance of the <strong>Series</strong> class with a name and
            the specified Elements.
            </summary><param name="name">Name of the series.</param><param name="elementList">List of <see cref="T:dotnetCHARTING.Element"></see> objects added to the series.</param></member><member name="M:dotnetCHARTING.Series.#ctor(System.String,dotnetCHARTING.ElementCollection)"><summary>
            Initializes a new instance of the Series class with a name and the specified
            %ElementCollection%.
            </summary><remarks>
            The ElementCollection object itself is not used by the series. The elements are
            copied to this series' ElementCollection.
            </remarks><param name="name">Name of the new series.</param><param name="elementCollection">Collection of elements assigned to this series.</param></member><member name="M:dotnetCHARTING.Series.#ctor"><summary>
            Initializes a new instance of the Series class.
            </summary></member><member name="M:dotnetCHARTING.Series.#ctor(System.String)"><summary>
            Initializes a new instance of the Series class with a name.
            </summary><param name="name">Name of the series.</param></member><member name="M:dotnetCHARTING.Series.#ctor(System.String,dotnetCHARTING.SeriesType)"><summary>
            Initializes a new instance of the Series class with a name and <see cref="T:dotnetCHARTING.SeriesType"></see>.
            </summary><param name="name">Name of the series.</param><param name="seriesType">Series type of the series.</param></member><member name="M:dotnetCHARTING.Series.GetSmartPalette(dotnetCHARTING.Palette)"><isnew>6/24/2005</isnew><summary>
            Generates a
            <a href="dotnetCHARTING~dotnetCHARTING.SmartPalette.html">SmartPalette</a> object that
            contains the names of the elements in this <strong>Series</strong> matched with the
            specified Palette enumeration.
            </summary></member><member name="M:dotnetCHARTING.Series.GetSmartPalette(System.Drawing.Color[])"><isnew>6/24/2005</isnew><summary>
            Generates a
            <a href="dotnetCHARTING~dotnetCHARTING.SmartPalette.html">SmartPalette</a> object that
            contains the names of the elements in this <strong>Series</strong> matched with the
            specified array of Color objects.
            </summary></member><member name="M:dotnetCHARTING.Series.Calculate(System.String,dotnetCHARTING.Calculation)"><summary>
            Performs a <see cref="T:dotnetCHARTING.Calculation"></see> on current instance of this series.
            </summary><param name="name">Name of the returned element.</param><param name="calculation">The calculation to perform.</param><returns>Returns an <see cref="P:dotnetCHARTING.Series.Element"></see> object based on the specified <see cref="T:dotnetCHARTING.Calculation"></see>.</returns></member><member name="M:dotnetCHARTING.Series.Trim(System.Double,System.Double,dotnetCHARTING.ElementValue)"><summary>
            Trims elements out of this series based on a specified numeric range and element property.
            </summary><remarks>The <see cref="T:dotnetCHARTING.ElementValue"></see> specified must be a numeric
            property.</remarks><param name="Low">Numeric minimum of the range.</param><param name="High">Numeric maximum of the range.</param><param name="ev">The <see cref="T:dotnetCHARTING.ElementValue"></see> the range is compared to.</param></member><member name="M:dotnetCHARTING.Series.Trim(dotnetCHARTING.ScaleRange,dotnetCHARTING.ElementValue)"><summary>
            Trims the elements with values outside the specified
            <see cref="T:dotnetCHARTING.ScaleRange">dotnetCHARTING.ScaleRange</see>.
            </summary><param name="range">Range outside of which to trim elements.</param><param name="ev">The %ElementValue% the range is compared to.</param></member><member name="M:dotnetCHARTING.Series.Trim(System.DateTime,System.DateTime,dotnetCHARTING.ElementValue)"><summary>
            Trims elements out of this series based on a specified time range and element property.
            </summary><remarks>The <see cref="T:dotnetCHARTING.ElementValue"></see> specified must be a <see cref="T:System.DateTime"></see>
            property.</remarks><param name="Low"><see cref="T:System.DateTime"></see> minimum of the range.</param><param name="High"><see cref="T:System.DateTime"></see> maximum of the range.</param><param name="ev">The <see cref="T:dotnetCHARTING.ElementValue"></see> the range is compared to.</param></member><member name="M:dotnetCHARTING.Series.Trim(dotnetCHARTING.CalendarPattern,dotnetCHARTING.ElementValue)"><summary>
            Trims elements out of this series based on a specified
            %dotnetCHARTING.CalendarPattern% and element property.
            </summary><param name="cp">CalendarPattern used to trim the series.</param><param name="ev">ElementValue to match against the calendar pattern.</param></member><member name="M:dotnetCHARTING.Series.Sort(dotnetCHARTING.ElementValue,System.String)"><summary>Sorts the %Elements% based on an element property and order.</summary></member><member name="M:dotnetCHARTING.Series.Sort(dotnetCHARTING.ElementValue,System.String,System.Int32,System.Int32)"><summary>
            Sorts the %Elements% based on an element property and order from the start index
            to the end index.
            </summary><param name="ev"><see cref="T:dotnetCHARTING.ElementValue"></see> to sort by.</param><param name="order">Takes "Desc" or "Asc" as inputs. If the string is not recognized 
            "Asc" will be used.</param><param name="startIndex">Index at which sorting starts.</param><param name="endIndex">Index at which sorting stops.</param></member><member name="M:dotnetCHARTING.Series.op_Addition(dotnetCHARTING.Series,dotnetCHARTING.Series)"><summary>
            Adds two Series objects together. 
            </summary><param name="lhs">Left hand side Series.</param><param name="rhs">Right hand side Series.</param><remarks>All element values such as YValue, XValue etc. are added based on element
            names. This means that only elements with the same name will be computed.</remarks><returns></returns></member><member name="M:dotnetCHARTING.Series.op_Addition(System.Double,dotnetCHARTING.Series)"><summary>
            Adds a value to all elements in the rhs series. 
            </summary><param name="lhs">A double value.</param><param name="rhs">A series.</param><returns></returns></member><member name="M:dotnetCHARTING.Series.op_Addition(dotnetCHARTING.Series,System.Double)"><summary>
            Adds a value to all elements in the rhs series. 
            </summary><param name="lhs">A series.</param><param name="rhs">A double value.</param><returns></returns></member><member name="M:dotnetCHARTING.Series.op_Subtraction(dotnetCHARTING.Series,dotnetCHARTING.Series)"><summary>
            Subtracts the element values of series on the right from the series on the left. 
            </summary><param name="lhs">Series subtracted from.</param><param name="rhs">Series subtracted by.</param><remarks>All element values such as YValue, XValue etc. are subtracted based 
            on element names. This means that only elements with the same name will be computed.</remarks><returns></returns></member><member name="M:dotnetCHARTING.Series.op_Subtraction(System.Double,dotnetCHARTING.Series)"><summary>
            Subtracts all element values from the left hand side number. 
            </summary><param name="lhs">Number subtracted from.</param><param name="rhs">Series subtracted by.</param><returns></returns></member><member name="M:dotnetCHARTING.Series.op_Subtraction(dotnetCHARTING.Series,System.Double)"><summary>
            Subtracts the number on the right hand side from the element values of the series on the left. 
            </summary><param name="lhs">Series subtracted from.</param><param name="rhs">Number subtracted by.</param><returns></returns></member><member name="M:dotnetCHARTING.Series.op_Multiply(dotnetCHARTING.Series,dotnetCHARTING.Series)"><summary>
            Multiplies two Series objects together. 
            </summary><param name="lhs">Left hand side Series.</param><param name="rhs">Right hand side Series.</param><returns></returns><remarks>All element values such as YValue, XValue etc. are multiplied
             based on element names. This means that only elements with the same
              name will be computed.</remarks></member><member name="M:dotnetCHARTING.Series.op_Multiply(System.Double,dotnetCHARTING.Series)"><summary>
            Multiplies a series by a value.
            </summary><param name="lhs">Number multiplied by.</param><param name="rhs">Series multiplied by.</param><returns></returns></member><member name="M:dotnetCHARTING.Series.op_Multiply(dotnetCHARTING.Series,System.Double)"><summary>
            Multiplies a series by a value.
            </summary><param name="lhs">Series multiplied by.</param><param name="rhs">Series multiplied by.</param><returns></returns></member><member name="M:dotnetCHARTING.Series.op_Division(dotnetCHARTING.Series,dotnetCHARTING.Series)"><summary>
            Divides the element values of the series on the left by the element values of the series on the right. 
            </summary><param name="lhs">Dividend series.</param><param name="rhs">Divisor series.</param><returns></returns><remarks>All element values such as YValue, XValue etc. are divided based on element names. 
            This means that only elements with the same name will be computed.</remarks></member><member name="M:dotnetCHARTING.Series.op_Division(System.Double,dotnetCHARTING.Series)"><summary>
            Divides the value on the left by the series on the right. 
            </summary><param name="lhs">Dividend number.</param><param name="rhs">Divisor series.</param><returns></returns></member><member name="M:dotnetCHARTING.Series.op_Division(dotnetCHARTING.Series,System.Double)"><summary>
            Divides the series on the left by the value on the right. 
            </summary><param name="lhs">Dividend series.</param><param name="rhs">Divisor number.</param><returns></returns></member><member name="M:dotnetCHARTING.Series.Add(dotnetCHARTING.Series,dotnetCHARTING.Series)"><summary>
            Adds two Series objects together. 
            </summary><param name="lhs">Left hand side Series.</param><param name="rhs">Right hand side Series.</param><remarks>All element values such as YValue, XValue etc. are added based on element
            names. This means that only elements with the same name will be computed.</remarks><returns></returns></member><member name="M:dotnetCHARTING.Series.Add(System.Double,dotnetCHARTING.Series)"><summary>
            Adds a value to all elements in the rhs series. 
            </summary><param name="lhs">A double value.</param><param name="rhs">A series.</param><returns></returns></member><member name="M:dotnetCHARTING.Series.Add(dotnetCHARTING.Series,System.Double)"><summary>
            Adds a value to all elements in the rhs series. 
            </summary><param name="lhs">A series.</param><param name="rhs">A double value.</param><returns></returns></member><member name="M:dotnetCHARTING.Series.Subtract(dotnetCHARTING.Series,dotnetCHARTING.Series)"><summary>
            Subtracts the element values of series on the right from the series on the left. 
            </summary><param name="lhs">Series subtracted from.</param><param name="rhs">Series subtracted by.</param><remarks>All element values such as YValue, XValue etc. are subtracted based 
            on element names. This means that only elements with the same name will be computed.</remarks><returns></returns></member><member name="M:dotnetCHARTING.Series.Subtract(System.Double,dotnetCHARTING.Series)"><summary>
            Subtracts all element values from the left hand side number. 
            </summary><param name="lhs">Number subtracted from.</param><param name="rhs">Series subtracted by.</param><returns></returns></member><member name="M:dotnetCHARTING.Series.Subtract(dotnetCHARTING.Series,System.Double)"><summary>
            Subtracts the number on the right hand side from the element values of the series on the left. 
            </summary><param name="lhs">Series subtracted from.</param><param name="rhs">Number subtracted by.</param><returns></returns></member><member name="M:dotnetCHARTING.Series.Multiply(dotnetCHARTING.Series,dotnetCHARTING.Series)"><summary>
            Multiplies two Series objects together. 
            </summary><param name="lhs">Left hand side Series.</param><param name="rhs">Right hand side Series.</param><returns></returns><remarks>All element values such as YValue, XValue etc. are multiplied
             based on element names. This means that only elements with the same
              name will be computed.</remarks></member><member name="M:dotnetCHARTING.Series.Multiply(System.Double,dotnetCHARTING.Series)"><summary>
            Multiplies a series by a value.
            </summary><param name="lhs">Number multiplied by.</param><param name="rhs">Series multiplied by.</param><returns></returns></member><member name="M:dotnetCHARTING.Series.Multiply(dotnetCHARTING.Series,System.Double)"><summary>
            Multiplies a series by a value.
            </summary><param name="lhs">Series multiplied by.</param><param name="rhs">Series multiplied by.</param><returns></returns></member><member name="M:dotnetCHARTING.Series.Divide(dotnetCHARTING.Series,dotnetCHARTING.Series)"><summary>
            Divides the element values of the series on the left by the element values of the series on the right. 
            </summary><param name="lhs">Dividend series.</param><param name="rhs">Divisor series.</param><returns></returns><remarks>All element values such as YValue, XValue etc. are divided based on element names. 
            This means that only elements with the same name will be computed.</remarks></member><member name="M:dotnetCHARTING.Series.Divide(System.Double,dotnetCHARTING.Series)"><summary>
            Divides the value on the left by the series on the right. 
            </summary><param name="lhs">Dividend number.</param><param name="rhs">Divisor series.</param><returns></returns></member><member name="M:dotnetCHARTING.Series.Divide(dotnetCHARTING.Series,System.Double)"><summary>
            Divides the series on the left by the value on the right. 
            </summary><param name="lhs">Dividend series.</param><param name="rhs">Divisor number.</param><returns></returns></member><member name="P:dotnetCHARTING.Series.SplineTensionPercent"><summary>
            Gets or sets a value between 0 and 100 that specifies the tension of a spline
            curve.
            </summary></member><member name="P:dotnetCHARTING.Series.TotalElements"><summary>
            Return the total number of elements in the elements collection. This property usually
            used in conjunction with
            <a href="dotnetCHARTING~dotnetCHARTING.Series~Limit.html">Limit</a>.
            </summary><example><code lang="CS">
            int pageSize=3;
            int totalPage = Chart.Total%pageSize==0?Chart.Total/pageSize:(Chart.Total/pageSize)+1;
            if(totalPage&gt;currentPage)
            {
            //Display "Next" button.
            }
                </code><code lang="VB">
            Dim pageSize As Integer = 3
            Dim totalPage As Integer = Chart.Total / pageSize;
            If Chart.Total Mod pageSize &gt; 0 Then 
            totalPage = totalPage + 1) 
            End If
            If totalPage &gt; currentPage Then
            'Display "Next" button.
            End If
                </code></example></member><member name="P:dotnetCHARTING.Series.Element"><summary>
            Gets or sets an <see cref="T:dotnetCHARTING.Element">Element</see> object which facilitates a shortcut for adding elements to the chart.
            </summary><example>
                Add a single element to the chart collection. 
                <code lang="CS" title="[C#]">
            Chart.Series.Element.YValue = 10;
            Chart.Series.Element.Name = "Element 1";
            Chart.Series.Elements.Add();
            Chart.SeriesCollection.Add();
                </code><code lang="VB" title="[Visual Basic]">
            Chart.Series.Element.YValue = 10
            Chart.Series.Element.Name = "Element 1"
            Chart.Series.Elements.Add()
            Chart.SeriesCollection.Add()
                </code></example></member><member name="P:dotnetCHARTING.Series.Data"><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><summary>
            Gets or sets a DataTable, DataSet, DataView, OleDbDataReader, SqlDataReader, IDataReader, XML file name, 
            or an object that implement IEnumerable, ArrayList or HashTable used to generate a SeriesCollection. 
            <seealso cref="T:dotnetCHARTING.DataEngine"></seealso></summary><remarks>When not connecting to a database directly using 
            ConnectionString and SqlStatement, this property can be used to supply objects with data.</remarks><example>
                Adds data based on the myDataTable . 
                <code lang="CS" title="[C#]">
            Chart.Series.Data = myDataTable;
            Chart.Series.DataFields = "XAxis=FirstCol,YAxis=SecondCol";
            Chart.SeriesCollection.Add();
                </code><code lang="VB" title="[Visual Basic]">
            Chart.Series.Data = myDataTable
            Chart.Series.DataFields = "FirstCol=XAxis,SecondCol=YAxis"
            Chart.SeriesCollection.Add()
                </code></example></member><member name="P:dotnetCHARTING.Series.ShowOther"><seealso cref="P:dotnetCHARTING.DataEngine.ShowOther"></seealso><seealso cref="P:dotnetCHARTING.DataEngine.ShowOther"></seealso><seealso cref="P:dotnetCHARTING.DataEngine.ShowOther"></seealso><summary>
            This property controls if the additional series not shown due to the use of 
            <see cref="P:dotnetCHARTING.Series.SplitByLimit"></see>, or the additional elements not shown due to the use 
            of Limit are aggregated into a single series / element and graphed alongside 
            the top x series / elements. 
            <seealso cref="P:dotnetCHARTING.DataEngine.ShowOther"></seealso></summary><remarks>See Gettings Started &gt; Tutorials &gt; Data Engine for more info.
            <br></br>The default is false. </remarks></member><member name="P:dotnetCHARTING.Series.OtherElementText"><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><summary>
            Controls the label used for the aggregated datapoint / series created when using Limit 
            or SplitByLimit and setting ShowOther to true. 
            <seealso cref="T:dotnetCHARTING.DataEngine"></seealso></summary><remarks>See Getting Started &gt; Tutorials &gt; Data Engine for more info.</remarks></member><member name="P:dotnetCHARTING.Series.SqlStatement"><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="P:dotnetCHARTING.DataEngine.SqlStatement"></seealso><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="P:dotnetCHARTING.DataEngine.SqlStatement"></seealso><summary>
            The SQL statement used to obtain the charting data. 
            <seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="P:dotnetCHARTING.DataEngine.SqlStatement"></seealso></summary><remarks>
            The first column returned is used for the X values, and the second for the Y
            values. The first also has special handling if dates are returned as the DateGrouping
            property can be used for intelligent date handling and grouping. The third column is
            optional and is used only for SplitBy. When a third column is set it is used
            automatically to create a unique series based on each unique value in this
            column.<br></br><br></br>
            NOTE: All date values in your SQL statements should be wrapped with the pound symbol:
            #10/25/2002#, regardless if Access or SQL server is used. Also the #StartDate# and
            #EndDate# tokens can be used in which case the dates set for these properties will be
            set in place of the tokens before the SqlStatement is executed.
            </remarks><example><code lang="CS" title="[C#]">
            series.Series.SqlStatement = "SELECT OrderDate,Total FROM Orders";
             
            //If you are doing a SplitBy you would need another field to correspond to your SplitBy value i.e. 
            series.Series.SqlStatement = "SELECT OrderDate,Total,Customer FROM Orders" ;
                </code><code lang="VB" title="[Visual Basic]">
            series.Series.SqlStatement = "SELECT OrderDate,Total FROM Orders"
             
            'If you are doing a SplitBy you would need another field To correspond To your SplitBy value i.e. 
            series.Series.SqlStatement = "SELECT OrderDate,Total,Customer FROM Orders"
                </code></example></member><member name="P:dotnetCHARTING.Series.StoredProcedure"><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><summary>
            This property accepts the name of a stored procedure to be used in place of the <see cref="P:dotnetCHARTING.Series.SqlStatement"></see> 
            property in order to obtain data for the chart. 
            <seealso cref="T:dotnetCHARTING.DataEngine"></seealso></summary><remarks>See the <see cref="P:dotnetCHARTING.Series.SqlStatement"></see> property for details on how 
            the return columns are expected. Stored Procedures also work with parameters, see the <see cref="M:dotnetCHARTING.Series.AddParameter(System.String,System.String,dotnetCHARTING.FieldType)"></see> method.</remarks></member><member name="P:dotnetCHARTING.Series.ConnectionString"><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><summary>
            Sets the database connection string used when dynamically obtaining charting data from a SQL 
            statement.
            <seealso cref="T:dotnetCHARTING.DataEngine"></seealso></summary><remarks>This can be overridden or used in combination with the series level 
            connectionstring. Access, Excel and SQL server are supported and automatically detected 
            based on the connection string specified. See Getting Started &gt; Tutorials &gt; Connecting to data.
            </remarks><example><code lang="CS">
            // This will set the Access connection string default for all series.
            Chart.DefaultSeries.ConnectionString = @"c:\chartsample.mdb";
             
            //This will set the SQL server connection string default to all series:
            Chart.DefaultSeries.ConnectionString ="server=server name or IP;uid=username;pwd=password;database=database name";
                </code><code lang="VB">
            'This will Set the Access connection String Default For all series.
            Chart.DefaultSeries.ConnectionString = "c:\chartsample.mdb" 
             
            'This will Set the SQL server connection String Default To all series:
            Chart.DefaultSeries.ConnectionString ="server=server name or IP;uid=username;pwd=password;database=database name"
                </code></example></member><member name="P:dotnetCHARTING.Series.Limit"><seealso cref="P:dotnetCHARTING.DataEngine.Limit"></seealso><summary>
            Gets or sets the limit number of elements returned for this series when data is
            generated.
            </summary><remarks><para>This property determines the number of elements to include in the limited
                return in conjuction with
                <a href="dotnetCHARTING~dotnetCHARTING.Series~LimitMode.html">LimitMode</a>
                property. The limit string can be a number "3" or "2x3". In the second format, the
                first number determines the group positon and the second number is the limit. By
                setting "2x3" with top limit mode, it only return the second "3" maximum
                elements.</para><para><br></br>
                Note: If DateGrouping is used limit has no effect, you can limit the return with
                the %StartDate% and %EndDate% in such a case.<br></br><br></br>
                See also: Getting Started &gt; Tutorials &gt; Data Engine.</para></remarks><example><code lang="CS" title="[C#]">
            Series.Limit = "10";
            Series.Limit = "2x10";
                </code><code lang="VB" title="[Visual Basic]">
            Series.Limit = "10"
            Series.Limit = "2x10"
                </code></example></member><member name="P:dotnetCHARTING.Series.CommandTimeout"><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><summary><para>Gets or sets the wait time before terminating the attempt to execute a
                command and generating an error.</para></summary><example>
                The follwoing example set the command timeout to 45 seconds. 
                <code lang="CS">
            Chart.Series.CommandTimeout=45;
                </code><code lang="VB">
            Chart.Series.CommandTimeout=45
                </code></example></member><member name="P:dotnetCHARTING.Series.SplitByLimit"><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><remarks><para>This property works with conjunction of
                <a href="dotnetCHARTING~dotnetCHARTING.Series~LimitMode.html">LimitMode</a>
                property and determines the number of series to include in the return. The limit
                string can be a number "3" or "2x3". In the second format, the first number
                determines the group positon and the second number is the limit. By setting "2x3"
                with top limit mode, it only return the second "3" maximum series.</para></remarks><example><code lang="CS" title="[C#]">
            de.SplitByLimit="3";
            de.SplitByLimit="2x3";
                </code><code lang="VB" title="[Visual Basic]">
            de.SplitByLimit="3"
            de.SplitByLimit="2x3"
                </code></example><summary>Gets or sets the number of series created using SplitBy.</summary><seealso cref="P:dotnetCHARTING.Series.LimitMode">LimitMode Property</seealso></member><member name="P:dotnetCHARTING.Series.StartDate"><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><summary>
            The starting date used with <see cref="P:dotnetCHARTING.Series.SqlStatement"></see> to query filtered data from a database.
            <seealso cref="T:dotnetCHARTING.DataEngine"></seealso></summary><remarks><para>This property affects the date listed in the title when
                %Chart.ShowDateInTitle% is used, it is also used for the %SqlStatement% property
                where the <c>#StartDate#</c> token is replaced with the value set to this
                property.</para></remarks><example><code lang="CS">
            Chart.Series.StartDate = new DateTime(2004,12,10);
                </code><code lang="VB">
            Chart.Series.StartDate = New DateTime(2004,12,10)
                </code></example></member><member name="P:dotnetCHARTING.Series.EndDate"><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><summary>
             The ending date used with <see cref="P:dotnetCHARTING.Series.SqlStatement"></see> to query filtered data from a database.
             <seealso cref="T:dotnetCHARTING.DataEngine"></seealso></summary><remarks>
            This property affects the date listed in the title when %Chart.ShowDateInTitle%
            is used, it is also used for the %SqlStatement% property where the <c>#EndDate#</c>
            token is replaced with the value set to this property.
            </remarks><example><code lang="CS">
            Chart.Series.StartDate = new DateTime(2004,12,10);
                </code><code lang="VB">
            Chart.Series.StartDate = New DateTime(2004,12,10)
                </code></example></member><member name="P:dotnetCHARTING.Series.DataFields"><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><summary>Gets or sets a value that specifies the 'database column' to 'chart data' relationship. 
            <seealso cref="T:dotnetCHARTING.DataEngine"></seealso></summary><remarks>
            When programmatically setting a datatable or dataset, certain columns are
            expected with specific names. This property allows you to control the expected
            names.<br></br><br></br>
            See Getting Started &gt; Tutorials &gt; Data Fields for more info.
            </remarks><example><code lang="CS">
            Chart.Series.DataFields="xAxis=field1,yAxis=field2,splitby=field3";
                </code><code lang="VB">
            Chart.Series.DataFields="xAxis=field1,yAxis=field2,splitby=field3"
                </code></example></member><member name="P:dotnetCHARTING.Series.Visible"><summary>
            Gets or sets a value which indicates whether the series is visible.
            </summary><remarks>This property is only valid when set through <c>Chart.Series.Visible</c>. Setting this
            property on a lone <see cref="T:dotnetCHARTING.Series"></see> object would have no effect.</remarks></member><member name="P:dotnetCHARTING.Series.LimitMode"><summary>
            Determine the type of limitation for
            <a href="dotnetCHARTING~dotnetCHARTING.Series~Limit.html">Limit</a> and
            <a href="dotnetCHARTING~dotnetCHARTING.Series~SplitByLimit.html">SplitByLimit</a>
            properties. Default is Top.
            </summary><remarks>
            This property works in conjunction with
            <a href="dotnetCHARTING~dotnetCHARTING.Series~Limit.html">Limit</a> or
            <a href="dotnetCHARTING~dotnetCHARTING.Series~SplitByLimit.html">SplitByLimit</a> to
            determine which elements or series should be included or excluded.
            </remarks><example>
                The following setting returns the number of minimum elements or series. 
                <code lang="CS" title="[C#]">
            series.LimitMode = LimitMode.Bottom;
                </code><code lang="VB" title="[Visual Basic]">
            series.LimitMode = LimitMode.Bottom
                </code></example><seealso cref="P:dotnetCHARTING.Series.LimitMode">LimitMode</seealso></member><member name="P:dotnetCHARTING.Series.Item(System.Int32)"><summary>
            Gets or sets an <see cref="P:dotnetCHARTING.Series.Element"></see> of this <b>Series</b> at a specified index. 
            </summary></member><member name="P:dotnetCHARTING.Series.Name"><summary>
            Gets or sets the name of this series.
            </summary></member><member name="P:dotnetCHARTING.Series.Position"><summary>
            Gets or sets the position of this series in relation to other series when the chart is drawn.
            </summary><remarks>Series with lower position values will be drawn closer to the front.</remarks></member><member name="P:dotnetCHARTING.Series.Point"><summary>
            Gets or sets the position of the series on the chart.
            </summary><remarks>After a chart is rendered the position can be used for custom post render drawing.</remarks></member><member name="P:dotnetCHARTING.Series.Elements"><summary>
            Gets or sets a collection of <see cref="T:dotnetCHARTING.Element">Element</see> objects associated with this series.
            </summary></member><member name="P:dotnetCHARTING.Series.ParameterCollection"><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="M:dotnetCHARTING.Series.AddParameter(System.String,System.String,dotnetCHARTING.FieldType)"></seealso><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="M:dotnetCHARTING.Series.AddParameter(System.String,System.String,dotnetCHARTING.FieldType)"></seealso><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="M:dotnetCHARTING.Series.AddParameter(System.String,System.String,dotnetCHARTING.FieldType)"></seealso><summary>
            Gets or sets a collection of <see cref="T:dotnetCHARTING.Parameter"></see> objects used in conjunction with <see cref="P:dotnetCHARTING.Series.StoredProcedure"></see><seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="M:dotnetCHARTING.Series.AddParameter(System.String,System.String,dotnetCHARTING.FieldType)"></seealso></summary></member><member name="P:dotnetCHARTING.Series.YAxis"><summary>
            Gets or sets the y axis for this series.
            </summary></member><member name="P:dotnetCHARTING.Series.XAxis"><summary>
            Gets or sets the x axis for this series.
            </summary></member><member name="P:dotnetCHARTING.Series.DefaultElement"><summary>
            Gets or sets the an <see cref="T:dotnetCHARTING.Element">Element</see> object whose properties will trickle to all elements within this series.
            </summary><remarks>The properties of this element instance will trickle down to all elements within
            this series unless explicitly set for any particular element.</remarks></member><member name="P:dotnetCHARTING.Series.Type"><summary>Gets or sets the type of this series.</summary><remarks>
            This property accepts string,
            <a href="dotnetCHARTING~dotnetCHARTING.SeriesType.html">SeriesType</a>, or %%dotnetCHARTING.SeriesTypeFinancial%%
            enumeration.
            </remarks><seealso cref="T:dotnetCHARTING.ChartType">ChartType Enumeration</seealso></member><member name="P:dotnetCHARTING.Series.Line"><summary>
            Gets or sets the line properties of this series.
            </summary><remarks>This line object is used when the <see cref="T:dotnetCHARTING.SeriesType"></see> of this series is Line, Spline, or AreaLine and <see cref="P:dotnetCHARTING.Chart.Use3D"></see> is false.</remarks><seealso cref="P:dotnetCHARTING.Series.Line">Line Class</seealso></member><member name="P:dotnetCHARTING.Series.LegendEntry"><summary>
            Gets or sets the legend entry properties of this series.
            </summary></member><member name="P:dotnetCHARTING.Series.PaletteName"><summary>
            Gets or sets a <see cref="T:dotnetCHARTING.Palette">Palette</see> boolean which indicates which static palette will be used be the <see cref="P:dotnetCHARTING.Series.Elements"></see> of this series.<br></br><b>Note</b> If used, legend behavior will be different.
            </summary><remarks>When setting this property, each element will get it's own color. Whereas by 
            default, all elements within a series take their color from Series.DefaultElement.Color. 
            When the chart detects that the elements have been individually colored, each element's LegendEntry 
            will replace the single legend entry of the series in the legend box.
            </remarks></member><member name="P:dotnetCHARTING.Series.Palette"><summary>
            Gets or sets the palette which will be used be the <see cref="P:dotnetCHARTING.Series.Elements"></see> of this series.<br></br><b>Note</b> If used, legend behavior will be different.
            </summary><remarks>When setting this property, each element will get it's own color. Whereas by 
            default, all elements within a series take their color from Series.DefaultElement.Color. 
            When the chart detects that the elements have been individually colored, each element's LegendEntry 
            will replace the single legend entry of the series in the legend box.
            </remarks></member><member name="P:dotnetCHARTING.Series.EmptyElement"><summary>
            Gets or sets an <see cref="T:dotnetCHARTING.EmptyElement">EmptyElement</see> object associated with this series.
            </summary><remarks>The properties of this empty element apply to all elements in the <see cref="P:dotnetCHARTING.Series.Elements"></see> collection.</remarks></member><member name="P:dotnetCHARTING.Series.HatchStylePaletteName"><summary>
            Gets or sets a <see cref="T:dotnetCHARTING.Palette">Palette</see> boolean which indicates which static palette will be used be the <see cref="P:dotnetCHARTING.Series.Elements"></see> of this series.<br></br><b>Note</b> If used, legend behavior will be different.
            </summary></member><member name="P:dotnetCHARTING.Series.HatchStylePalette"><summary>
            Gets or sets the hatch style palette used be the <see cref="P:dotnetCHARTING.Series.Elements"></see> of this series.
            </summary></member><member name="P:dotnetCHARTING.Series.Background"><summary>
            Gets or sets the background object used to fill a gauge face or radar associated with this series.
            </summary><remarks>When using ChartType.Radar (single radar) use Chart.DefaultSeries.Background to 
            control the radar background.</remarks></member><member name="T:dotnetCHARTING.Element"><summary>Represents a element object or data point on the chart.</summary><remarks>
            The <strong>Element</strong> object contains properties that describe it's value
            such as YValue, YDateTime, BubbleSize etc.. It also defines defines objects and
            properties that specify the element's behavior and appearance.<br></br><br></br>
            Element properties that don't describe it's value can be set simultaneously for all
            element in a Series by setting them with Series.DefaultElement.___ For
            example:(<c>Chart.DefaultSeries.DefaultElement.SmartLabel.Text = "%YValue"</c>).<br></br><br></br><br></br><strong>See also:</strong><a href="http://www.dotnetcharting.com/documentation/v3_2/Data%20Model.html">Data Model
            Tutorial</a></remarks></member><member name="M:dotnetCHARTING.Element.#ctor(System.String,System.Boolean)"><summary>
            Initialize a new instance of the Element class prividing a way to initialize an empty element.
            </summary><param name="name">Name of this element.</param><param name="isEmpty">Indicated whether this element is empty or not.</param></member><member name="M:dotnetCHARTING.Element.#ctor"><summary>
            Initializes a new instance of the Element class.
            </summary></member><member name="M:dotnetCHARTING.Element.#ctor(System.String,System.Double)"><summary>
            Initialize a new instance of the Element class with (YValue) as the initial element value type.
            </summary><param name="name">Name of this element.</param><param name="double1">Sets YValue</param></member><member name="M:dotnetCHARTING.Element.#ctor(System.String,System.Double,System.Double)"><summary>
            Initialize a new instance of the Element class with (YValueStart, YValue) or
            (XValue, YValue) as the initial element value types.
            </summary><param name="name">Name of this element.</param><param name="double1">Sets YValueStart and XValue</param><param name="double2">Sets YValue</param></member><member name="M:dotnetCHARTING.Element.#ctor(System.String,System.Double,System.Double,System.Double)"><summary>
            Initialize a new instance of the Element class with (YValueStart, YValue, Complete) or
            (XValue, YValue, BubbleSize) as the initial element value types.
            </summary><param name="name">Name of this element.</param><param name="double1">Sets YValueStart and XValue</param><param name="double2">Sets YValue</param><param name="double3">Sets Complete and BubbleSize</param></member><member name="M:dotnetCHARTING.Element.#ctor(System.String,System.DateTime,System.Double)"><summary>
            Initialize a new instance of the Element class with (XDateTime, YValue) or
            (XDateTime, Close) as the initial element value types.
            </summary><param name="name">Name of this element.</param><param name="dateTime1">Sets XDateTime</param><param name="double1">Sets YValue and Close</param></member><member name="M:dotnetCHARTING.Element.#ctor(System.String,System.DateTime,System.DateTime,System.Double)"><summary>
            Initialize a new instance of the Element class with (YDateTimeStart, YDateTime, Complete) or
            (XDateTime, YDateTime, BubbleSize) as the initial element value types.
            </summary><param name="name">Name of this element.</param><param name="dateTime1">Sets YDateTimeStart and XDateTime</param><param name="dateTime2">Set YDateTime</param><param name="double1">Sets Complete and BubbleSize</param></member><member name="M:dotnetCHARTING.Element.#ctor(System.String,System.DateTime,System.DateTime)"><summary>
            Initialize a new instance of the Element class with (YDateTimeStart, YDateTime) or
            (XDateTime, YDateTime) as the initial element value types.
            </summary><param name="name">Name of this element.</param><param name="dateTime1">Sets YDateTimeStart and XDateTime</param><param name="dateTime2">Sets YDateTime</param></member><member name="M:dotnetCHARTING.Element.#ctor(System.String,System.Double,System.DateTime)"><summary>
            Initialize a new instance of the Element class with (XValue, YDateTime) as the initial element value types.
            </summary><param name="name">Name of this element.</param><param name="double1">Sets XValue</param><param name="dateTime1">Sets YDateTime</param></member><member name="M:dotnetCHARTING.Element.#ctor(System.String,System.DateTime,System.Double,System.Double)"><summary>
            Initialize a new instance of the Element class with (XDateTime, YValue, BubbleSize) or
            (XDateTime, Close, Volume) as the initial element value types.
            </summary><param name="name">Name of this element.</param><param name="dateTime1">Sets XDateTime</param><param name="double1">Sets Yvalue and Close</param><param name="double2">Sets BubbleSize and Volume</param></member><member name="M:dotnetCHARTING.Element.#ctor(System.String,System.Double,System.DateTime,System.Double)"><summary>
            Initialize a new instance of the Element class with (XValue, YDateTime, BubbleSize) as the initial element value types.
            </summary><param name="name">Name of this element.</param><param name="double1">Sets XValue</param><param name="dateTime1">Sets YDateTime</param><param name="double2">Sets BubbleSize</param></member><member name="M:dotnetCHARTING.Element.#ctor(System.String,System.DateTime,System.Double,System.Double,System.Double,System.Double)"><summary>
            Initialize a new instance of the Element class with (XDateTime, High, Low, Open, Close) as the initial element value types.
            </summary><param name="name">Name of this element.</param><param name="dateTime1">Sets XDateTime</param><param name="double1">Sets High</param><param name="double2">Sets Low</param><param name="double3">Sets Open</param><param name="double4">Sets Close</param></member><member name="M:dotnetCHARTING.Element.#ctor(System.String,System.DateTime,System.Double,System.Double,System.Double,System.Double,System.Double)"><summary>
            Initialize a new instance of the Element class with (XDateTime, High, Low, Open, Close, Volume) as the initial element value types.
            </summary><param name="name">Name of this element.</param><param name="dateTime1">Sets XDateTime</param><param name="double1">Sets High</param><param name="double2">Sets Low</param><param name="double3">Sets Open</param><param name="double4">Sets Close</param><param name="double5">Sets Volume</param></member><member name="M:dotnetCHARTING.Element.op_Addition(dotnetCHARTING.Element,dotnetCHARTING.Element)"><summary>
            Adds the values of two elements.
            </summary><remarks>All properties of lsh are copied to the resulting element, 
            then rhs properties are trickled to the resulting element.</remarks><param name="lhs">An element.</param><param name="rhs">An element.</param></member><member name="M:dotnetCHARTING.Element.op_Addition(dotnetCHARTING.Element,System.Double)"><summary>
            Adds a value to all values of an element.
            </summary><param name="lhs">An element.</param><param name="rhs">A value.</param></member><member name="M:dotnetCHARTING.Element.op_Addition(System.Double,dotnetCHARTING.Element)"><summary>
            Adds a value to all values of an element.
            </summary><param name="lhs">A value.</param><param name="rhs">An element.</param></member><member name="M:dotnetCHARTING.Element.op_Subtraction(dotnetCHARTING.Element,dotnetCHARTING.Element)"><summary>
            Subtracts an element from another.
            </summary><remarks>All properties of lsh are copied to the resulting element, then 
            rhs properties are trickled to the resulting element.</remarks><param name="lhs">An element.</param><param name="rhs">An element.</param><returns></returns></member><member name="M:dotnetCHARTING.Element.op_Subtraction(dotnetCHARTING.Element,System.Double)"><summary>
            Subtracts a value from all values of an element.
            </summary><param name="lhs">An element.</param><param name="rhs">A value.</param><returns></returns></member><member name="M:dotnetCHARTING.Element.op_Subtraction(System.Double,dotnetCHARTING.Element)"><summary>
            Subtracts all values of an element from specified value.
            </summary><param name="lhs">A value.</param><param name="rhs">An element</param></member><member name="M:dotnetCHARTING.Element.op_Multiply(dotnetCHARTING.Element,dotnetCHARTING.Element)"><summary>
            Multiplies two elements.
            </summary><remarks>All properties of lsh are copied to the resulting element, then rhs properties are trickled to the resulting element.</remarks><param name="lhs">An element.</param><param name="rhs">An element.</param><returns></returns></member><member name="M:dotnetCHARTING.Element.op_Multiply(dotnetCHARTING.Element,System.Double)"><summary>
            Multiplies an element by a specified numeric value.
            </summary><param name="lhs">An element.</param><param name="rhs">A numeric value.</param><returns></returns></member><member name="M:dotnetCHARTING.Element.op_Multiply(System.Double,dotnetCHARTING.Element)"><summary>
             Multiplies an element by a specified numeric value.
            </summary><param name="lhs">A numeric value.</param><param name="rhs">An element.</param><returns></returns></member><member name="M:dotnetCHARTING.Element.op_Division(dotnetCHARTING.Element,dotnetCHARTING.Element)"><summary>
            Divides an element by another.
            </summary><remarks>All properties of lsh are copied to the resulting element, then rhs properties are trickled to the resulting element.</remarks><param name="lhs">An element.</param><param name="rhs">An element.</param><returns></returns></member><member name="M:dotnetCHARTING.Element.op_Division(dotnetCHARTING.Element,System.Double)"><summary>
            Divides an element by a number.
            </summary><param name="lhs">An element.</param><param name="rhs">A numeric value.</param><returns></returns></member><member name="M:dotnetCHARTING.Element.op_Division(System.Double,dotnetCHARTING.Element)"><summary>
            Divider a number by an element.
            </summary><param name="lhs">A numeric value.</param><param name="rhs">An element.</param><returns></returns></member><member name="M:dotnetCHARTING.Element.Add(dotnetCHARTING.Element,dotnetCHARTING.Element)"><summary>
            Adds the values of two elements.
            </summary><remarks>All properties of lsh are copied to the resulting element, 
            then rhs properties are trickled to the resulting element.</remarks><param name="lhs">An element.</param><param name="rhs">An element.</param></member><member name="M:dotnetCHARTING.Element.Add(dotnetCHARTING.Element,System.Double)"><summary>
            Adds a value to all values of an element.
            </summary><param name="lhs">An element.</param><param name="rhs">A value.</param></member><member name="M:dotnetCHARTING.Element.Add(System.Double,dotnetCHARTING.Element)"><summary>
            Adds a value to all values of an element.
            </summary><param name="lhs">A value.</param><param name="rhs">An element.</param></member><member name="M:dotnetCHARTING.Element.Subtract(dotnetCHARTING.Element,dotnetCHARTING.Element)"><summary>
            Subtracts an element from another.
            </summary><remarks>All properties of lsh are copied to the resulting element, then 
            rhs properties are trickled to the resulting element.</remarks><param name="lhs">An element.</param><param name="rhs">An element.</param><returns></returns></member><member name="M:dotnetCHARTING.Element.Subtract(dotnetCHARTING.Element,System.Double)"><summary>
            Subtracts a value from all values of an element.
            </summary><param name="lhs">An element.</param><param name="rhs">A value.</param><returns></returns></member><member name="M:dotnetCHARTING.Element.Subtract(System.Double,dotnetCHARTING.Element)"><summary>
            Subtracts all values of an element from specified value.
            </summary><param name="lhs">A value.</param><param name="rhs">An element</param></member><member name="M:dotnetCHARTING.Element.Multiply(dotnetCHARTING.Element,dotnetCHARTING.Element)"><summary>
            Multiplies two elements.
            </summary><remarks>All properties of lsh are copied to the resulting element, then rhs properties are trickled to the resulting element.</remarks><param name="lhs">An element.</param><param name="rhs">An element.</param><returns></returns></member><member name="M:dotnetCHARTING.Element.Multiply(dotnetCHARTING.Element,System.Double)"><summary>
            Multiplies an element by a specified numeric value.
            </summary><param name="lhs">An element.</param><param name="rhs">A numeric value.</param><returns></returns></member><member name="M:dotnetCHARTING.Element.Multiply(System.Double,dotnetCHARTING.Element)"><summary>
             Multiplies an element by a specified numeric value.
            </summary><param name="lhs">A numeric value.</param><param name="rhs">An element.</param><returns></returns></member><member name="M:dotnetCHARTING.Element.Divide(dotnetCHARTING.Element,dotnetCHARTING.Element)"><summary>
            Divides an element by another.
            </summary><remarks>All properties of lsh are copied to the resulting element, then rhs properties are trickled to the resulting element.</remarks><param name="lhs">An element.</param><param name="rhs">An element.</param><returns></returns></member><member name="M:dotnetCHARTING.Element.Divide(dotnetCHARTING.Element,System.Double)"><summary>
            Divides an element by a number.
            </summary><param name="lhs">An element.</param><param name="rhs">A numeric value.</param><returns></returns></member><member name="M:dotnetCHARTING.Element.Divide(System.Double,dotnetCHARTING.Element)"><summary>
            Divider a number by an element.
            </summary><param name="lhs">A numeric value.</param><param name="rhs">An element.</param><returns></returns></member><member name="P:dotnetCHARTING.Element.Hotspot"><summary>Gets or sets the Hotspot of this <strong>Element</strong>.</summary></member><member name="P:dotnetCHARTING.Element.TakeColorFrom"><summary>
            Gets or sets a Series or Element object from which this element's color will be
            inherited.
            </summary></member><member name="P:dotnetCHARTING.Element.ErrorOffset"><summary>
            Gets or sets the error offset. The offset represents a range, +/- the value of
            the offset with respect to the element's %YValue% value or range.
            </summary></member><member name="P:dotnetCHARTING.Element.ErrorPlusOffset"><summary>
            Gets of sets the positive error offset. When set, a single %SubValue% is drawn
            above the element's value.
            </summary></member><member name="P:dotnetCHARTING.Element.ErrorMinusOffset"><summary>
            Gets of sets the negative error offset. When set, a single %SubValue% is drawn
            below the element's value.
            </summary></member><member name="P:dotnetCHARTING.Element.ErrorHighValue"><summary>
            Gets of sets the high error value. When set, a single %SubValue% is drawn above
            the element's value. When %ErrorLowValue% is also set, a range %SubValue% is drawn
            between the two values.
            </summary></member><member name="P:dotnetCHARTING.Element.ErrorLowValue"><summary>
            Gets of sets the low error value. When set, a single %SubValue% is drawn below
            the element's YValue value or range. When %ErrorHighValue% is also set, a range
            %SubValue% is drawn between the two values.
            </summary></member><member name="P:dotnetCHARTING.Element.ErrorPercent"><summary>
            Gets or sets the error offset based on the specified percentage of the element's
            %YValue% value or range. The offset represents a range, +/- the percentage of the
            element's %YValue% value or range.
            </summary></member><member name="P:dotnetCHARTING.Element.ErrorPlusPercent"><summary>
            Gets or sets the positive error offset based on the specified percentage of the
            element's YValue value or range. When set, a single SubValue is drawn above the
            element's value. When ErrorMinusPercent is also set, a range SubValue is drawn between
            the two points.
            </summary></member><member name="P:dotnetCHARTING.Element.ErrorMinusPercent"><summary>
            Gets or sets the negative error offset based on the specified percentage of the
            element's YValue value or range. When set, a single SubValue is drawn below the
            element's value. When ErrorPlusPercent is also set, a range SubValue is drawn between
            the two points.
            </summary></member><member name="P:dotnetCHARTING.Element.SubValues"><summary>
            Gets a collection of SubValue objects drawn on this
            <strong>Element</strong>.
            </summary></member><member name="P:dotnetCHARTING.Element.DefaultSubValue"><summary>
            Gets or sets a default %dotnetCHARTING.SubValue% object used to propagate its
            property settings to all SubValue objects in the %SubValues% collection.
            </summary></member><member name="P:dotnetCHARTING.Element.YValue"><summary>
            Gets or sets the y value of this element. 
            </summary><remarks>YValue is the main value container for elements. It is used at times when the element's value
            would not officially be considered the <b>y</b> value such as: pie slice value. Using ChartType.ComboHorizontal
            the YValue type value corresponds to the x axis because this allows the element to be interchangable between the 
            vertical and horizontal combo chart.<br></br>
            This Element value type is used by all chart types except ChartType.Financial.
            </remarks></member><member name="P:dotnetCHARTING.Element.YValueStart"><summary>
            Gets or sets the initial Y value of this element. 
            </summary><remarks>Using ChartType.ComboHorizontal,
            the YValueStart type value corresponds to the x axis because this allows the element to be interchangable between the 
            vertical and horizontal combo chart.<br></br>
            This Element value type is used by all chart types except ChartType.Financial.</remarks></member><member name="P:dotnetCHARTING.Element.XValue"><summary>
            Gets or sets the X value of this element.
            </summary><remarks>This Element value is used with value x axes.</remarks></member><member name="P:dotnetCHARTING.Element.XValueStart"><summary>
            Gets or sets the initial X value of this element.
            </summary><remarks>Not yet implemented.</remarks></member><member name="P:dotnetCHARTING.Element.XDateTime"><summary>Gets or sets the X <see cref="T:System.DateTime"></see> value of this element.</summary><remarks>This Element value is used with value x axes.</remarks></member><member name="P:dotnetCHARTING.Element.XDateTimeStart"><summary>
            Gets or sets the initial X <see ref="DateTime">DateTime</see> value of this
            element.
            </summary><remarks>Not yet implemented.</remarks></member><member name="P:dotnetCHARTING.Element.YDateTime"><summary>
            Gets or sets the Y <see ref="DateTime">DateTime</see> value of this
            element.
            </summary><remarks>
            Using ChartType.ComboHorizontal the YDateTime value type corresponds to the x
            axis because this allows the element to be interchangeable between the vertical and
            horizontal combo chart.
            </remarks></member><member name="P:dotnetCHARTING.Element.YDateTimeStart"><summary>
            Gets or sets the initial Y <see ref="DateTime">DateTime</see> value of this
            element.
            </summary><remarks>
            Using ChartType.ComboHorizontal the YDateTimeStart value type corresponds to the
            x axis because this allows the element to be interchangeable between the vertical and
            horizontal combo chart.
            </remarks></member><member name="P:dotnetCHARTING.Element.BubbleSize"><summary>
            Gets or sets the bubble size of this element.
            </summary><remarks>This Element value type is used by ChartType.Bubble only.</remarks></member><member name="P:dotnetCHARTING.Element.Complete"><summary>
            Gets or sets the percent complete value of this element.
            </summary><remarks>This Element value type is used by ChartType.Combo, ComboHorizontal, and ComboSideBySide
            with Column and Cylinder <see cref="T:dotnetCHARTING.SeriesType"></see>. Primarily used to create Gantt charts.</remarks></member><member name="P:dotnetCHARTING.Element.Open"><summary>
            Gets or sets the financial open price of this element.
            </summary><remarks>This element value type is used by ChartType.Financial only.</remarks></member><member name="P:dotnetCHARTING.Element.Close"><summary>
            Gets or sets the financial closing price of this element.
            </summary><remarks>This element value type is used by ChartType.Financial only.</remarks></member><member name="P:dotnetCHARTING.Element.High"><summary>
            Gets or sets the financial high price of this element.
            </summary><remarks>This element value type is used by ChartType.Financial only.</remarks></member><member name="P:dotnetCHARTING.Element.Low"><summary>
            Gets or sets the financial low price of this element.
            </summary><remarks>This element value type is used by ChartType.Financial only.</remarks></member><member name="P:dotnetCHARTING.Element.Volume"><summary>
            Gets or sets the financial volume of this element.
            </summary><remarks>This element value type is used by ChartType.Financial only.</remarks></member><member name="P:dotnetCHARTING.Element.XAxisTick"><summary>
            Gets or sets an
            <a href="dotnetCHARTING~dotnetCHARTING.AxisTick.html">AxisTick</a> object that will
            placed on the x axis at the position of this element's x value. If the x axis is a
            category axis, <a href="dotnetCHARTING~dotnetCHARTING.AxisTick.html">AxisTick</a> will
            not have any effect.
            </summary><remarks>This value is null by default.</remarks></member><member name="P:dotnetCHARTING.Element.YAxisTick"><summary>
            Gets or sets an
            <a href="dotnetCHARTING~dotnetCHARTING.AxisTick.html">AxisTick</a> object that will
            placed on the y axis at the position of this element's y value. If the x axis is a
            category axis, <a href="dotnetCHARTING~dotnetCHARTING.AxisTick.html">AxisTick</a> will
            not have any effect.
            </summary></member><member name="P:dotnetCHARTING.Element.CustomAttributes"><summary>
            Gets a collection of custom attributes associated with this element.
            </summary></member><member name="P:dotnetCHARTING.Element.Length"><summary>
            Gets or sets a percent value representing this element's needle length. 
            </summary><remarks>Applies to gauge charts.</remarks></member><member name="P:dotnetCHARTING.Element.HatchStyle"><summary>
            Gets or sets this element's hatch style.
            </summary><remarks>Hatch styles are filled using <see cref="P:dotnetCHARTING.Element.HatchColor"></see>. By default
            the color is transparent and may need to be specified before the hatch appears.</remarks></member><member name="P:dotnetCHARTING.Element.HatchColor"><summary>
            Gets or sets this element's <see cref="P:dotnetCHARTING.Element.HatchStyle"></see> color.
            </summary></member><member name="P:dotnetCHARTING.Element.Color"><summary>
            Gets or sets this element's color.
            </summary><remarks>
            This color will also trickle to this element's <b>SmartLabel.Color</b> property,
            unless specified. When this element instance is the %Series.DefaultElement% of a
            %Series%, this color will trickle to that series'
            <see cref="P:dotnetCHARTING.Series.Line">Line.Color</see> property, unless specified.
            </remarks></member><member name="P:dotnetCHARTING.Element.SecondaryColor"><summary>
            Gets or sets this element's secondary color.
            </summary><remarks>
            The secondary color is used with financial series types to indicate that the
            closing price (%dotnetCHARTING.Element.Close%) is lower than the opening price
            (%dotnetCHARTING.Element.Open%).
            </remarks><seealso cref="T:dotnetCHARTING.SeriesTypeFinancial">SeriesTypeFinancial Enumeration</seealso></member><member name="P:dotnetCHARTING.Element.Annotation"><summary>
            Gets or sets this element's <see cref="T:dotnetCHARTING.Annotation"></see>.
            </summary><remarks>The annotation's position will be the same as this element's position, usless specified. 
            Element tokens can be used by this annotation's text to describe the element.</remarks></member><member name="P:dotnetCHARTING.Element.SmartLabel"><summary>
            Gets or sets this element's <see cref="T:dotnetCHARTING.SmartLabel"></see>.
            </summary><remarks>By default this label is hidden unless <see cref="P:dotnetCHARTING.Element.ShowValue"></see> is true.</remarks></member><member name="P:dotnetCHARTING.Element.Name"><summary>
            Gets or sets this element's name.
            </summary><remarks>The name property represents the element on <see cref="T:dotnetCHARTING.Axis">label axes.</see></remarks></member><member name="P:dotnetCHARTING.Element.AxisMarker"><summary>
            Gets or sets this element's <see cref="T:dotnetCHARTING.AxisMarker"></see>.
            </summary><remarks>This axis marker will highlight a section of the axis on which this element's
            name appears.</remarks></member><member name="P:dotnetCHARTING.Element.URL"><summary>Gets or sets the element's link URL. (Shortcut to: Element.Hotspot.URL)</summary><remarks>The chart will create an image map with the specified url for this element.
            Element tokens can be used to describe this element in the url.</remarks></member><member name="P:dotnetCHARTING.Element.URLTarget"><summary>
            Gets or sets the URL target of this element's link %URL%. (Shortcut to:
            Element.Hotspot.URLTarget)
            </summary></member><member name="P:dotnetCHARTING.Element.ShowValue"><summary>
            Gets or sets a value that indicates whether this element's <see cref="P:dotnetCHARTING.Element.SmartLabel"></see> is visible.
            </summary></member><member name="P:dotnetCHARTING.Element.ExplodePieSlice"><summary>
            See <see cref="P:dotnetCHARTING.Element.ExplodeSlice"></see></summary><exclude></exclude><excludetoc></excludetoc></member><member name="P:dotnetCHARTING.Element.ExplodeSlice"><summary>
            Gets or sets a value indicating whether the pie slice represented by this element is exploded.
            </summary><remarks>When a pie slice represents a series, that series' <b>DefaultElement.ExplodeSlice</b>
            property indicates whether the slice is exploded.</remarks></member><member name="P:dotnetCHARTING.Element.ForceMarker"><summary>
            Gets or sets a value indicating whether this element's <see cref="P:dotnetCHARTING.Element.Marker">ElementMarker</see> is drawn
            when the parent <see cref="T:dotnetCHARTING.Series"></see> object's <see cref="T:dotnetCHARTING.SeriesType"></see> 
            omits the ElementMarker by default.
            </summary><remarks>Only SeriesTypes: Line (when <see cref="P:dotnetCHARTING.Chart.Use3D"></see> = false), Spline, and Marker
            draw ElementMarkers by default.</remarks></member><member name="P:dotnetCHARTING.Element.Point"><summary>
            Gets the element's pixel coordinate on a chart image.
            </summary><remarks>This position is only available after the chart is rendered.</remarks></member><member name="P:dotnetCHARTING.Element.LabelTemplate"><summary>
            Gets or sets this element's <see cref="P:dotnetCHARTING.Label.Text">SmartLabel.Text</see> property.
            </summary><remarks>Element tokens can be used to describe this element.</remarks></member><member name="P:dotnetCHARTING.Element.ToolTip"><summary>
            Gets or sets this elements tool tip. (Shortcut to:
            Element.Hotspot.Tooltip)
            </summary><remarks>Element tokens can be used to describe this element.</remarks></member><member name="P:dotnetCHARTING.Element.Transparency"><summary>
            Gets or sets the element color's transparency.
            </summary><remarks>A value of 0 will have no transparency and 100 will be completely transparent.</remarks></member><member name="P:dotnetCHARTING.Element.Marker"><summary>
            Gets or sets this element's <see cref="T:dotnetCHARTING.ElementMarker">Marker</see>.
            </summary><remarks>Only <see cref="T:dotnetCHARTING.SeriesType"></see> options: Line (when <see cref="P:dotnetCHARTING.Chart.Use3D"></see> = false), 
            Spline, and Marker draw ElementMarkers by default. For other SeriesTypes, <see cref="P:dotnetCHARTING.Element.ForceMarker"></see> 
            must be true.</remarks></member><member name="P:dotnetCHARTING.Element.LegendEntry"><summary>
            Gets or sets this element's <see cref="T:dotnetCHARTING.LegendEntry"></see>.
            </summary><remarks>The legend entry represents this element in the <see cref="P:dotnetCHARTING.Chart.LegendBox"></see>. 
            Most charts types will only show legend entries of series, not individual elements. Changing this
            behavior to show the element's legend entries is done by setting the series' <see cref="P:dotnetCHARTING.Series.Palette"></see> or 
            <see cref="P:dotnetCHARTING.Series.PaletteName"></see> properties.</remarks></member><member name="T:dotnetCHARTING.SubValue"><summary>
            Represents a value relative to or independent of the parent element's
            value.
            </summary></member><member name="M:dotnetCHARTING.SubValue.FromHighLowValue(System.Double,System.Double)"><summary>
            Creates a new instance of a SubValue object with an independent range based on
            the specified low and high values.
            </summary></member><member name="M:dotnetCHARTING.SubValue.FromPlusMinusOffset(System.Double,System.Double)"><summary>
            Creates a new instance of a SubValue class with a different range offset from an
            element's Yvalue in both directions. Hence, the resulting range will be the sum of the
            high and low offset values.
            </summary></member><member name="M:dotnetCHARTING.SubValue.FromPlusMinusOffset(System.Double)"><summary>
            Creates a new instance of a SubValue class with a range offset from an element's
            Yvalue in both directions. Hence, the resulting range will be twice the specified
            offset value.
            </summary></member><member name="M:dotnetCHARTING.SubValue.FromPlusMinusPercent(System.Double)"><summary>
            Creates a new instance of a SubValue class with a range based on the specified
            percentage of the related element's Yvalue in both directions. Hence, the resulting
            range will be twice the specified percentage.
            </summary></member><member name="M:dotnetCHARTING.SubValue.FromPlusMinusPercent(System.Double,System.Double)"><summary>
            Creates a new instance of a SubValue class with a range based on the specified
            percentage of the related element's Yvalue in both directions. Hence, the resulting
            range will be twice the specified percentage.
            </summary></member><member name="M:dotnetCHARTING.SubValue.FromOffset(System.Double)"><summary>
            Creates a new instance of a SubValue class with a single value offset from an
            element's Yvalue.
            </summary></member><member name="M:dotnetCHARTING.SubValue.FromPercent(System.Double)"><summary>
            Creates a new instance of a SubValue class with a single value based on the
            specified percentage of the related element's Yvalue.
            </summary></member><member name="M:dotnetCHARTING.SubValue.FromValue(System.Double)"><summary>
            Creates a new instance of a SubValue class with a single independent
            value.
            </summary></member><member name="F:dotnetCHARTING.SubValue.isTemporary"><summary>
            If the object is created at runTime.
            </summary></member><member name="F:dotnetCHARTING.SubValue.errorHighUsed"><summary>
             Only High versions used for single value.
            </summary></member><member name="P:dotnetCHARTING.SubValue.Type"><summary>Gets or sets a SubValueType that determines how this sub value is drawn.</summary></member><member name="P:dotnetCHARTING.SubValue.Line"><summary>Gets or sets a Line object used to draw the lines of this SubValue.</summary></member><member name="P:dotnetCHARTING.SubValue.Marker"><summary>
            Gets or sets an ElementMarker object drawn when the SubValue's type is set to
            SubValueType.Marker..
            </summary></member><member name="T:dotnetCHARTING.SubValueCollection"><summary> Contains a collection of <see cref="T:dotnetCHARTING.SubValue"></see> objects. </summary></member><member name="M:dotnetCHARTING.SubValueCollection.#ctor(dotnetCHARTING.SubValue[])"><summary>Creates a new instance of SubValueCollection with the specified list of SubValue objects.</summary></member><!-- Badly formed XML comment ignored for member "M:dotnetCHARTING.SubValueCollection.Add(dotnetCHARTING.SubValue)" --><member name="M:dotnetCHARTING.SubValueCollection.Add(dotnetCHARTING.SubValueCollection)"><summary> Adds a specified <see cref="T:dotnetCHARTING.SubValueCollection"></see> to this collection.</summary><param name="subValueCollection">The <see cref="T:dotnetCHARTING.SubValueCollection"></see> to add.</param></member><member name="M:dotnetCHARTING.SubValueCollection.Add(dotnetCHARTING.SubValue[])"><summary> Adds the specified <see cref="T:dotnetCHARTING.SubValue"></see> objects to this collection.</summary><param name="subValueList">A list of <see cref="T:dotnetCHARTING.SubValue"></see> objects to add.</param></member><member name="M:dotnetCHARTING.SubValueCollection.IndexOf(dotnetCHARTING.SubValue)"><summary>Determines index of a specified <see cref="T:dotnetCHARTING.SubValue"></see> in this collection.</summary><param name="subValue">The <see cref="T:dotnetCHARTING.SubValue"></see> to find.</param><returns>The zero-based index of the specified <see cref="T:dotnetCHARTING.SubValue"></see>.</returns></member><member name="M:dotnetCHARTING.SubValueCollection.Insert(System.Int32,dotnetCHARTING.SubValue)"><summary>Inserts a SubValue into this collection at a specified index. </summary><param name="index">The zero-based index into the collection at which to insert the SubValue.</param><param name="subValue">The SubValue to insert into this collection.</param></member><member name="M:dotnetCHARTING.SubValueCollection.Remove(dotnetCHARTING.SubValue)"><summary>Removes a specified SubValue from this collection.</summary><param name="subValue">The SubValue to remove. </param></member><member name="M:dotnetCHARTING.SubValueCollection.Contains(dotnetCHARTING.SubValue)"><summary>Determines whether this collection contains a specified <see cref="T:dotnetCHARTING.SubValue"></see>.</summary><param name="subValue">The <see cref="T:dotnetCHARTING.SubValue"></see> to find.</param><returns>true if the specified <see cref="T:dotnetCHARTING.SubValue"></see> belongs to this collection; otherwise, false.</returns></member><member name="P:dotnetCHARTING.SubValueCollection.Item(System.Int32)"><summary> Gets or sets the object at a specified index. </summary></member><member name="T:dotnetCHARTING.EmptyElement"><summary>
            Defines the behavior and appearance of empty elements for a given <see cref="T:dotnetCHARTING.Series"></see>.
            </summary></member><member name="M:dotnetCHARTING.EmptyElement.#ctor"><summary>
            Initializes a new instance of the EmptyElement class.
            </summary></member><member name="M:dotnetCHARTING.EmptyElement.getElement"><summary>
            Returns an element with properties of this empty element.
            </summary><returns></returns></member><member name="P:dotnetCHARTING.EmptyElement.Hotspot"><summary>
            Gets or sets the <see cref="T:dotnetCHARTING.Hotspot"></see> of this <b>EmptyElement</b>.
            </summary></member><member name="P:dotnetCHARTING.EmptyElement.Line"><summary>
            Gets or sets a line which substitutes a series' <see cref="P:dotnetCHARTING.Series.Line"></see> object when empty elements are drawn.
            </summary></member><member name="P:dotnetCHARTING.EmptyElement.SmartLabel"><summary>
            Gets or sets the label of empty elements.
            </summary></member><member name="P:dotnetCHARTING.EmptyElement.ToolTip"><summary>
            Gets or sets the tool tip of empty elements.
            </summary></member><member name="P:dotnetCHARTING.EmptyElement.URL"><summary>
            Gets or sets the URL of empty elements.
            </summary></member><member name="P:dotnetCHARTING.EmptyElement.URLTarget"><summary>
            Gets or sets the target of URLs of empty elements.
            </summary></member><member name="P:dotnetCHARTING.EmptyElement.Color"><summary>
            Gets or sets the color of empty elements.
            </summary><remarks>This property will also affect the colors of this empty element's
            <see cref="P:dotnetCHARTING.EmptyElement.Line"></see>, <see cref="P:dotnetCHARTING.EmptyElement.Marker"></see>, and <see cref="P:dotnetCHARTING.EmptyElement.SmartLabel"></see> objects. </remarks></member><member name="P:dotnetCHARTING.EmptyElement.Marker"><summary>
            Gets or sets the <see cref="T:dotnetCHARTING.ElementMarker">marker</see> of empty elements.
            </summary><remarks>To active this marker the following settings are required:<br></br>
            EmptyElement.Mode = EmptyElementMode.Fill<br></br>
            EmptyElement.Marker = ElementMarkerType.(any other than 'None')</remarks></member><member name="P:dotnetCHARTING.EmptyElement.Mode"><summary>
            Gets or sets the empty element mode.
            </summary></member><member name="M:dotnetCHARTING.EmptyElement.Rules.isEmptyMarked(dotnetCHARTING.Series)"><summary>
            Determines whether empty elements are marked in any way for this series.
            </summary><param name="s"></param><returns></returns></member><member name="M:dotnetCHARTING.EmptyElement.Rules.isEmptyMarkerDrawn(dotnetCHARTING.Series)"><summary>
            Determines if a marker is drawn for empty points of this series.
            </summary><param name="s"></param><returns></returns></member><member name="M:dotnetCHARTING.EmptyElement.Rules.isEmptyMiddleMarkerDrawn(dotnetCHARTING.Series)"><summary>
            Determines if a marker is drawn in the middle of empty points of this series.
            </summary><param name="s"></param><returns></returns></member><member name="M:dotnetCHARTING.EmptyElement.Rules.isEmptyLabeled(dotnetCHARTING.Series)"><summary>
            Determines whether a label is drawn for empty points of this series.
            </summary><param name="s"></param><returns></returns></member><member name="T:dotnetCHARTING.ElementCollection"><summary>
            Contains a collection of <see cref="T:dotnetCHARTING.Element">Element</see> objects.
            </summary></member><member name="M:dotnetCHARTING.ElementCollection.Add(dotnetCHARTING.Calculation)"><summary>
            Adds an element to the collection based on the specified calculation.
            </summary><remarks>This method must be used through Chart.Series.Elements.Add(...). </remarks><param name="calc">Calculation to perform on the collection.</param><returns>Numeric index of the added element.</returns></member><member name="M:dotnetCHARTING.ElementCollection.Add(dotnetCHARTING.Calculation,System.String)"><summary>
            Adds an element to the collection based on the specified collection with the specified name.
            </summary><param name="calc">Calculation to perform on the elements.</param><param name="text">Name of the new element.</param><returns>Numeric index of the added element.</returns></member><member name="M:dotnetCHARTING.ElementCollection.Add"><summary>
             Provided as a shortcut for adding element the chart <see cref="P:dotnetCHARTING.Chart.SeriesCollection">SeriesCollection</see>.
             </summary><example><code>[C#]
            Chart.Series.Element.YValue = 10;
            Chart.Series.Element.Name = "Element 1";
            Chart.Series.Elements.Add();
            Chart.SeriesCollection.Add();
            
            </code><code>[Visual Basic]
            Chart.Series.Element.YValue = 10
            Chart.Series.Element.Name = "Element 1"
            Chart.Series.Elements.Add()
            Chart.SeriesCollection.Add()
            </code></example><returns></returns></member><member name="M:dotnetCHARTING.ElementCollection.Add(dotnetCHARTING.Element[])"><summary>
            Adds the specified <b>Elements</b> to this collection.
            </summary><param name="elements">List of elements to add.</param></member><member name="M:dotnetCHARTING.ElementCollection.Add(dotnetCHARTING.ElementCollection)"><summary>
            Adds a specified ElementCollection to this collection.
            </summary><param name="elementCollection">ElementCollection to add.</param><returns></returns></member><member name="M:dotnetCHARTING.ElementCollection.Add(dotnetCHARTING.Element)"><summary>
            Adds a specified <see cref="T:dotnetCHARTING.Element">Element</see> class to this collection.
            </summary><param name="element">The <see cref="T:dotnetCHARTING.Element">Element</see> to add.</param><returns>The zero-based index of the added <see cref="T:dotnetCHARTING.Element">Element</see>.</returns></member><member name="M:dotnetCHARTING.ElementCollection.IndexOf(dotnetCHARTING.Element)"><summary>Determines the index of a specified <see cref="T:dotnetCHARTING.Element"></see> in this collection.</summary><param name="e">The <see cref="T:dotnetCHARTING.AxisTick"></see> to find.</param><returns>The zero-based index of the specified <see cref="T:dotnetCHARTING.AxisTick"></see>.</returns></member><member name="M:dotnetCHARTING.ElementCollection.Insert(System.Int32,dotnetCHARTING.Element)"><summary>
            Inserts a element into this collection at a specified index.
            </summary><param name="index">The zero-based index into the collection at which to insert the element.</param><param name="element">The element to insert into this collection.</param></member><member name="M:dotnetCHARTING.ElementCollection.Remove(dotnetCHARTING.Element)"><summary>
            Removes a specified element from this collection.
            </summary><param name="element">The element to remove.</param></member><member name="M:dotnetCHARTING.ElementCollection.Contains(dotnetCHARTING.Element)"><summary>
            Determines whether this collection contains a specified <see cref="T:dotnetCHARTING.Element">Element</see>.
            </summary><param name="element">The <see cref="T:dotnetCHARTING.Element">Element</see> to find.</param><returns>true if the specified <see cref="T:dotnetCHARTING.Element">Element</see> belongs to this collection; otherwise, false.</returns></member><member name="P:dotnetCHARTING.ElementCollection.Item(System.Int32)"><summary>
            Gets or sets the <see cref="T:dotnetCHARTING.Element"></see> at a specified index. 
            </summary></member><member name="P:dotnetCHARTING.ElementCollection.Item(System.String)"><summary>
            Gets or sets the <see cref="T:dotnetCHARTING.Element"></see> with the specified name. 
            </summary></member><member name="T:dotnetCHARTING.Parameter"><summary>Represents an SQL parameter to use with a StoredProcedure.
            <seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="P:dotnetCHARTING.DataEngine.ParameterCollection"></seealso><seealso cref="P:dotnetCHARTING.DataEngine.StoredProcedure"></seealso></summary></member><member name="M:dotnetCHARTING.Parameter.#ctor"><summary>
            Initializes a new instance of the Parameter class.
            </summary></member><member name="M:dotnetCHARTING.Parameter.#ctor(System.String,System.String,dotnetCHARTING.FieldType)"><summary>
            Initializes a new instance of the Parameter class with a name, value, and <see cref="T:dotnetCHARTING.FieldType"></see>.
            </summary><param name="pName">Name of the parameter.</param><param name="pValue">Value of the parameter.</param><param name="pType"><see cref="T:dotnetCHARTING.FieldType"></see> of the parameter.</param></member><member name="P:dotnetCHARTING.Parameter.Name"><summary>
            Gets or sets the parameter name.
            </summary></member><member name="P:dotnetCHARTING.Parameter.Value"><summary>
            Gets or sets the parameter's value.
            </summary></member><member name="P:dotnetCHARTING.Parameter.Type"><summary>
            Gets or sets the parameter's <see cref="T:dotnetCHARTING.FieldType"></see>.
            </summary></member><member name="T:dotnetCHARTING.ParameterCollection"><summary> 
            Contains a collection of <see cref="T:dotnetCHARTING.Parameter">Parameter</see> objects. 
             <seealso cref="T:dotnetCHARTING.DataEngine"></seealso><seealso cref="P:dotnetCHARTING.DataEngine.ParameterCollection"></seealso></summary></member><member name="M:dotnetCHARTING.ParameterCollection.Add(dotnetCHARTING.Parameter)"><summary> Adds a specified <see cref="T:dotnetCHARTING.Parameter">Parameter</see> class to this collection.</summary><param name="_Parameter">The <see cref="T:dotnetCHARTING.Parameter">Parameter</see> to add.</param><returns>The zero-based index of the added <see cref="T:dotnetCHARTING.Parameter">Parameter</see>.</returns></member><member name="M:dotnetCHARTING.ParameterCollection.Add(dotnetCHARTING.ParameterCollection)"><summary>
            Adds a specified <see cref="T:dotnetCHARTING.ParameterCollection"></see> to this collection.
            </summary><param name="paramCollection"><see cref="T:dotnetCHARTING.ParameterCollection"></see> to add.</param></member><member name="M:dotnetCHARTING.ParameterCollection.Insert(System.Int32,dotnetCHARTING.Parameter)"><summary>Inserts a Parameter into this collection at a specified index. </summary><param name="index">The zero-based index into the collection at which to insert the Parameter.</param><param name="_Parameter">The Parameter to insert into this collection.</param></member><member name="M:dotnetCHARTING.ParameterCollection.Remove(dotnetCHARTING.Parameter)"><summary>Removes a specified Parameter from this collection.</summary><param name="_Parameter">The Parameter to remove. </param></member><member name="M:dotnetCHARTING.ParameterCollection.Contains(dotnetCHARTING.Parameter)"><summary>Determines whether this collection contains a specified <see cref="T:dotnetCHARTING.Parameter">Parameter</see>.</summary><param name="_Parameter">The <see cref="T:dotnetCHARTING.Parameter">Parameter</see> to find.</param><returns>true if the specified <see cref="T:dotnetCHARTING.Parameter">Parameter</see> belongs to this collection; otherwise, false.</returns></member><member name="P:dotnetCHARTING.ParameterCollection.Item(System.Int32)"><summary> Gets or sets the object at a specified index. </summary></member><member name="T:dotnetCHARTING.ScaleBreakStyle"><summary>Specifies how a scale break is drawn on a chart.</summary><isnew>9/24/2003</isnew></member><member name="F:dotnetCHARTING.ScaleBreakStyle.None"><summary>The scale break is not accentuated in any way.</summary></member><member name="F:dotnetCHARTING.ScaleBreakStyle.ZigZag"><summary>A gap with a zig zag is drawn at the scale break position.</summary></member><member name="F:dotnetCHARTING.ScaleBreakStyle.Gap"><summary>A gap is drawn at the scale break position.</summary></member><member name="F:dotnetCHARTING.ScaleBreakStyle.Line"><summary>A line is drawn at the scale break position.</summary></member><member name="T:dotnetCHARTING.RadarMode"><summary>
            Specifies the behavior of the x axis on a circular graph such as radar.
            </summary><isnew></isnew></member><member name="F:dotnetCHARTING.RadarMode.Spider"><summary>
            The x axis tick marks are connected by straight lines resembling a spider web.
            </summary></member><member name="F:dotnetCHARTING.RadarMode.Polar"><summary>
            The x axis ticks marks are connected by arcs completing a circle around the chart. 
            Connected data points such as lines will have data points interpolated around the arc.
            </summary></member><member name="T:dotnetCHARTING.TimeScaleLabelMode"><summary>Specifies the single value time label automation mode.</summary><remarks><para>This feature automates choosing different format strings and axis ticks for
                particular instances in time. These time instance attributes can be modified
                through the
                <a href="dotnetCHARTING~dotnetCHARTING.Axis~TimeLabelAutomation.html">Axis.TimeLabelAutomationMode</a>
                property.</para><para><strong><br></br></strong><strong>(Tutorial) See:</strong><br></br>
                Getting Started <strong>/</strong> General Tutorials <strong>/</strong> Axis
                Tutorials <strong>/</strong> Axis Ticks <strong>/</strong> Axis Time Label
                Automation</para></remarks><seealso cref="!:Axis.TimeLabelAutomationInfo">TimeLabelAutomationInfo Class</seealso><seealso cref="!:Axis.TimeLabelAutomation">TimeLabelAutomation Property (dotnetCHARTING.Axis)</seealso></member><member name="F:dotnetCHARTING.TimeScaleLabelMode.Default"><summary>Specifies no time label automation. Only the Axis.DefaultTick and Axis.FormatString will be used.</summary></member><member name="F:dotnetCHARTING.TimeScaleLabelMode.Hidden"><summary>
            Specifies hidden time label mode. Single value time labels will not be
            shown.
            </summary></member><member name="F:dotnetCHARTING.TimeScaleLabelMode.Dynamic"><summary>
            Specifies time instance specific label automation mode. Axis ticks will use a
            format string and axis tick relevant to the instance in time they represent.
            </summary></member><member name="F:dotnetCHARTING.TimeScaleLabelMode.Smart"><summary>
            Specifies smart time label automation. Similar to specific except the first tick
            will indicate the instance in time and take it's default value from the axis default
            tick.
            </summary></member><member name="T:dotnetCHARTING.TimeScaleLabelRangeMode"><summary>Specifies the range value time label automation mode.</summary></member><member name="F:dotnetCHARTING.TimeScaleLabelRangeMode.Default"><summary>
            Range time ticks will not be generated unless the time intervals are specified in
            <see cref="P:dotnetCHARTING.Axis.TimeScaleLabelInfo.RangeIntervals">TimeScaleLabelInfo.RangeIntervals</see>.
            </summary></member><member name="F:dotnetCHARTING.TimeScaleLabelRangeMode.Dynamic"><summary><para>Range time ticks are generated based on dynamically determined
                intervals.</para><para>If time intervals are specified in
                <see cref="P:dotnetCHARTING.Axis.TimeScaleLabelInfo.RangeIntervals">TimeScaleLabelInfo.RangeIntervals</see>
                this mode will behave like <strong>Default</strong> mode.</para></summary></member><member name="T:dotnetCHARTING.SubValueType"><summary>Specifies the how a sub value is drawn.</summary></member><member name="F:dotnetCHARTING.SubValueType.ErrorBar"><summary>
            Draws a traditional error bar. The width of the cap line is determined by
            SubValue.Line.Length. If not specified it is dynamically determined based on the
            element size.
            </summary></member><member name="F:dotnetCHARTING.SubValueType.Marker"><summary>
            Draws a marker at the value position of the SubValue. Two markers are drawn then
            the SubValue represents a range.
            </summary></member><member name="F:dotnetCHARTING.SubValueType.Line"><summary>Same as the error bar except only the cap lines are drawn.</summary></member><member name="T:dotnetCHARTING.SynchronizeScaleMode"><summary>Specifies an axis scale synchronization mode between two or more axes.</summary><seealso cref="T:dotnetCHARTING.Axis">Axis Class</seealso><seealso cref="T:dotnetCHARTING.Axis.ScaleSync">ScaleSync Class</seealso></member><member name="F:dotnetCHARTING.SynchronizeScaleMode.Origin"><summary>
            Synchronizes axes to match the axis origins. The origin is the position on a
            numeric axis where the value is zero (0). This mode does not apply to time axes.
            </summary></member><member name="F:dotnetCHARTING.SynchronizeScaleMode.Full"><summary>Synchronizes the complete axis scale (high, and low).</summary></member><member name="F:dotnetCHARTING.SynchronizeScaleMode.High"><summary>Synchronizes the high range values of multiple axes.</summary></member><member name="F:dotnetCHARTING.SynchronizeScaleMode.Low"><summary>Synchronizes the low range values of multiple axes.</summary></member><member name="T:dotnetCHARTING.DataSourceType"><summary>
            Specifies a
            <a href="dotnetCHARTING~dotnetCHARTING.DataSource.html">DataSource</a> type to split
            the parent <a href="dotnetCHARTING~dotnetCHARTING.DataSource.html">DataSource</a>
            into.
            </summary></member><member name="F:dotnetCHARTING.DataSourceType.None"><summary>Specifies no type</summary></member><member name="F:dotnetCHARTING.DataSourceType.Element"><summary>
            Specifies an <a href="dotnetCHARTING~dotnetCHARTING.Element.html">Element</a>
            data source type.
            </summary></member><member name="F:dotnetCHARTING.DataSourceType.Series"><summary>
            Specifies a <a href="dotnetCHARTING~dotnetCHARTING.Series.html">Series</a> data
            source type.
            </summary></member><member name="F:dotnetCHARTING.DataSourceType.SeriesCollection"><summary>Specifies an <a href="dotnetCHARTING~dotnetCHARTING.SeriesCollection.html">SeriesCollection</a> data source type.</summary></member><member name="F:dotnetCHARTING.DataSourceType.ElementGroup"><summary>
            Specifies an Element Group data source type. Element groups are elements in the
            same <a href="dotnetCHARTING~dotnetCHARTING.SeriesCollection.html">SeriesCollection</a> that share a name.
            </summary></member><member name="F:dotnetCHARTING.DataSourceType.AxisMarker"><summary>Specifies an <a href="dotnetCHARTING~dotnetCHARTING.AxisMarker.html">AxisMarker</a> data source type.</summary></member><member name="F:dotnetCHARTING.DataSourceType.ScaleRange"><summary>Specifies a <a href="dotnetCHARTING~dotnetCHARTING.ScaleRange.html">ScaleRange</a> data source type.</summary></member><member name="T:dotnetCHARTING.LegendEntryHeaderMode"><summary>Specifies a header mode for element entries.</summary></member><member name="F:dotnetCHARTING.LegendEntryHeaderMode.None"><summary>No effect.</summary></member><member name="F:dotnetCHARTING.LegendEntryHeaderMode.RepeatOnEachColumn"><summary>
            Forces the <see cref="T:dotnetCHARTING.LegendEntry"></see> to be repeated at the top of each column in multi-column legend boxes.
            </summary></member><member name="F:dotnetCHARTING.LegendEntryHeaderMode.StartNewColumn"><summary>
            Causes the <see cref="T:dotnetCHARTING.LegendEntry"></see> to start a new column.
            </summary></member><member name="T:dotnetCHARTING.LimitMode"><summary>
            Controls the type of limitation in
            <a href="dotnetCHARTING~dotnetCHARTING.Series~Limit.html">Limit</a> or
            <a href="dotnetCHARTING~dotnetCHARTING.Series~SplitByLimit.html">SplitByLimit</a>
            properties.
            </summary></member><member name="F:dotnetCHARTING.LimitMode.Top"><summary>Keep only top <strong>Limit</strong> values.</summary></member><member name="F:dotnetCHARTING.LimitMode.Bottom"><summary>Keep only bottom <strong>Limit</strong> values.</summary></member><member name="F:dotnetCHARTING.LimitMode.ExcludeTop"><summary>Remove top <strong>Limit</strong> values.</summary></member><member name="F:dotnetCHARTING.LimitMode.ExcludeBottom"><summary>Remove Bottom <strong>Limit</strong> values.</summary></member><member name="T:dotnetCHARTING.ChartAreaLayoutMode"><summary>
            Specifies the positioning behavior of multiple chart areas on a single chart
            image.
            </summary></member><member name="F:dotnetCHARTING.ChartAreaLayoutMode.VerticalPriority"><summary><para>Specifies that chart areas layout will be based on axis relationships where x
                axes will be matched before chart areas are added based on y axis
                relationships.</para><para>ChartAreaLayoutRules.EnforceOppositeAxisAlignment affects this
                setting.</para></summary></member><member name="F:dotnetCHARTING.ChartAreaLayoutMode.HorizontalPriority"><summary><para>Specifies that chart areas layout will be based on axis relationships where y
                axes will be matched before chart areas are added based on x axis
                relationships.</para><para>ChartAreaLayoutRules.EnforceOppositeAxisAlignment affects this
                setting.</para></summary></member><member name="F:dotnetCHARTING.ChartAreaLayoutMode.VerticalSmart"><summary>
            Specifies that chart areas will be laid out vertically in a single column and
            arranged based on x axis relationships.
            </summary></member><member name="F:dotnetCHARTING.ChartAreaLayoutMode.HorizontalSmart"><summary>
            Specifies that chart areas will be laid out horizontally in a single row and
            arranged based on x axis relationships.
            </summary></member><member name="F:dotnetCHARTING.ChartAreaLayoutMode.Vertical"><summary>
            Specifies that chart areas will be laid out vertically in a single column in the
            order they were added.
            </summary></member><member name="F:dotnetCHARTING.ChartAreaLayoutMode.Horizontal"><summary>
            Specifies that chart areas will be laid out horizontally in a single row in the
            order they were added.
            </summary></member><member name="F:dotnetCHARTING.ChartAreaLayoutMode.Custom"><summary>
            Specifies that chart areas will be laid out in a grid matrix based on
            ChartArea.GridPosition.
            </summary></member><member name="T:dotnetCHARTING.TimeInterval"><summary>Specifies a time interval.</summary></member><member name="F:dotnetCHARTING.TimeInterval.Minutes"><summary>
            Specifies minutes.
            </summary></member><member name="F:dotnetCHARTING.TimeInterval.Hours"><summary>
            Specifies hours.
            </summary></member><member name="F:dotnetCHARTING.TimeInterval.Days"><summary>
            Specifies days.
            </summary></member><member name="F:dotnetCHARTING.TimeInterval.Weeks"><summary>
            Specifies weeks.
            </summary></member><member name="F:dotnetCHARTING.TimeInterval.Months"><summary>
            Specifies months.
            </summary></member><member name="F:dotnetCHARTING.TimeInterval.Quarters"><summary>Specifies quarters (3 months).</summary></member><member name="F:dotnetCHARTING.TimeInterval.Years"><summary>
            Specifies years.
            </summary></member><member name="F:dotnetCHARTING.TimeInterval.Hour"><summary>
            Specifies hour by minute.
            </summary></member><member name="F:dotnetCHARTING.TimeInterval.Day"><summary>
            Specifies day by hour.
            </summary></member><member name="F:dotnetCHARTING.TimeInterval.Week"><summary>
            Specifies week by day.
            </summary></member><member name="F:dotnetCHARTING.TimeInterval.Month"><summary>
            Specifies month by day.
            </summary></member><member name="F:dotnetCHARTING.TimeInterval.Quarter"><summary>
            Specifies year by quarter (3 months).
            </summary></member><member name="F:dotnetCHARTING.TimeInterval.Year"><summary>
            Specifies year by months.
            </summary></member><member name="F:dotnetCHARTING.TimeInterval.None"><summary>
            Specifies no time interval.
            </summary></member><member name="F:dotnetCHARTING.TimeInterval.Seconds"><summary>Specifies seconds.</summary></member><member name="F:dotnetCHARTING.TimeInterval.Milliseconds"><summary>Specified one millisecond.</summary></member><member name="F:dotnetCHARTING.TimeInterval.Second"><summary>Specifies second.</summary></member><member name="F:dotnetCHARTING.TimeInterval.Minute"><summary>Specifies minute by seconds.</summary></member><member name="T:dotnetCHARTING.ShadingEffectMode"><summary>
            Specifies a shading mode.
            </summary></member><member name="F:dotnetCHARTING.ShadingEffectMode.None"><summary>
            No shading is applied.
            </summary></member><member name="F:dotnetCHARTING.ShadingEffectMode.One"><summary>
            Shading style One.
            </summary></member><member name="F:dotnetCHARTING.ShadingEffectMode.Two"><summary>
            Shading style Two.
            </summary></member><member name="F:dotnetCHARTING.ShadingEffectMode.Three"><summary>
            Shading style Three.
            </summary></member><member name="T:dotnetCHARTING.ChartType"><summary>
            Represents the chart type of a chart.
            </summary></member><member name="F:dotnetCHARTING.ChartType.Combo"><summary>
            The combo chart supports virtually every feature. This chart is capable of 
            being every chart you want it to be based on settings of other objects like 
            series and axes. The x axis is a label axis and the y axis is a value axis. <BR></BR><BR></BR><b>Element values used</b><BR></BR> YValue, YValueStart, YDateTime, YDateTimeStart, Complete 
            </summary></member><member name="F:dotnetCHARTING.ChartType.ComboSideBySide"><summary>
            Each series is drawn side by side. This chart doesn't support stacked axis scales 
            and unclustered columns. The x axis is a label axis and the y axis is a value axis. <BR></BR><BR></BR><b>Element values used</b><BR></BR> YValue, YValueStart, YDateTime, YDateTimeStart, Complete 
            </summary></member><member name="F:dotnetCHARTING.ChartType.ComboHorizontal"><summary>
            This chart supports the bar and cylinder series types. 
            The y axis is a label axis and the x axis is a value axis. <BR></BR><BR></BR><b>Element values used</b><BR></BR> YValue, YValueStart, YDateTime, YDateTimeStart, Complete 
            </summary></member><member name="F:dotnetCHARTING.ChartType.Pie"><summary>
            The pie chart draws a single pie where each slice represents a series. <BR></BR><b>Most applications would use Pies rather than Pie</b><BR></BR><BR></BR><b>Element values used</b><BR></BR>  YValue 
            </summary></member><member name="F:dotnetCHARTING.ChartType.Pies"><summary>
            Multiple pies where each pie is a series and each slice is an element (suitable for most applications). Pies may also be drawn as donuts. 
            Most applications would use Pies rather than Pie. Pies does not support Series.Palette.<BR></BR><BR></BR><b>Element values used</b><BR></BR> YValue 
            </summary></member><member name="F:dotnetCHARTING.ChartType.Donut"><summary>
            See Pie.
            </summary></member><member name="F:dotnetCHARTING.ChartType.Donuts"><summary>
            See Pies.
            </summary></member><member name="F:dotnetCHARTING.ChartType.Radar"><summary>
            Draws a single radar. The time scale is not supported by the radar graph. <BR></BR><BR></BR><b>Element values used</b><BR></BR> YValue 
            </summary></member><member name="F:dotnetCHARTING.ChartType.Radars"><summary>
            Draws multiple radars where each radar is a series. The time scale is not supported by radar graph.<BR></BR><BR></BR><b>Element values used</b><BR></BR> YValue 
            </summary></member><member name="F:dotnetCHARTING.ChartType.Scatter"><summary>
            Draws scattered data. Markers, lines, and splines are supported. <BR></BR><BR></BR><b>Element values used</b><BR></BR>  YValue, YDateTime, XValue, XDateTime 
            </summary></member><member name="F:dotnetCHARTING.ChartType.Bubble"><summary>
            Draws scattered data. Markers, lines, and splines are supported. 
            Data Used: YValue, YDateTime, XValue, XDateTime 
            </summary></member><member name="F:dotnetCHARTING.ChartType.Financial"><summary>
            Only 3 axes exist for this chart, price, volume and x axis. No more axes can be bound to series but you can calculate as many axes as you would like. 
            HLC Charts can be achieved by providing a high, low, and close but leaving open equal double.NaN. <BR></BR><BR></BR><b>Element values used</b><BR></BR> Open, High, Low, Close, Volume 
            </summary></member><member name="F:dotnetCHARTING.ChartType.Gantt"><summary>
            See ComboHorizontal.
            </summary></member><member name="F:dotnetCHARTING.ChartType.Gauges"><summary>
            Draws a gauge for each series. Each element represents a needle.<BR></BR><BR></BR><b>Element values used</b><BR></BR>  YValue
            </summary></member><member name="T:dotnetCHARTING.ElementValue"><summary>
            Specifies a value of an element.
            </summary></member><member name="F:dotnetCHARTING.ElementValue.Name"><summary>
            The name of an element.
            </summary></member><member name="F:dotnetCHARTING.ElementValue.YValue"><summary>
            Y value of an element.
            </summary></member><member name="F:dotnetCHARTING.ElementValue.YValueStart"><summary>
            Initial y value of an element.
            </summary></member><member name="F:dotnetCHARTING.ElementValue.XValue"><summary>
            X value of an element.
            </summary></member><member name="F:dotnetCHARTING.ElementValue.XValueStart"><summary>
            Initial x value of an element.
            </summary></member><member name="F:dotnetCHARTING.ElementValue.YDateTime"><summary>
            Y DateTime value of an element.
            </summary></member><member name="F:dotnetCHARTING.ElementValue.YDateTimeStart"><summary>
            Initial y DateTime value of an element.
            </summary></member><member name="F:dotnetCHARTING.ElementValue.XDateTime"><summary>
            X DateTime value of an element.
            </summary></member><member name="F:dotnetCHARTING.ElementValue.XDateTimeStart"><summary>
            Initial x DateTime value of an element.
            </summary></member><member name="F:dotnetCHARTING.ElementValue.BubbleSize"><summary>
            Bubble size value of an element.
            </summary></member><member name="F:dotnetCHARTING.ElementValue.Complete"><summary>
            Percent completed value of an element.
            </summary></member><member name="F:dotnetCHARTING.ElementValue.Open"><summary>
            Financial open price value of an element.
            </summary></member><member name="F:dotnetCHARTING.ElementValue.Close"><summary>
            Financial close price value of an element.
            </summary></member><member name="F:dotnetCHARTING.ElementValue.High"><summary>
            Financial high price value of an element.
            </summary></member><member name="F:dotnetCHARTING.ElementValue.Low"><summary>
            Financial low price value of an element.
            </summary></member><member name="F:dotnetCHARTING.ElementValue.Volume"><summary>
            Financial trade volumn value of an element.
            </summary></member><member name="T:dotnetCHARTING.EmptyElementMode"><summary>
            Specifies how empty elements are handled.
            </summary></member><member name="F:dotnetCHARTING.EmptyElementMode.None"><summary>
            Empty elements are not shown or marked leaving gaps.
            </summary></member><member name="F:dotnetCHARTING.EmptyElementMode.Ignore"><summary>
            Completes empty areas by filling the line, or area. Columns will behave the same as EmptyElementMode.None.
            </summary></member><member name="F:dotnetCHARTING.EmptyElementMode.Fill"><summary>
            Fills the empty area with EmptyElement properties of a series.
            </summary></member><member name="F:dotnetCHARTING.EmptyElementMode.TreatAsZero"><summary>
            Empty elements will have the value of 0 and not be marked as empty.
            </summary></member><member name="T:dotnetCHARTING.ElementMarkerType"><summary>Built in element marker icons.</summary></member><member name="F:dotnetCHARTING.ElementMarkerType.None"><summary>Does not draw a marker</summary></member><member name="F:dotnetCHARTING.ElementMarkerType.Square"><summary>Markers is drawn as a square.</summary></member><member name="F:dotnetCHARTING.ElementMarkerType.Triangle"><summary>Markers is drawn as a triangle.</summary></member><member name="F:dotnetCHARTING.ElementMarkerType.Circle"><summary>Markers is drawn as a circle.</summary></member><member name="F:dotnetCHARTING.ElementMarkerType.Diamond"><summary>
            Markers is drawn as a diamond.
            </summary></member><member name="F:dotnetCHARTING.ElementMarkerType.FourPointStar"><summary>
            Markers is drawn as a four point star.
            </summary></member><member name="F:dotnetCHARTING.ElementMarkerType.FivePointStar"><summary>
            Markers is drawn as a five point star.
            </summary></member><member name="F:dotnetCHARTING.ElementMarkerType.SixPointStar"><summary>
            Markers is drawn as a six point star.
            </summary></member><member name="F:dotnetCHARTING.ElementMarkerType.SevenPointStar"><summary>
            Markers is drawn as a seven point star.
            </summary></member><member name="F:dotnetCHARTING.ElementMarkerType.Split"><summary>
            Markers is drawn as a financial split.
            </summary></member><member name="F:dotnetCHARTING.ElementMarkerType.ReverseSplit"><summary>
            Markers is drawn as a financial reverse split.
            </summary></member><member name="F:dotnetCHARTING.ElementMarkerType.Merger"><summary>
            Markers is drawn as a financial merger.
            </summary></member><member name="F:dotnetCHARTING.ElementMarkerType.Dividend"><summary>
            Markers is drawn as a financial dividend paid indicator.
            </summary></member><member name="F:dotnetCHARTING.ElementMarkerType.Spinoff"><summary>
            Markers is drawn as a financial spinoff.
            </summary></member><member name="T:dotnetCHARTING.SeriesType"><summary>Specifies how a series will be shown on the chart.</summary></member><member name="F:dotnetCHARTING.SeriesType.Marker"><summary>Draws elements as element markers.</summary></member><member name="F:dotnetCHARTING.SeriesType.Line"><summary>Draws the series as a line.</summary></member><member name="F:dotnetCHARTING.SeriesType.Spline"><summary>Draws the series as a spline.</summary></member><member name="F:dotnetCHARTING.SeriesType.AreaLine"><summary>Draws the series as an area line.</summary></member><member name="F:dotnetCHARTING.SeriesType.Column"><summary>Draws the series as a bar.</summary></member><member name="F:dotnetCHARTING.SeriesType.Cylinder"><summary>Draws the series as a cylinder.</summary></member><member name="F:dotnetCHARTING.SeriesType.Bar"><summary>
            See Column.
            </summary></member><member name="F:dotnetCHARTING.SeriesType.Bubble"><summary>Draws the series elements as bubbles.</summary></member><member name="F:dotnetCHARTING.SeriesType.AreaSpline"><summary>Draws the series as an area spline.</summary></member><member name="T:dotnetCHARTING.SeriesTypeFinancial"><summary>
            Specifies how a financial series will be shown on the chart.
            </summary></member><member name="F:dotnetCHARTING.SeriesTypeFinancial.CandleStick"><summary>
            Draws the series with candle sticks.
            </summary></member><member name="F:dotnetCHARTING.SeriesTypeFinancial.Bar"><summary>
            Draws the series with bars.
            </summary></member><member name="F:dotnetCHARTING.SeriesTypeFinancial.Open"><summary>
            Draws the opening price as a line.
            </summary></member><member name="F:dotnetCHARTING.SeriesTypeFinancial.Close"><summary>
            Draws the closing price as a line.
            </summary></member><member name="F:dotnetCHARTING.SeriesTypeFinancial.High"><summary>
            Draws the high price as a line.
            </summary></member><member name="F:dotnetCHARTING.SeriesTypeFinancial.Low"><summary>
            Draws the low price as a line.
            </summary></member><member name="F:dotnetCHARTING.SeriesTypeFinancial.HighLowArea"><summary>
            Draws a range area of highs and lows.
            </summary></member><member name="T:dotnetCHARTING.ImageFormat"><summary>Specifies file save format.</summary></member><member name="F:dotnetCHARTING.ImageFormat.Png"><summary>Saves an image using the W3C Portable Network Graphics (PNG) image format.</summary></member><member name="F:dotnetCHARTING.ImageFormat.Bmp"><summary>Saves an image as a bitmap (BMP).</summary></member><member name="F:dotnetCHARTING.ImageFormat.Jpg"><summary>Saves an image using the Joint Photographic Experts Group (JPEG) image format.</summary></member><member name="F:dotnetCHARTING.ImageFormat.Emf"><summary>Saves an image using the enhanced Windows metafile (EMF) image format.</summary></member><member name="F:dotnetCHARTING.ImageFormat.Wmf"><summary>Saves an image using the Windows metafile (WMF) image format.</summary></member><member name="F:dotnetCHARTING.ImageFormat.Tif"><summary>Saves an image using the Tag Image File Format (TIFF) image format.</summary></member><member name="T:dotnetCHARTING.LegendBoxPosition"><summary>
            Specifies the position of the legend box.
            </summary></member><member name="F:dotnetCHARTING.LegendBoxPosition.Top"><summary>
            The legend box is rendered at the top right side of the graph.
            </summary></member><member name="F:dotnetCHARTING.LegendBoxPosition.Middle"><summary>
            The legend box is rendered at the middle right side of the graph.
            </summary></member><member name="F:dotnetCHARTING.LegendBoxPosition.Bottom"><summary>
            The legend box is rendered at the bottom right side of the graph.
            </summary></member><member name="F:dotnetCHARTING.LegendBoxPosition.BottomMiddle"><summary>
            The legend box is rendered at the bottom middle side of the graph.
            </summary></member><member name="F:dotnetCHARTING.LegendBoxPosition.None"><summary>
            The legend box is now visible.
            </summary></member><member name="T:dotnetCHARTING.BoxCorner"><summary>
            Specifies a box edge style.
            </summary></member><member name="F:dotnetCHARTING.BoxCorner.Square"><summary>
            The edge is a corner.
            </summary></member><member name="F:dotnetCHARTING.BoxCorner.Cut"><summary>
            The edge is cut.
            </summary></member><member name="F:dotnetCHARTING.BoxCorner.Round"><summary>
            The edge is rounded.
            </summary></member><member name="T:dotnetCHARTING.RadarLabelMode"><summary>
            Specifies how tick labels behave on a radar graph.
            </summary></member><member name="F:dotnetCHARTING.RadarLabelMode.None"><summary>
            The labels are not visible.
            </summary></member><member name="F:dotnetCHARTING.RadarLabelMode.Normal"><summary>
            The labels are drawn horizontally next to the tick mark.
            </summary></member><member name="F:dotnetCHARTING.RadarLabelMode.Angled"><summary>
            The labels are angled based on the tick mark angle.
            </summary></member><member name="F:dotnetCHARTING.RadarLabelMode.Inside"><summary>
            The label is on the right side of the tick mark and angled to touch the top of the grid. The label
            will be within the radar grid.
            </summary></member><member name="F:dotnetCHARTING.RadarLabelMode.Outside"><summary>
            The label is on the right side of the tick mark and angled to lie on top of the grid. The label
            will be outside the radar grid.
            </summary></member><member name="T:dotnetCHARTING.Scale"><summary>
            Indicates the scale of an axis.
            </summary></member><member name="F:dotnetCHARTING.Scale.Normal"><summary>
            The normal scale will always show 0 on the chart.
            </summary></member><member name="F:dotnetCHARTING.Scale.Range"><summary>
            The axis will start and end shortly outside the range of element values.
            </summary></member><member name="F:dotnetCHARTING.Scale.Logarithmic"><summary>
            Logarithmic axis scale.
            </summary></member><member name="F:dotnetCHARTING.Scale.Time"><summary>
            Time axis scale.
            </summary></member><member name="F:dotnetCHARTING.Scale.Stacked"><summary>
            Similar to <strong>Normal</strong> but elements are stacked on top of each
            other.
            </summary></member><member name="F:dotnetCHARTING.Scale.FullStacked"><summary>
            Elements are stacked and each stack is equal to 100%.
            </summary></member><member name="F:dotnetCHARTING.Scale.LogarithmicStacked"><summary>
            Similar to <strong>Logarithmic</strong> but elements are stacked on top of each
            other.
            </summary></member><member name="T:dotnetCHARTING.TitleBoxPosition"><summary>Specifies the title box position.</summary></member><member name="F:dotnetCHARTING.TitleBoxPosition.None"><summary>Title box not drawn.</summary></member><member name="F:dotnetCHARTING.TitleBoxPosition.Left"><summary>Title box is left aligned.</summary></member><member name="F:dotnetCHARTING.TitleBoxPosition.Center"><summary>Title box is centered.</summary></member><member name="F:dotnetCHARTING.TitleBoxPosition.Right"><summary>Title box is right aligned.</summary></member><member name="F:dotnetCHARTING.TitleBoxPosition.Full"><summary>Title box is stretched across the graph area ( Text is centered ).</summary></member><member name="F:dotnetCHARTING.TitleBoxPosition.FullWithLegend"><summary>Title box is stretched across the graph area ( Text is left aligned, legend right aligned ).</summary></member><member name="T:dotnetCHARTING.Orientation"><summary>
            Specifies the orientation of an object.
            </summary></member><member name="F:dotnetCHARTING.Orientation.Left"><summary>
            The object is on the left.
            </summary></member><member name="F:dotnetCHARTING.Orientation.Right"><summary>
            The object is on the right.
            </summary></member><member name="F:dotnetCHARTING.Orientation.Top"><summary>
            The object is on top.
            </summary></member><member name="F:dotnetCHARTING.Orientation.Bottom"><summary>
            The object is on bottom.
            </summary></member><member name="F:dotnetCHARTING.Orientation.TopLeft"><summary>
            The object ( Usually an annotation) on the upper left hand side.
            </summary></member><member name="F:dotnetCHARTING.Orientation.TopRight"><summary>
            The object ( Usually an annotation) on the upper right hand side.
            </summary></member><member name="F:dotnetCHARTING.Orientation.BottomRight"><summary>
            The object ( Usually an annotation) on the bottom right hand side.
            </summary></member><member name="F:dotnetCHARTING.Orientation.BottomLeft"><summary>
            The object ( Usually an annotation) on the bottom left hand side.
            </summary></member><member name="F:dotnetCHARTING.Orientation.None"><summary>
            No orientation is specified.
            </summary></member><member name="T:dotnetCHARTING.PieLabelMode"><summary>
            Specifies pie label behavior.
            </summary></member><member name="F:dotnetCHARTING.PieLabelMode.Inside"><summary>
            Labels must be inside the pie, if they dont fit they will not be visible.
            </summary></member><member name="F:dotnetCHARTING.PieLabelMode.Outside"><summary>
            Labels are drawn outside the pie with a line pointing to the slice it represents.
            </summary></member><member name="F:dotnetCHARTING.PieLabelMode.Automatic"><summary>
            If labels fit inside a slice they are drawn there otherwise they are drawn 
            outside with a line pointing to the slice it represents.
            </summary></member><member name="T:dotnetCHARTING.BackgroundMode"><summary>Specifies a background drawing mode.</summary></member><member name="F:dotnetCHARTING.BackgroundMode.Color"><summary>Draws a solid color.</summary></member><member name="F:dotnetCHARTING.BackgroundMode.Image"><summary>Draws a centered image on the background surface.</summary></member><member name="F:dotnetCHARTING.BackgroundMode.ImageStretch"><summary>Stretches an image across the background surface.</summary></member><member name="F:dotnetCHARTING.BackgroundMode.ImageTile"><summary>Tiles an image on a background surface.</summary></member><member name="F:dotnetCHARTING.BackgroundMode.Gradient"><summary>Draws a 2 color gradient.</summary></member><member name="F:dotnetCHARTING.BackgroundMode.Brush"><summary>Uses the Background.Brush object to fill the surface.</summary></member><member name="T:dotnetCHARTING.Palette"><summary>
            Specifies a pre-defined palette.
            </summary></member><member name="F:dotnetCHARTING.Palette.None"><summary>
            No Palette
            </summary></member><member name="F:dotnetCHARTING.Palette.One"><summary>
            Palette one.
            </summary></member><member name="F:dotnetCHARTING.Palette.Two"><summary>
            Palette two.
            </summary></member><member name="F:dotnetCHARTING.Palette.Three"><summary>
            Palette three.
            </summary></member><member name="F:dotnetCHARTING.Palette.Four"><summary>
            Palette four.
            </summary></member><member name="F:dotnetCHARTING.Palette.Five"><summary>
            Palette five.
            </summary></member><member name="F:dotnetCHARTING.Palette.Random"><summary>
            A random palette.
            </summary></member><member name="F:dotnetCHARTING.Palette.Autumn"><summary>
            Autumn palette.
            </summary></member><member name="F:dotnetCHARTING.Palette.Bright"><summary>
            Bright palette.
            </summary></member><member name="F:dotnetCHARTING.Palette.Lavender"><summary>
            Lavender palette.
            </summary></member><member name="F:dotnetCHARTING.Palette.MidTones"><summary>
            Mid tones palette.
            </summary></member><member name="F:dotnetCHARTING.Palette.Mixed"><summary>
            Mixed palette.
            </summary></member><member name="F:dotnetCHARTING.Palette.Pastel"><summary>
            Pastel palette.
            </summary></member><member name="F:dotnetCHARTING.Palette.Poppies"><summary>
            Poppies palette.
            </summary></member><member name="F:dotnetCHARTING.Palette.Spring"><summary>
            Spring palette.
            </summary></member><member name="F:dotnetCHARTING.Palette.WarmEarth"><summary>
            Warm earth palette.
            </summary></member><member name="F:dotnetCHARTING.Palette.WaterMeadow"><summary>
            Water meadow palette.
            </summary></member><member name="T:dotnetCHARTING.HatchStylePalette"><summary>
            Specifies a pre-defined hatch style palette.
            </summary></member><member name="F:dotnetCHARTING.HatchStylePalette.None"><summary>
            No hatch style palette is specified.
            </summary></member><member name="F:dotnetCHARTING.HatchStylePalette.One"><summary>
            Palette one.
            </summary></member><member name="F:dotnetCHARTING.HatchStylePalette.Two"><summary>
            Palette two.
            </summary></member><member name="F:dotnetCHARTING.HatchStylePalette.Three"><summary>
            Palette three.
            </summary></member><member name="F:dotnetCHARTING.HatchStylePalette.Random"><summary>
            A random palette.
            </summary></member><member name="T:dotnetCHARTING.Calculation"><summary>
            Specifies a calculation to be performed on a series or series collection.
            </summary></member><member name="F:dotnetCHARTING.Calculation.Sum"><summary>
            Calculates the sum of a series or series collection.
            </summary></member><member name="F:dotnetCHARTING.Calculation.Mean"><summary>
            Calculates the mean of a series or series collection.
            </summary></member><member name="F:dotnetCHARTING.Calculation.Median"><summary>
             Calculates the median of a series or series collection.
            </summary></member><member name="F:dotnetCHARTING.Calculation.Mode"><summary>
             Calculates the mode of a series or series collection.
            </summary></member><member name="F:dotnetCHARTING.Calculation.Average"><summary>
             Calculates the average of a series or series collection.
            </summary></member><member name="F:dotnetCHARTING.Calculation.Minimum"><summary>
             Calculates the minimum of a series or series collection.
            </summary></member><member name="F:dotnetCHARTING.Calculation.Maximum"><summary>
             Calculates the maximum of a series or series collection.
            </summary></member><member name="F:dotnetCHARTING.Calculation.RunningSum"><summary>
             Calculates a running sum of a series or series collection.
            </summary></member><member name="F:dotnetCHARTING.Calculation.RunningMean"><summary>
             Calculates a running mean of a series or series collection.
            </summary></member><member name="F:dotnetCHARTING.Calculation.RunningMedian"><summary>
             Calculates a running median of a series or series collection.
            </summary></member><member name="F:dotnetCHARTING.Calculation.RunningMode"><summary>
             Calculates a running mode of a series or series collection.
            </summary></member><member name="F:dotnetCHARTING.Calculation.RunningAverage"><summary>
             Calculates a running average of a series or series collection.
            </summary></member><member name="F:dotnetCHARTING.Calculation.RunningMinimum"><summary>
             Calculates a running minimum of a series or series collection.
            </summary></member><member name="F:dotnetCHARTING.Calculation.RunningMaximum"><summary>
             Calculates a running maximum of a series or series collection.
            </summary></member><member name="F:dotnetCHARTING.Calculation.TrendLineLinear"><summary>
            Calculates the linear regression of y values within a series collection.
            </summary></member><member name="F:dotnetCHARTING.Calculation.TrendLineLinearScatter"><summary>
            Calculates the linear regression of x and y values within a series collection.
            </summary></member><member name="T:dotnetCHARTING.LabelAlignment"><summary>
            Specifies alignment of a label.
            </summary></member><member name="F:dotnetCHARTING.LabelAlignment.Automatic"><summary>
            Label is aligned automatically.
            </summary></member><member name="F:dotnetCHARTING.LabelAlignment.Bottom"><summary>
            Label is bottom aligned.
            </summary></member><member name="F:dotnetCHARTING.LabelAlignment.Center"><summary>
            Label is center aligned.
            </summary></member><member name="F:dotnetCHARTING.LabelAlignment.Top"><summary>
            Label is top aligned.
            </summary></member><member name="F:dotnetCHARTING.LabelAlignment.OutsideBottom"><summary>
            Label is below an object such as a column.
            </summary></member><member name="F:dotnetCHARTING.LabelAlignment.OutsideTop"><summary>
            Label is above an object such as a column.
            </summary></member><member name="T:dotnetCHARTING.TickLabelMode"><summary>
            Specifies how tick labels are laid out.
            </summary></member><member name="F:dotnetCHARTING.TickLabelMode.Automatic"><summary>
            Specifies that the best mode is automatically determined.
            </summary></member><member name="F:dotnetCHARTING.TickLabelMode.Angled"><summary>
            Specifies that labels are angled. Only applies to x axes.
            </summary></member><member name="F:dotnetCHARTING.TickLabelMode.Normal"><summary>
            Specifies that labels are drawn horizontally on a single line.  
            If labels will overlap with this setting, they will automatically switch to angled.
            </summary></member><member name="F:dotnetCHARTING.TickLabelMode.Wrapped"><summary>
            Specifies that labels are drawn wrapping horizontally.  If labels will 
            overlap with this setting, they will automatically switch to angled.
            </summary></member><member name="T:dotnetCHARTING.TruncationMode"><summary>
            Specifies how to trim characters from a string that exceeds a maximum number of characters.
            </summary></member><member name="F:dotnetCHARTING.TruncationMode.Start"><summary>
            The end of a string is removed until the specified number of characters remains. (ABCD..)
            </summary></member><member name="F:dotnetCHARTING.TruncationMode.Middle"><summary>
            The start and end of a string is removed until the specified number of characters remains. (..EFGH..)
            </summary></member><member name="F:dotnetCHARTING.TruncationMode.End"><summary>
            The start of a string is removed until the specified number of characters remains. (..IJKL)
            </summary></member><member name="F:dotnetCHARTING.TruncationMode.StartEnd"><summary>
            The middle of a string is removed until the specified number of characters remains (ABCD..IJKL)
            </summary></member><member name="F:dotnetCHARTING.TruncationMode.None"><summary>
            No trimming is performed.
            </summary></member><member name="T:dotnetCHARTING.FileManager"><summary>
            Facilitates saving bitmap images and cleanup.
            </summary></member><member name="M:dotnetCHARTING.FileManager.#ctor"><summary>
            File manager constructor (Must keep internal)
            </summary></member><member name="F:dotnetCHARTING.FileManager.cachedAddress"><summary>
            Used by getAddressString().
            </summary></member><member name="M:dotnetCHARTING.FileManager.SaveImage(System.Drawing.Bitmap,System.Boolean)"><summary>
            Saves a <see cref="T:System.Drawing.Bitmap"></see> in the <see cref="P:dotnetCHARTING.FileManager.TempDirectory"></see> and displays it in the
            chart control.
            </summary><param name="bmp"><see cref="T:System.Drawing.Bitmap"></see> to save.</param><param name="fileSaved"> for later chart display.</param><returns>Path of the saved bitmap.</returns></member><member name="M:dotnetCHARTING.FileManager.SaveImage(System.Drawing.Bitmap)"><summary>
            Saves a <see cref="T:System.Drawing.Bitmap"></see> in the <see cref="P:dotnetCHARTING.FileManager.TempDirectory"></see> and displays it in the
            chart control.
            </summary><param name="bmp"><see cref="T:System.Drawing.Bitmap"></see> to save.</param><returns>Path of the saved bitmap.</returns></member><member name="M:dotnetCHARTING.FileManager.getFullSavePath"><summary>
            Sets and and returns a fileSaveName. Also sets fileNameSet = true
            </summary><returns></returns></member><member name="M:dotnetCHARTING.FileManager.getFullBrowserPath"><summary>
            if(fileNameSet = false) generate. returns full path going to browser.
            </summary><returns></returns></member><member name="M:dotnetCHARTING.FileManager.createFileName"><summary>
            Creates a random file name
            </summary><returns></returns></member><member name="M:dotnetCHARTING.FileManager.GetFileName"><summary>
            Gets the file name of the last image created.
            </summary><returns></returns></member><member name="M:dotnetCHARTING.FileManager.getAddressString"><summary>
            Gets the current path and querystring.
            </summary><returns>Example: dotnetcharting/samples/one.aspx?q=1</returns></member><member name="P:dotnetCHARTING.FileManager.Cached"><summary>
            Gets a value indicating whether a chart will be renderd or a cached image will be used. 
            </summary><remarks>If false no special processing is required because a cached image 
            will be displayed.</remarks><returns></returns></member><member name="P:dotnetCHARTING.FileManager.TempDirectory"><summary>
            Gets or sets the directory where images generated by the control are temporarily stored.
            </summary><remarks>
            This property takes either an absolute path 'c:/inetpub/wwwroot/app/tmp',
            a relative path ('tmp', '../tmp',) or when started with '/' a relative path
            from c:/inetpub/wwwroot/ ('/app/tmp).
            </remarks><example>
                This examples demonstrate different ways of accessing the same folder:
                'c:/inetpub/wwwroot/app/tmp' when the applications is located in ...wwwroot/app.
                when started with '/' the folder resets to c:/inetpub/wwwroot/.
                <code lang="CS" title="[C#]">
            Chart.FileManager.TempDirectory = "c://inetpub/wwwroot/app/tmp";
            Chart.FileManager.TempDirectory = "/app/tmp";
            Chart.FileManager.TempDirectory = "tmp";
                </code><code lang="VB" title="[Visual Basic]">
            Chart.FileManager.TempDirectory = "c://inetpub/wwwroot/app/tmp"
            Chart.FileManager.TempDirectory = "/app/tmp"
            Chart.FileManager.TempDirectory = "tmp"
                </code></example></member><member name="P:dotnetCHARTING.FileManager.FileQuality"><summary>
            Gets or sets Jpg file quality. (Worse quality) 0 - 100 (Best quality)
            </summary><example><code lang="CS" title="[C#]">
            Chart.FileManager.FileQuality=75;
                </code><code lang="VB" title="[Visual Basic]">
            Chart.FileManager.FileQuality=75
                </code></example></member><member name="P:dotnetCHARTING.FileManager.ImageFormat"><summary>
            Gets or sets a <see cref="T:dotnetCHARTING.ImageFormat"></see> Enumeration specifying 
            the image file type.
            </summary><example><code lang="CS" title="[C#]">
            Chart.FileManager.ImageFormat=ImageFormat.Png;
                </code><code lang="VB" title="[Visual Basic]">
            Chart.FileManager.ImageFormat=ImageFormat.Png
                </code></example></member><member name="P:dotnetCHARTING.FileManager.CachePeriod"><summary>
            Gets or sets a <see cref="T:System.TimeSpan"></see> object that determines the amount of time an image is cached
            and displayed on a page before a new one is generated.
            </summary><remarks>When set, a given chart image will be generated on the first hit and on all 
            subsequent hits within the cache duration period, the same image will be returned with no rendering 
            work by the chart control.</remarks></member><member name="P:dotnetCHARTING.FileManager.CleanupPeriod"><summary>
            Gets or sets a <see cref="T:System.TimeSpan"></see> object that determines the amount of time 
            the <see cref="P:dotnetCHARTING.FileManager.TempDirectory"></see> folder would be checked for deleting old image files.
            </summary><example>
                This example sets the cleanup period every 30 minutes.
                <code lang="CS" title="[C#]">
            Chart.FileManager.CleanupPeriod= new TimeSpan(0,30,0);
                </code><code lang="VB" title="[Visual Basic]">
            Chart.FileManager.CleanupPeriod= New TimeSpan(0,30,0)
                </code></example></member><member name="P:dotnetCHARTING.FileManager.CleanupMinimumAge"><summary>
            Gets or sets a <see cref="T:System.TimeSpan"></see> object that determines the minimum amount of time images are stored
            in the <see cref="P:dotnetCHARTING.FileManager.TempDirectory"></see> folder before they are deleted.
            </summary></member><member name="P:dotnetCHARTING.FileManager.FileName"><summary>
            Sets the file name to save an image as, or gets the file name of an image that has been saved
            in the <see cref="P:dotnetCHARTING.FileManager.TempDirectory"></see> after a chart is generated. 
            </summary><remarks>When empty, a random name will be created. In order for the cleanup system
            to include custom file names they must start with 'dnc-', the mask is: 'dnc-*.*'.</remarks><example><code lang="CS" title="[C#]">
            Chart.FileManager.FileName="saleChart";
                </code><code lang="VB" title="[Visual Basic]">
            Chart.FileManager.FileName="saleChart"
                </code></example></member><member name="P:dotnetCHARTING.FileManager.StoreQueryString"><summary>
            An extra measure of security. Prevents the query string from being used in the cache file in case the file is
            found and downloaded by a malitious user.
            </summary></member><member name="T:dotnetCHARTING.FieldType"><summary>
            Specifies a database field data type.
            </summary></member><member name="F:dotnetCHARTING.FieldType.Text"><summary>
            String data type.
            </summary></member><member name="F:dotnetCHARTING.FieldType.Date"><summary>
            Date data type.
            </summary></member><member name="F:dotnetCHARTING.FieldType.Number"><summary>
            Number data type.
            </summary></member><member name="F:dotnetCHARTING.FieldType.Currency"><summary>
            Currency data type.
            </summary></member><member name="F:dotnetCHARTING.FieldType.Double"><summary>
            Double data type.
            </summary></member><member name="F:dotnetCHARTING.FieldType.Bool"><summary>
            Bool data type.
            </summary></member><member name="F:dotnetCHARTING.FieldType.LongNumber"><summary>
            LongNumber data type.
            </summary></member><member name="F:dotnetCHARTING.FieldType.BigInt"><summary>
            BigInt data type.
            </summary></member><member name="M:dotnetCHARTING.ColorLib.SetBrightness(System.Drawing.Color,System.Double)"><summary> 
            Sets the absolute brightness of a colour 
            </summary><param name="c">Original colour</param><param name="brightness">The luminance level to impose</param><returns>an adjusted colour</returns></member><member name="M:dotnetCHARTING.ColorLib.HSL_to_RGB(dotnetCHARTING.ColorLib.HSL,System.Drawing.Color)"><summary> 
            Converts a colour from HSL to RGB 
            </summary><remarks>Adapted from the algoritm in Foley and Van-Dam</remarks><param name="hsl">The HSL value</param><param name="c">The HSL value</param><returns>A Color structure containing the equivalent RGB values</returns></member><member name="M:dotnetCHARTING.ColorLib.RGB_to_HSL(System.Drawing.Color)"><summary> 
            Converts RGB to HSL 
            </summary><remarks>Takes advantage of whats already built in to .NET by using the Color.GetHue, Color.GetSaturation and Color.GetBrightness methods</remarks><param name="c">A Color to convert</param><returns>An HSL value</returns></member><member name="M:dotnetCHARTING.ColorLib.ScaleLogBright(System.Drawing.Color,System.Double)"><summary>
            Scales based on log function
            </summary><param name="c">color</param><param name="log">Multiply log by (.007 is average) Lower is less change</param><returns>color</returns></member><member name="M:dotnetCHARTING.ColorLib.ScaleLogDark(System.Drawing.Color,System.Double)"><summary>
            Scales based on log function
            </summary><param name="c">color</param><param name="log">Multiply log by (.007 is average) Lower is less change</param><returns>color</returns></member><member name="M:dotnetCHARTING.ColorLib.ScaleLinearBright(System.Drawing.Color,System.Double)"><summary></summary><param name="c"></param><param name="slope">0 = no Change | 1 = Complete Change</param><returns></returns></member><member name="M:dotnetCHARTING.ColorLib.setTransparency(System.Int32,System.Drawing.Color)"><summary>
            Sets transparency, 100 = transparency, 0 = opaque, Alpha setting has opposite effect.
            </summary><param name="transparency"></param><param name="myColor"></param><returns></returns></member><member name="M:dotnetCHARTING.ShapeLib.getInterpolatedPointWhereX(System.Drawing.PointF[],System.Single)"><summary>
            Gets an interpolated point on a curve line (must be sorted). 
            </summary><param name="curve"></param><param name="givenX"></param><returns>the point of x or PointF.Empty if not found.</returns><hiden></hiden></member><member name="M:dotnetCHARTING.GraphicLib.Emboss_Helper_FillPart(System.Drawing.Graphics,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)"><summary>
            Points are ( p3 - p1 - p2 - p4 )
            </summary><param name="g"></param><param name="p1">Mid Point</param><param name="p2">SHading Point to Middle</param><param name="p3">For angle Reference</param><param name="p4">For angle Reference</param></member><member name="M:dotnetCHARTING.GraphicLib.angleBetweenPoints(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)"><summary>
            Angle between p2 and p3 at p1.
            </summary><param name="p1">Middle</param><param name="p2"></param><param name="p3"></param><returns></returns></member><member name="M:dotnetCHARTING.GraphicLib.Emboss3_Helper_FillPart(System.Drawing.Graphics,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Single,System.Drawing.PointF[],System.Int32)"><summary>
            Points are ( p3 - p1 - p2 - p4 ). (index = p2)
            </summary><param name="g"></param><param name="p1">Mid Point</param><param name="p2">SHading Point to Middle</param><param name="p3">For angle Reference</param><param name="p4">For angle Reference</param><param name="depth"></param><param name="lastPoints"></param><param name="index"></param></member><member name="M:dotnetCHARTING.GraphicLib.doesSegmentIntersectLine(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)"><summary>
            p1 and p2 are segments  p3 and p4 are points on a line.
            </summary><param name="p1"></param><param name="p2"></param><param name="p3"></param><param name="p4"></param></member><member name="M:dotnetCHARTING.GraphicLib.LineIntercept(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)"><summary>
            Gets intercept of line p1,p2 and line p3,p4
            </summary><param name="p1"></param><param name="p2"></param><param name="p3"></param><param name="p4"></param><returns></returns></member><member name="M:dotnetCHARTING.GraphicLib.getFontHeightBound(System.Drawing.Graphics,System.Drawing.Font)"><summary>
            Gets the height of a font in pixels excluding spacing.
            </summary><param name="f"></param><returns></returns></member><member name="M:dotnetCHARTING.GraphicLib.getFontWhiteSpaceHeight(System.Drawing.Graphics,System.Drawing.Font)"><summary>
            Gets the height of a font's line space minus the font size
            </summary><param name="f"></param><returns></returns></member><member name="M:dotnetCHARTING.GraphicLib.getStringSizeNoVSpacing(System.Drawing.Graphics,System.Drawing.Font,System.String)"><summary>
            Gets the size of a 
            </summary><param name="g"></param><param name="f"></param><param name="s"></param><returns></returns></member><member name="M:dotnetCHARTING.DrawLib.drawCenteredVerticalString(dotnetCHARTING.Graph,System.Drawing.Graphics,System.String,System.Drawing.PointF,System.Drawing.Font,System.Drawing.Brush)"><summary>
            Draws a vertical string reading bottom to top at the center point.
            </summary><exclude></exclude><param name="g"></param><param name="str"></param><param name="point">Center point</param><param name="f"></param><param name="b"></param></member><member name="M:dotnetCHARTING.DrawLib.drawCenteredVerticalString(dotnetCHARTING.Graph,System.Drawing.Graphics,System.String,System.Drawing.PointF,System.Drawing.Font,System.Drawing.Brush,System.Drawing.StringFormat)"><summary>
            Draws a vertical string reading bottom to top at the center point.
            </summary><exclude></exclude><param name="g"></param><param name="str"></param><param name="point">Center point</param><param name="f"></param><param name="b"></param></member><member name="M:dotnetCHARTING.MeasureLib.measureThinColumnString(System.Drawing.Graphics,dotnetCHARTING.Label)"><summary>
            Measures the string based on the widest word.
            </summary><param name="g"></param><param name="label"></param><returns></returns></member><member name="M:dotnetCHARTING.SF.copySkin(dotnetCHARTING.Series,dotnetCHARTING.Series)"><summary>
            Copies all properties of the source series to the dest series without copying elements.
            </summary><param name="dest"></param><param name="source"></param></member><member name="M:dotnetCHARTING.SF.seriesSum(dotnetCHARTING.Series)"><summary>
            Y of all elements in this series.
            </summary><param name="s"></param><returns></returns></member><member name="M:dotnetCHARTING.SF.seriesDateTimeHigh(dotnetCHARTING.Series)"><summary>
            Returns the highest YDateTimeValue for this series.
            </summary><param name="s"></param><returns></returns></member><member name="M:dotnetCHARTING.SF.seriesDateTimeLow(dotnetCHARTING.Series)"><summary>
            Returns the lowest YDateTimeValue for this series.
            </summary><param name="s"></param><returns></returns></member><member name="M:dotnetCHARTING.SF.seriesYTimeRange(dotnetCHARTING.Series,dotnetCHARTING.Axis)"><summary>
            returns the number of days of all time ranges within the series.
            </summary><param name="s"></param><param name="a"></param><returns></returns></member><member name="M:dotnetCHARTING.SF.seriesYTimeRangeTS(dotnetCHARTING.Series,dotnetCHARTING.Axis)"><summary>
            returns the timeSpan of all Y time ranges within the series.
            </summary><param name="s"></param><param name="a"></param><returns></returns></member><member name="M:dotnetCHARTING.SF.seriesXTimeRangeTS(dotnetCHARTING.Series)"><summary>
            returns the timeSpan of all X time ranges within the series.
            </summary><param name="s"></param><returns></returns></member><member name="M:dotnetCHARTING.SF.seriesYTimeSpan(dotnetCHARTING.Series)"><summary>
            Gets the span of time from the lowest y date to highest y date.
            </summary><param name="s"></param><returns></returns></member><member name="M:dotnetCHARTING.TimeLib.setNextDayOfWeek(System.DateTime,System.Int32)"><summary>
            Returns a date where the day has changed the following dayOfWeek. 
            </summary><param name="start"></param><param name="dayOfWeek"></param><returns></returns></member><member name="M:dotnetCHARTING.StringLib.WordLowestPOT(System.String)"><summary>
            gets the shortest words percent of total string.
            </summary><param name="original"></param><returns></returns></member><member name="M:dotnetCHARTING.StringLib.WordHighestPOT(System.String)"><summary>
            gets the longest words percent of total string.
            </summary><param name="original"></param><returns></returns></member><member name="M:dotnetCHARTING.StringLib.newLineCount(System.String)"><summary>
            Returns the number of new line occurences
            </summary><param name="original"></param><returns></returns></member><!-- Badly formed XML comment ignored for member "M:dotnetCHARTING.ParseLib.ParseReplaceExpressions(System.String)" --><member name="M:dotnetCHARTING.ParseLib.MapPath(System.String)"><summary>
            Takes Absolute Path, Relative Web, Absolute Web address, or UNC and returns physical location.
            </summary><param name="original"></param><returns></returns></member><member name="M:dotnetCHARTING.ParseLib.ParsePath(System.String)"><summary>
            Maps absolute paths if necessary.
            </summary><param name="original"></param><returns></returns></member><member name="M:dotnetCHARTING.TestLib.supportsRangeAxisTicks(dotnetCHARTING.objRef,System.Boolean)"><summary>
            Specifies if range axis ticks are supported. Value axis is assumed.
            </summary><param name="callingClass"></param><param name="isXAxis"></param><returns></returns></member><member name="M:dotnetCHARTING.TestLib.isRange(dotnetCHARTING.Series)"><summary>
            Tests to see if this series has a range which is drawn. DEPENDENCIES: CorrectData()
            </summary><param name="s"></param><returns></returns></member><member name="M:dotnetCHARTING.TestLib.isStackable(dotnetCHARTING.Series)"><summary>
            Determines whether the series type supports stacking.
            </summary><param name="s"></param><returns></returns></member><member name="M:dotnetCHARTING.TestLib.HitTest_IsOverlapping(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Rectangle)"><summary>
            Determines whether rectangle overlaps the shapes in the graphics path
            </summary><param name="gp"></param><param name="r"></param><returns></returns></member><member name="M:dotnetCHARTING.TestLib.isMarkerDrawn(dotnetCHARTING.Series,dotnetCHARTING.Element,dotnetCHARTING.objRef,System.Boolean)"><summary>
            Checks if the marker is drawn on this element regarless of forced or whatever.
            </summary><param name="s"></param><param name="e"></param><param name="callingClass"></param><param name="Use3D"></param><returns></returns></member><member name="M:dotnetCHARTING.TrigLib.arcPointAuto(System.Drawing.RectangleF,System.Single)"><summary>
            If the point is at an angle where the result is obvious this will handle it.
            </summary><param name="rectangle"></param><param name="angle"></param><returns></returns></member><!-- Badly formed XML comment ignored for member "M:dotnetCHARTING.TrigLib.getPointToLineRatio(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)" --><!-- Badly formed XML comment ignored for member "M:dotnetCHARTING.TrigLib.getPointOfCurveWithAngle(System.Drawing.PointF[],System.Single)" --><member name="M:dotnetCHARTING.TrigLib.getBestPointOfCurveWithAngle(System.Drawing.PointF[],System.Single)"><summary>
            Same as above except it returns
            </summary><param name="curve"></param><param name="theAngle"></param><returns></returns></member><member name="M:dotnetCHARTING.TrigLib.ensureCorrectX(System.Single,System.Single)"><summary>
            Provided the x and y are a resulting points on an ellipse centered at 0,0. This method ensure the x anx y are correct.
            </summary><param name="x"></param><param name="y"></param><param name="angle"></param></member><member name="M:dotnetCHARTING.TrigLib.ensureCorrectY(System.Single,System.Single)"><summary>
            Provided the x and y are a resulting points on an ellipse centered at 0,0. 
            This method ensure the x anx y are correct.
            </summary><param name="x"></param><param name="y"></param><param name="angle"></param></member><member name="M:dotnetCHARTING.TrigLib.angleBetweenPoints(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)"><summary>
            Angle between p2 and p3 at p1.
            </summary><param name="p1">Middle</param><param name="p2"></param><param name="p3"></param><returns></returns></member><member name="M:dotnetCHARTING.AlgebraLib.LineIntercept(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)"><summary>
            Gets intercept of line p1,p2 and line p3,p4
            </summary><param name="p1"></param><param name="p2"></param><param name="p3"></param><param name="p4"></param><returns></returns></member><member name="M:dotnetCHARTING.MathLib.calculateRegression(System.Double[],System.Int32)"><summary>
            Calculates regression for the given values and an extra amount of points for each direction.
            </summary><param name="values"></param><param name="extras"></param><returns></returns></member><member name="M:dotnetCHARTING.MathLib.calculateRegression(System.Double[][],System.Int32)"><summary>
            Calculates regression for multiple series.
            </summary><param name="values"></param><param name="extras"></param><returns></returns></member><member name="M:dotnetCHARTING.MathLib.calculateRegression(System.Double[],System.Double[],System.Int32)"><summary>
            Calculates scatter regression
            </summary><param name="yValues"></param><param name="xValues"></param><param name="extras"></param><returns>[0] = yValues [1] = XValues</returns></member><member name="M:dotnetCHARTING.MathLib.CalculateLinearRegression(System.String,dotnetCHARTING.Series,System.Int32)"><summary>
            Generates a trend series based on given series.
            </summary><param name="seriesName"></param><param name="series"></param><param name="extraData"></param><returns></returns></member><member name="M:dotnetCHARTING.MathLib.minimum(System.Double[])"><summary>
            Calculates high and low date times.
            </summary><param name="values"></param><param name="calculation"></param><returns></returns></member><member name="T:dotnetCHARTING.XmlChartPropertySerialization"><summary>
            Summary description for XmlChartSerializeAttribute.
            </summary></member></members></doc>